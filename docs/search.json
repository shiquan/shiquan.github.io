[
  {
    "objectID": "Yano.html",
    "href": "Yano.html",
    "title": "Yano",
    "section": "",
    "text": "Yano represents an R/C toolkit designed for conducting spatial dissimilarity analysis on single-cell RNA sequencing data. This method revolves around the core concept of examining the distinct expression patterns of a given feature (e.g. exon, snp allele) in relation to its associated binding feature (typically a gene or another allele at the same genomic locus) within the context of cell lineage (1D), spatial position (2D), or the multi-dimensional PCA space. The discernible differences in feature expression patterns and their binding features provide insights into a range of biological phenomena, including alternative splicing, cis-antisense RNA regulation, allele-specific gene expression, and more.\nYano is seamlessly integrated with Seurat, building upon the Seurat object’s framework. Users can perform conventional cell clustering analyses using the state-of-the-art Seurat pipeline and then incorporate exon, SNP counts as new “assays” within the Seurat objects. Subsequently, Yano facilitates the assessment of spatial dissimilarity between these two assays. For more details about the method, please refer to our manuscript."
  },
  {
    "objectID": "Yano.html#introduction",
    "href": "Yano.html#introduction",
    "title": "Yano",
    "section": "",
    "text": "Yano represents an R/C toolkit designed for conducting spatial dissimilarity analysis on single-cell RNA sequencing data. This method revolves around the core concept of examining the distinct expression patterns of a given feature (e.g. exon, snp allele) in relation to its associated binding feature (typically a gene or another allele at the same genomic locus) within the context of cell lineage (1D), spatial position (2D), or the multi-dimensional PCA space. The discernible differences in feature expression patterns and their binding features provide insights into a range of biological phenomena, including alternative splicing, cis-antisense RNA regulation, allele-specific gene expression, and more.\nYano is seamlessly integrated with Seurat, building upon the Seurat object’s framework. Users can perform conventional cell clustering analyses using the state-of-the-art Seurat pipeline and then incorporate exon, SNP counts as new “assays” within the Seurat objects. Subsequently, Yano facilitates the assessment of spatial dissimilarity between these two assays. For more details about the method, please refer to our manuscript."
  },
  {
    "objectID": "Yano.html#install",
    "href": "Yano.html#install",
    "title": "Yano",
    "section": "INSTALL",
    "text": "INSTALL\nif (!require(\"BiocManager\")) install.packages('BiocManager') \nBiocManager::install(\"shiquan/Yano\")\nNotice: Multithread mode is disabled on macOS by default due to the lack of OpenMP support. However, data.table provides a useful tutorial on how to enable OpenMP on macOS. For more information, please refer to this guide: https://github.com/Rdatatable/data.table/wiki/Installation#enable-openmp-for-macos."
  },
  {
    "objectID": "Yano.html#get-started",
    "href": "Yano.html#get-started",
    "title": "Yano",
    "section": "Get started",
    "text": "Get started\nA typical workflow with Yano starts by using a built-in dataset.\n\nrequire(Yano)\ndata(\"glbt_small\")\nDefaultAssay(glbt_small) &lt;- \"RNA\"\nglbt_small &lt;- NormalizeData(glbt_small) %&gt;% RunUMAP(dim = 1:20)\n\nDimPlot(glbt_small, label = TRUE, label.size = 5)\n\n\n\n\n\n\n\nDefaultAssay(glbt_small) &lt;- \"exon\"\nglbt_small &lt;- NormalizeData(glbt_small)\nMeta(glbt_small) %&gt;% head\n\ndata frame with 0 columns and 6 rows\n\nglbt_small &lt;- ParseExonName(glbt_small)\nMeta(glbt_small) %&gt;% head\n\n                                    chr     start       end gene_name strand\nchr1:154169305-154169383/-/TPM3    chr1 154169305 154169383      TPM3      -\nchr11:35197162-35197793/+/CD44    chr11  35197162  35197793      CD44      +\nchr11:75421727-75422280/+/RPS3    chr11  75421727  75422280      RPS3      +\nchr11:123060825-123061329/-/HSPA8 chr11 123060825 123061329     HSPA8      -\nchr11:123061588-123061833/-/HSPA8 chr11 123061588 123061833     HSPA8      -\nchr11:123061869-123062022/-/HSPA8 chr11 123061869 123062022     HSPA8      -\n\ngrep(\"_wm$\",names(glbt_small), value=TRUE)\n\ncharacter(0)\n\nglbt_small &lt;- RunAutoCorr(glbt_small)\ngrep(\"_wm$\",names(glbt_small), value=TRUE)\n\n[1] \"pca_wm\"\n\n# Perform spatial dissimilarity test\nglbt_small &lt;- RunSDT(glbt_small, bind.name = \"gene_name\", bind.assay = \"RNA\")\nMeta(glbt_small) %&gt;% head\n\n                                    chr     start       end gene_name strand\nchr1:154169305-154169383/-/TPM3    chr1 154169305 154169383      TPM3      -\nchr11:35197162-35197793/+/CD44    chr11  35197162  35197793      CD44      +\nchr11:75421727-75422280/+/RPS3    chr11  75421727  75422280      RPS3      +\nchr11:123060825-123061329/-/HSPA8 chr11 123060825 123061329     HSPA8      -\nchr11:123061588-123061833/-/HSPA8 chr11 123061588 123061833     HSPA8      -\nchr11:123061869-123062022/-/HSPA8 chr11 123061869 123062022     HSPA8      -\n                                   moransi.pval    moransi autocorr.variable\nchr1:154169305-154169383/-/TPM3   2.144774e-108 0.09755130              TRUE\nchr11:35197162-35197793/+/CD44     0.000000e+00 0.25567539              TRUE\nchr11:75421727-75422280/+/RPS3     4.383662e-38 0.05692911              TRUE\nchr11:123060825-123061329/-/HSPA8  1.099236e-63 0.07462144              TRUE\nchr11:123061588-123061833/-/HSPA8 7.645339e-158 0.11891356              TRUE\nchr11:123061869-123062022/-/HSPA8 1.466907e-150 0.11541286              TRUE\n                                  gene_name.D gene_name.t gene_name.pval\nchr1:154169305-154169383/-/TPM3     0.3436496   8.4268520   1.448736e-13\nchr11:35197162-35197793/+/CD44      0.1966297   0.8886768   1.881655e-01\nchr11:75421727-75422280/+/RPS3      0.3486643   8.1503513   5.710819e-13\nchr11:123060825-123061329/-/HSPA8   0.2446247   3.7857530   1.314186e-04\nchr11:123061588-123061833/-/HSPA8   0.3633522   8.8646031   1.631423e-14\nchr11:123061869-123062022/-/HSPA8   0.3320379   8.4846775   1.086526e-13\n                                  gene_name.padj\nchr1:154169305-154169383/-/TPM3     5.695820e-12\nchr11:35197162-35197793/+/CD44      1.000000e+00\nchr11:75421727-75422280/+/RPS3      2.132991e-11\nchr11:123060825-123061329/-/HSPA8   3.067802e-03\nchr11:123061588-123061833/-/HSPA8   8.124484e-13\nchr11:123061869-123062022/-/HSPA8   4.774324e-12\n\n# Manhattan plot for spatial dissimilarity test result\nFbtPlot(glbt_small, val = \"gene_name.padj\")\n\n\n\n\n\n\n\nFeaturePlot(glbt_small, features = c(\"chr19:16095264-16095454/+/TPM4\", \"TPM4\"), order=TRUE)\n\n\n\n\n\n\n\n# Track plot for gene coverage at different cell types\ndb &lt;- gtf2db(\"./gencode.v44.annotation.gtf.gz\")\n\n[2025-06-19 19:37:59] GTF loading..\n[2025-06-19 19:38:20] Load 62700 genes.\n\nTrackPlot(bamfile=\"./Parent_SC3v3_Human_Glioblastoma_possorted_genome_bam.bam\", gtf =db, gene = \"TPM4\", junc = TRUE, cell.group = Idents(glbt_small), highlights = c(16095264,16095454))\n\n\n\n\n\n\n\n\nSee short cases for more details."
  },
  {
    "objectID": "Yano.html#short-cases",
    "href": "Yano.html#short-cases",
    "title": "Yano",
    "section": "Short cases",
    "text": "Short cases\n\nAlternative splicing analysis for scRNA-seq\nAllele-specific gene expression analysis for scRNA-seq\nAnnotating and prioritizing genetic variants for scRNA-seq\nPerform alternative splicing analysis for multiple Visium samples\nSelect cells from reduction maps\nPerform alternative splicing analysis for cell trajectory and user-defined embeddings"
  },
  {
    "objectID": "Yano.html#changelog",
    "href": "Yano.html#changelog",
    "title": "Yano",
    "section": "Changelog",
    "text": "Changelog\n\n\n1.2 2025/06/18\n\n\nRename RunBlockCorr to RunSDT.\nReimplement core algorithm with sparse matrix structure. Highly improved speed (&gt;3x).\n\n\n\n\n1.1 2025/06/02\n\nSimplified parameters for RunCorrBlock() to streamlines the function and makes it more concise. In addition, new selector functions, *Selector(), introduced.\n\n\n\n1.0 2025/02/19\n\nFirst stable release.\n\n\n\n0.0.0.9999 2023/03/22\n\nInit version."
  },
  {
    "objectID": "Yano.html#issues-or-questions",
    "href": "Yano.html#issues-or-questions",
    "title": "Yano",
    "section": "Issues or questions",
    "text": "Issues or questions\n\nhttps://github.com/shiquan/Yano/issues\nhttps://github.com/shiquan/Yano/discussions"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "This website outlines the key tools and software packages developed from my research:\n\n\nFASTQ+: This format enhances the standard FASTQ file by integrating barcode information directly into the read name. This modification facilitates the harmonization of single-cell sequencing data across various platforms. FASTQ+ can be generated with PISA.\nPISA: A suite of programs specifically designed for preprocessing data from single-cell sequencing and spatial transcriptomics. It efficiently processes FASTQ+, BAM, and BED files, and generates various feature counts and annotations.\nYano: An R package that employs the spatial dissimilarity test method as its core algorithm. Yano is tailored for exploring various biological events in single-cell and spatial transcriptomics data, including alternative splicing, allele-specific gene expression, somatic variants and more, providing comprehensive insights into cellular dynamics. \n\nWorkflows and Short Cases for scRNA-seq and Spatial Transcriptome\n\nFrom raw reads to gene counts (PISA)\nAnnotate various features for alignment (PISA)\nAlternative splicing analysis for scRNA-seq (Yano)\nAllele-specific gene expression analysis for scRNA-seq (Yano)\nAnnotating and prioritizing genetic variants for scRNA-seq (Yano)\nPerform alternative splicing analysis for multiple Visium samples (Yano)\nSelect cells from reduction maps and spatial locations (Yano)\nPerform alternative splicing analysis for cell trajectory and user-defined embeddings (Yano)\n\n\n\n\n Back to top"
  },
  {
    "objectID": "fastq.html",
    "href": "fastq.html",
    "title": "The FASTQ+ Format Specification",
    "section": "",
    "text": "The FASTQ+ format is a variant of the FASTQ. It is designed to store more features or annotations for FASTQ records but not change the own property of the FASTQ structure. Each FASTQ+ record consists of four lines.\nThe optional fields of FASTQ+ is consist of numbers of tags in TAG:TYPE:VALUE format. The tag format is inherited from the SAM tag format (https://samtools.github.io/hts-specs/SAMv1.pdf). The TAG is a two-character string that matches /[A-Za-z][A-Za-z0-9]/. TYPE is a single case-sensitive letter, which defines the format of VALUE. Tags in optional fields are separated by three ’’ characters. No space allowed in the sequence identifier and optional fields. The total length of the first line should not exceed 254 characters."
  },
  {
    "objectID": "fastq.html#an-example",
    "href": "fastq.html#an-example",
    "title": "The FASTQ+ Format Specification",
    "section": "An example",
    "text": "An example\nIn the example below, SEQ_ID is the sequence identifier that users can set or generate by software. CB is the recommended tag name for the corrected cell barcode, GN is the recommended tag for gene name, and UB is the recommended tag for UMI.\n\n@SEQ_ID|||CB:Z:ACGT|||GN:Z:BRCA1|||UB:Z:AACG\nGATTTGGGGTTCAAAGCAGTATCGA\n+\n1***-+*''))**5&gt;&gt;CCCCCCC65"
  },
  {
    "objectID": "fastq.html#optional-tag-fields",
    "href": "fastq.html#optional-tag-fields",
    "title": "The FASTQ+ Format Specification",
    "section": "Optional tag fields",
    "text": "Optional tag fields\nAll optional tags for FASTQ+ follow the SAM tag format but add two more restrictions.\n\nSAM tags allow space in type Z, but not allowed in FASTQ+ tags.\nThe length of SAM tags is not limited, but FASTQ+ read identifier and tags are specified to be no longer than 254 characters.\n\n\n\n\n\n\n\n\n\n\nType\nRegexp matching VALUE\nDescription\n\n\n\n\nA\n[!-]\nPrintable character\n\n\ni\n[-+]?[0-9]+\nSigned integer\n\n\nf\n[-+]?[0-9]*.?[0-9]+([eE][-+]?[0-9]+)?\nSigned single-precision floating number\n\n\nZ\n[!-]*\nPrintable string.\n\n\nH\n([0-9A-F][0-9A-F])*\nByte array in the Hex format\n\n\nB\n[cCsSiIf](,[-+]?[0-9]*.?[0-9]+([eE][-+]?[0-9]+)?)*\nInteger or numberic array"
  },
  {
    "objectID": "fastq.html#recommended-tag-names-and-types-for-single-cell-experiments",
    "href": "fastq.html#recommended-tag-names-and-types-for-single-cell-experiments",
    "title": "The FASTQ+ Format Specification",
    "section": "Recommended tag names and types for single cell experiments",
    "text": "Recommended tag names and types for single cell experiments\nThe following tag names and types have been widely used in single-cell experiments. Although it is not required but highly recommended following the exact definition.\n\n\n\n\n\n\n\n\n\nTag name\nType\nDescription\n\n\n\n\nCR\nZ\nRaw cell barcode.\n\n\nCB\nZ\nCell barcode that is confirmed against a list of known-good barcode sequences.\n\n\nUR\nZ\nRaw molecular barcode. Usually be unique molecule indentifer (UMI).\n\n\nUB\nZ\nMolecular barcode that is corrected among other molecule barcodes.\n\n\nGN\nZ\nGene name.\n\n\nTX\nZ\nTranscript id.\n\n\nGX\nZ\nGene id."
  },
  {
    "objectID": "fastq.html#read-block",
    "href": "fastq.html#read-block",
    "title": "The FASTQ+ Format Specification",
    "section": "Read block",
    "text": "Read block\nA combination of tags can define the FASTQ+ block. Reads with the same tags can be selected and manipulated in a group. For example, SEQ1, SEQ2, and SEQ3 share the same cell barcode, and SEQ2 and SEQ3 share the same gene name but not for SEQ1. Using CB to define the block, all these three reads are from the same block. But if using CB and GN to determine the block, SEQ2 and SEQ3 are from the same block, different from SEQ1. Sorting the FASTQ+ file by tags can facilitate downstream analysis, i.e., assembly, for each block to be processed sequentially.\n\n@SEQ1|||CB:Z:ACGT|||GN:Z:BRCA1\nGATTTGGGGTTCAAAGCAGTATCGA\n+\n1***-+*''))**5&gt;&gt;CCCCCCC65\n@SEQ2|||CB:Z:ACGT|||GN:Z:SAA1\nACACTCGAAGATACAGAAATGAGTA\n+\nEEEEEE6/E/EEEAEEEE/E/EEE&lt;\n@SEQ3|||CB:Z:ACGT|||GN:Z:SAA1\nTATCGACAGGAAGAAGGAGGGAGGG\n+\nAE/EE&lt;/AEEEAEEEEE//AA/EEE"
  },
  {
    "objectID": "fastq.html#v1.0-apr-2022",
    "href": "fastq.html#v1.0-apr-2022",
    "title": "The FASTQ+ Format Specification",
    "section": "v1.0 : Apr 2022",
    "text": "v1.0 : Apr 2022\nInitial edition."
  },
  {
    "objectID": "PISA.html",
    "href": "PISA.html",
    "title": "PISA User Guide",
    "section": "",
    "text": "PISA [tool] [options] [input-file]"
  },
  {
    "objectID": "PISA.html#synopsis",
    "href": "PISA.html#synopsis",
    "title": "PISA User Guide",
    "section": "",
    "text": "PISA [tool] [options] [input-file]"
  },
  {
    "objectID": "PISA.html#install",
    "href": "PISA.html#install",
    "title": "PISA User Guide",
    "section": "Install",
    "text": "Install\nPISA source code can be downloaded at https://github.com/shiquan/PISA/releases, or the development version from https://github.com/shiquan/PISA/. To compile PISA from sources run make in the source directory.\n$ git clone https://github.com/shiquan/PISA\n$ cd PISA\n$ make"
  },
  {
    "objectID": "PISA.html#get-started",
    "href": "PISA.html#get-started",
    "title": "PISA User Guide",
    "section": "Get Started",
    "text": "Get Started\nThe code snippet below demonstrates how to use the PISA tools to process test data and generate various feature counts. You can find the test data in the PISA/demo directory. This example provides a practical approach to familiarize yourself with the functionality of PISA and to validate its operations with provided sample data.\n$ cd demo\n\n$ ls\naln.sam.gz  barcodes.txt  demo_1.fq.gz  demo_2.fq.gz  demo.gtf.gz  peaks.bed  README.md  var.vcf.gz\n\n$ zcat demo_1.fq.gz|head -n 4\n@A00984:220:HNJ7KDRXX:1:1118:2510:4586\nAAGCATCCACACAGAGCACCCCGTTCTT\n+\nFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n\n$ zcat demo_2.fq.gz|head -n 4\n@A00984:220:HNJ7KDRXX:1:1118:2510:4586\nGCAGTGGTATCAACGCAGAGTACATGGGGAGCCTCATTGCCCAGCGGACCCCAGCCTCTGCCAGGTTCGGTCCGCCATCCTCGTCCCGTCC\n+\nFFFFF:FFFFFF:FFFFFFFFFF,FFFFFFFFF:FFFFFFFFF,FFFF:FFF,FFFFF:FFF:FFFFFFFFFFFFFFFFFFFF:FFFFFFF\n\n# Convert raw FASTQ to FASTQ+ format\n$ PISA parse -rule 'CR,R1:1-16,barcodes.txt,CB,1;UR,R1:17-28;R1,R2' demo_1.fq.gz demo_2.fq.gz -1 demo.fq\nNumber of Fragments,825\nFragments pass QC,825\nFragments with Exactly Matched Barcodes,805\nFragments with Failed Barcodes,0\n[2022-04-22 12:21:35] Real time: 0.003 sec; CPU: 0.009 sec; Peak RSS: 0.010 GB.\n\n$ head -n 4 demo.fq\n@A00984:220:HNJ7KDRXX:1:1118:2510:4586|||CR:Z:AAGCATCCACACAGAG|||CB:Z:AAGCATCCACACAGAG|||UR:Z:CACCCCGTTCTT\nGCAGTGGTATCAACGCAGAGTACATGGGGAGCCTCATTGCCCAGCGGACCCCAGCCTCTGCCAGGTTCGGTCCGCCATCCTCGTCCCGTCC\n+\nFFFFF:FFFFFF:FFFFFFFFFF,FFFFFFFFF:FFFFFFFFF,FFFF:FFF,FFFFF:FFF:FFFFFFFFFFFFFFFFFFFF:FFFFFFF\n\n# Alignment results of FASTQ+ \n$ samtools view aln.sam.gz|head -n 1\nA00984:220:HNJ7KDRXX:1:1118:2510:4586|||CR:Z:AAGCATCCACACAGAG|||CB:Z:AAGCATCCACACAGAG|||UR:Z:CACCCCGTTCTT   0   chr11   35139165    255 26S65M  *   0   0   GCAGTGGTATCAACGCAGAGTACATGGGGAGCCTCATTGCCCAGCGGACCCCAGCCTCTGCCAGGTTCGGTCCGCCATCCTCGTCCCGTCC FFFFF:FFFFFF:FFFFFFFFFF,FFFFFFFFF:FFFFFFFFF,FFFF:FFF,FFFFF:FFF:FFFFFFFFFFFFFFFFFFFF:FFFFFFF NH:i:1  HI:i:1  AS:i:61 nM:i:1\n\n# Convert format alignment records from SAM to BAM\n$ PISA sam2bam aln.sam.gz -o aln.bam\nRaw reads,825\nMapped reads,820 (99.39%)\nPlus strand,820\nMinus strand,0\nMitochondria ratio,0.00%\n[2022-04-22 12:26:31] Real time: 0.005 sec; CPU: 0.009 sec; Peak RSS: 0.010 GB.\n\n$ samtools view aln.bam|head -n 1\nA00984:220:HNJ7KDRXX:1:1118:2510:4586   0   chr11   35139165    255 26S65M  *   0   0   GCAGTGGTATCAACGCAGAGTACATGGGGAGCCTCATTGCCCAGCGGACCCCAGCCTCTGCCAGGTTCGGTCCGCCATCCTCGTCCCGTCC FFFFF:FFFFFF:FFFFFFFFFF,FFFFFFFFF:FFFFFFFFF,FFFF:FFF,FFFFF:FFF:FFFFFFFFFFFFFFFFFFFF:FFFFFFF NH:i:1  HI:i:1  AS:i:61 nM:i:1  CR:Z:AAGCATCCACACAGAG   CB:Z:AAGCATCCACACAGAG   UR:Z:CACCCCGTTCTT\n\n# Annotate gene names for BAM\n$ PISA anno -gtf ./demo.gtf.gz aln.bam -o anno_gtf.bam\n[2022-04-22 12:28:38] GTF loading..\n[2022-04-22 12:28:38] Load 2 genes.\n[2022-04-22 12:28:38] Load time : 0.003 sec\nReads Mapped to Genome (Map Quality &gt;= 0),99.4%\nReads Mapped to Exonic Regions,99.3%\nReads Mapped to Intronic Regions,0.0%\nReads Mapped to both Exonic and Intronic Regions,0.7%\nReads Mapped Antisense to Gene,0.0%\nReads Mapped to Intergenic Regions,0.0%\nReads Mapped to Gene but Failed to Interpret Type,0.0%\n[2022-04-22 12:28:38] Real time: 0.026 sec; CPU: 0.086 sec; Speed : 9528 records/sec; Peak RSS: 0.034 GB.\n\n# Correct UMIs amongst other UMIs from the same cell and mapped to the same gene, and create new tag UB for corrected UMIs\n$ PISA corr -tag UR -new-tag UB -tags-block CB,GN anno_gtf.bam -o corr.bam\n[2022-04-22 12:36:21] Building index ..\n[2022-04-22 12:36:21] Build time : 0.002 sec\n[2022-04-22 12:36:21] Real time: 0.077 sec; CPU: 0.085 sec\n\n$ samtools view corr.bam|head -n 1\nA00984:220:HNJ7KDRXX:1:1118:2510:4586   0   chr11   35139165    255 26S65M  *   0   0   GCAGTGGTATCAACGCAGAGTACATGGGGAGCCTCATTGCCCAGCGGACCCCAGCCTCTGCCAGGTTCGGTCCGCCATCCTCGTCCCGTCC FFFFF:FFFFFF:FFFFFFFFFF,FFFFFFFFF:FFFFFFFFF,FFFF:FFF,FFFFF:FFF:FFFFFFFFFFFFFFFFFFFF:FFFFFFF NH:i:1  HI:i:1  AS:i:61 nM:i:1  CR:Z:AAGCATCCACACAGAG   CB:Z:AAGCATCCACACAGAG   UR:Z:CACCCCGTTCTT   RE:A:E  GX:Z:ENSG00000026508.18 GN:Z:CD44   TX:Z:ENST00000263398.10,ENST00000428726.7,ENST00000526025.2 UB:Z:CACCCCGTTCTT\n\n# Count gene X cell features\n$ mkdir exp\n\n$ PISA count  -cb CB -anno-tag GN -outdir exp -umi UB corr.bam \n[2022-04-22 12:38:44] Real time: 0.033 sec; CPU: 0.013 sec; Peak RSS: 0.010 GB.\n\n# Gene expression matrix generated in the Market Exchange format \n$ ls exp/\nbarcodes.tsv.gz  features.tsv.gz  matrix.mtx.gz\n\n# Not just gene features, we can also annotate variants and functional regions to reads\n$ PISA anno -bed peaks.bed -tag PK -vcf var.vcf.gz -vtag VR  corr.bam -o anno_vcf_bed.bam    \nReads Mapped to Genome (Map Quality &gt;= 0),99.4%\nReads Mapped to BED regions / Peaks,0.0%\n[2022-04-22 12:43:01] Real time: 0.027 sec; CPU: 0.090 sec; Speed : 9085 records/sec; Peak RSS: 0.034 GB.\n\n$ samtools view anno_vcf_bed.bam|grep \"VR:Z\"|grep \"PK:Z\"|head -n 1\nA00984:220:HNJ7KDRXX:1:2266:27597:30843 0   chr11   35229688    255 91M *   0   0   CCCAGGGTTAATAGGGCCTGGTCCCTGGGAGGAAATTTGAATGGGTCCATTTTGCCCTTCCATAGCCTAATCCCGGGGCATTGTTTTCCAC\nFFFF,FFFFFFFFFF,FFFFFFF:,:FFFFFF,FF:FFFFFFFFFFF:,,:F:F:F,F:F:F,FFFF,F:FFFF,FF,FF:FFFFFFF:F: NH:i:1  HI:i:1  AS:i:85 nM:i:2  CR:Z:ATTGTTCCAAGTCCCG   CB:Z:ATTGTTCCAAGTCCCG   UR:Z:TCTTTAAGTCAG   RE:A:E  GX:Z:ENSG00000026508.18 GN:Z:CD44   TX:Z:ENST00000263398.10,ENST00000428726.7,ENST00000425428.6,ENST00000433892.6,ENST00000525469.1 UB:Z:TCTTTAAGTCAG   PK:Z:demo_peak_14a;demo_peak_14b    VR:Z:chr11:35229771C&gt;T\n\n# Summarize the reads, UMIs, genes, peaks, and variants per cell\n$ PISA attrcnt -cb CB -tags UB,GN,PK,VR anno_vcf_bed.bam -dedup |head -n 5\nBARCODE Raw UB  GN  PK  VR\nAAGCATCCACACAGAG    503 132 1   15  1\nATTGTTCCAAGTCCCG    533 124 1   13  1\nAAGCATCCACACNGAG    3   1   1   1   0\nAAGCNTCCACACAGAG    3   1   1   1   0\n\n# Deduplicate BAM file for each cell\n$ PISA rmdup -tags CB corr.bam -o rmdup.bam -nw \n[2022-04-22 12:59:39] Deduplicating chr11\n[2022-04-22 12:59:39] All reads,820\n[2022-04-22 12:59:39] Duplicate reads,125\n[2022-04-22 12:59:39] Duplicate ratio,0.1524\n[2022-04-22 12:59:39] Real time: 0.008 sec; CPU: 0.015 sec; Peak RSS: 0.010 GB.\n\n# Deduplicate BAM file for each molecular\n$ PISA rmdup -tags CB,UR corr.bam -o rmdup1.bam -nw\n[2022-04-22 13:00:35] Deduplicating chr11\n[2022-04-22 13:00:35] All reads,820\n[2022-04-22 13:00:35] Duplicate reads,0\n[2022-04-22 13:00:35] Duplicate ratio,0.0000\n[2022-04-22 13:00:35] Real time: 0.009 sec; CPU: 0.015 sec; Peak RSS: 0.011 GB.\n\n# Select all reads annotated to gene CD44\n# Generate a gene candidate list\n$  echo \"CD44\" &gt; gene.txt\n\n$ PISA pick -tags GN -list gene.txt anno_vcf_bed.bam  -o picked.bam\n[2022-04-22 13:03:01] Real time: 0.009 sec; CPU: 0.016 sec\n\n# Select reads with more features\n$ awk '{printf(\"%s\\tCD44\\n\", $1)}' barcodes.txt &gt; candidates.txt\n\n$ cat candidates.txt \nAAGCATCCACACAGAG    CD44\nATTGTTCCAAGTCCCG    CD44\nGCACATAGTCAGTTTG    CD44\n\n$ PISA pick -tags CB,GN -list candidates.txt anno_vcf_bed.bam -o picked.bam \n[2022-04-22 13:09:28] Real time: 0.007 sec; CPU: 0.013 sec\n\n# Convert BAM to FASTQ+\n$ PISA bam2fq -tags CB,GN picked.bam -o pick.fq\n\n$ head -n 4 pick.fq \n@A00984:220:HNJ7KDRXX:1:1118:2510:4586|||CB:Z:AAGCATCCACACAGAG|||GN:Z:CD44\nGCAGTGGTATCAACGCAGAGTACATGGGGAGCCTCATTGCCCAGCGGACCCCAGCCTCTGCCAGGTTCGGTCCGCCATCCTCGTCCCGTCC\n+\nFFFFF:FFFFFF:FFFFFFFFFF,FFFFFFFFF:FFFFFFFFF,FFFF:FFF,FFFFF:FFF:FFFFFFFFFFFFFFFFFFFF:FFFFFFF\n\n# Sort FASTQ+ reads by CB and GN\n$ PISA fsort -tags CB,GN pick.fq -o fsort.fq.gz\n[2022-04-22 13:22:50] Write 795 records to fsort.fq.gz.0000.bgz.\n[2022-04-22 13:22:50] Unlink fsort.fq.gz.0000.bgz\n[2022-04-22 13:22:50] Create fsort.fq.gz from 1 files.\n[2022-04-22 13:22:50] Real time: 0.021 sec; CPU: 0.020 sec\n\n$ zcat fsort.fq.gz|head -n 8\n@A00984:220:HNJ7KDRXX:1:1118:2510:4586|||CB:Z:AAGCATCCACACAGAG|||GN:Z:CD44\nGCAGTGGTATCAACGCAGAGTACATGGGGAGCCTCATTGCCCAGCGGACCCCAGCCTCTGCCAGGTTCGGTCCGCCATCCTCGTCCCGTCC\n+\nFFFFF:FFFFFF:FFFFFFFFFF,FFFFFFFFF:FFFFFFFFF,FFFF:FFF,FFFFF:FFF:FFFFFFFFFFFFFFFFFFFF:FFFFFFF\n@A00984:220:HNJ7KDRXX:1:2143:21640:21496|||CB:Z:AAGCATCCACACAGAG|||GN:Z:CD44\nCCTGCCCCGCGCCCAGAGATCCTCCAGCTCCTTTCGCCCGCGCCCTACGTTCGCTCCGGACACCATGGACAAGTATTGGTGGAACACAGCC\n+\n,,FFFFFFFF,F,,:F,F,F:FFF,FFFFFF,F::F,FF,F:FF:,,FF:FFF,:FFFF:FFF,::FFFF,F:F,FFFF,,F,FFF,F,::\n\n# Assembly reads mapped to CD44 of the same cell into contigs\n# This step requires Trinity software and seqtk already installed in your environment\n$ PISA stream -tags CB,GN -script 'Trinity --seqType fq --SS_lib_type F --single ${FQ} --max_memory 1G 2&gt;/dev/null 1&gt;/dev/null; seqtk rename trinity_out_dir.Trinity.fasta ${UBI}_ 2&gt;/dev/null' -t 10 -fa  -nw ./fsort.fq.gz -o assem.fa\n[2022-04-22 13:24:21] Real time: 5.607 sec; CPU: 0.010 sec; Peak RSS: 0.010 GB.\n\n$ seqtk seq assem.fa -l 100 |head \n&gt;Z_AAGCATCCACACAGAG_Z_CD44_1|||CB:Z:AAGCATCCACACAGAG|||GN:Z:CD44 len=439 path=[0:0-438]\nGAAATTAGGGCCCAATTAATAATCAGCAAGAATTTGATCGTTCCAGTTCCCACTTGGAGGCCTTTCATCCCTCGGGTGTGCTATGGATGGCTTCTAACAA\nAAACTACACATATGTATTCCTGATCGCCAACCTTTCCCCCACCAGCTAAGGACATTTCCCAGGGTTAATAGGGCCTGGTCCCTGGGAGGAAATTTGAATG\nGGTCCATTTTGCCCTTCCATAGCCTAATCCCTGGGCATTGTTTTCCACTGAGGTTGGGGGTTGGGGTGTACTAGTTACACATCTTCAACAGACCCCCTCT\nAGAAATTTTTCAGATGCTTCTGGGAGACACCCAAAGGGTGAAGCTATTTATCTGTAGTAAACTATTTATCTGTGTTTTTGAAATATTAAACCCTGGATCA\nGTCCTTTGATCAGTATAATTTTTTAAAGTTACTTTGTCA\n&gt;Z_AAGCATCCACACAGAG_Z_CD44_2|||CB:Z:AAGCATCCACACAGAG|||GN:Z:CD44 len=384 path=[0:0-383]\nCCTGGTAGAATTGGCTTTTCTAGCAGAACCTTTCCAAAAGTTTTATATTGAGATTCATAACAACACCAAGAATTGATTTTGTAGCCAACATTCATTCAAT\nACTGTTATATCAGAGGAGTAGGAGAGAGGAAACATTTGACTTATCTGGAAAAGCAAAATGTACTTAAGAATAAGAATAACATGGTCCATTCACCTTTATG\nTTATAGATATGTCTTTGTGTAAATCATTTGTTTTGAGTTTTCAAAGAATAGCCCATTGTTCATTCTTGTGCTGTACAATGACCACTGTTATTGTTACTTT\n\n# Align assembled reads to reference and convert to BAM file\n# Here I use minimap2 for simplicity\n$ minimap2 -x splice -a ~/Documents/datasets/GRCh38/fasta/genome.fasta assem.fa 1&gt; asm_aln.sam\n[M::mm_idx_gen::50.495*1.81] collected minimizers\n[M::mm_idx_gen::71.980*2.16] sorted minimizers\n[M::main::71.980*2.16] loaded/built the index for 194 target sequence(s)\n[M::mm_mapopt_update::75.057*2.11] mid_occ = 767\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 194\n[M::mm_idx_stat::77.004*2.09] distinct minimizers: 167225302 (35.42% are singletons); average occurrences: 6.036; average spacing: 3.071; total length: 3099750718\n[M::worker_pipeline::77.010*2.09] mapped 13 sequences\n[M::main] Version: 2.21-r1071\n[M::main] CMD: minimap2 -x splice -a /home/shiquan/Documents/datasets/GRCh38/fasta/genome.fasta assem.fa\n[M::main] Real time: 77.358 sec; CPU: 161.000 sec; Peak RSS: 18.519 GB\n\n$ PISA sam2bam asm_aln.sam -o asm_aln.bam\nRaw reads,13\nMapped reads,13 (100.00%)\nPlus strand,13\nMinus strand,0\nMitochondria ratio,0.00%\n[2022-04-22 13:30:20] Real time: 0.001 sec; CPU: 0.006 sec; Peak RSS: 0.010 GB.\n\n$ samtools view asm_aln.bam|head -n 1\nZ_AAGCATCCACACAGAG_Z_CD44_1 0   chr11   35229531    60  439M    *   0   0   GAAATTAGGGCCCAATTAATAATCAGCAAGAATTTGATCGTTCCAGTTCCCACTTGGAGGCCTTTCATCCCTCGGGTGTGCTATGGATGGCTTCTAACAA\nAAACTACACATATGTATTCCTGATCGCCAACCTTTCCCCCACCAGCTAAGGACATTTCCCAGGGTTAATAGGGCCTGGTCCCTGGGAGGAAATTTGAATG\nGGTCCATTTTGCCCTTCCATAGCCTAATCCCTGGGCATTGTTTTCCACTGAGGTTGGGGGTTGGGGTGTACTAGTTACACATCTTCAACAGACCCCCTCT\nAGAAATTTTTCAGATGCTTCTGGGAGACACCCAAAGGGTGAAGCTATTTATCTGTAGTAAACTATTTATCTGTGTTTTTGAAATATTAAACCCTGGATCA\nGTCCTTTGATCAGTATAATTTTTTAAAGTTACTTTGTCA *   NM:i:1  ms:i:436    AS:i:436    nn:i:0  tp:A:P  cm:i:137    s1:i:430    s2:i:0  de:f:0.0023 rl:i:0  CB:Z:AAGCATCCACACAGAG   GN:Z:CD44"
  },
  {
    "objectID": "PISA.html#list-of-commands",
    "href": "PISA.html#list-of-commands",
    "title": "PISA User Guide",
    "section": "List of commands",
    "text": "List of commands\n\n\n\n\n\n\n\nTool\nDescription\n\n\n\n\n\nThe following tools are used to process FASTQ/FASTQ+ files.\n\n\nparse\nParse barcodes from FASTQ reads to FASTQ+.\n\n\nfsort\nSort FASTQ+ records by barcodes.\n\n\nstream\nPerform user-defined process for each read block.\n\n\naddtags\nAdd tag string to FASTQ reads.\n\n\n\nThe following tools are used to process BAM files.\n\n\nsam2bam\nParse FASTQ+ read name and convert SAM to BAM.\n\n\nrmdup\nRemove PCR duplicates per molecular.\n\n\npick\nPick alignments with tags.\n\n\nanno\nAnnotate functional regions or gene names.\n\n\ncorr\nCorrect error prone UMIs. 1 mismatch considered.\n\n\nattrcnt\nCount raw reads and tag values per cell.\n\n\nextract\nExtract tag value from BAM.\n\n\ncount\nCount feature X cell matrix from BAMs.\n\n\nbam2fq\nConvert BAM to FASTQ+ file with selected tags.\n\n\nbam2frag\nGenerate fragment file.\n\n\ndepth\nCoverage depth/UMI for target regions.\n\n\naddtags\nAdd tag string to BAM alignments.\n\n\ncallept\nCall expressed peak tags (EPTs) for RNA library.\n\n\n\nThe following tool used to process fragment file.\n\n\ncount2\nCount peak X cell matrix from fragment file.\n\n\n\nThe following tools used to process BED files.\n\n\nmergebed\nMerge BED files.\n\n\nannobed\nAnnotate BED files with genes and functional elements.\n\n\nflatten\nFlatten overlapped regions to nonoverlaps.\n\n\n\nThe following tools used to process GTF files.\n\n\ngtffmt\nFormat and reorder GTF file.\n\n\ngtf2bed\nConvert GTF to BED."
  },
  {
    "objectID": "PISA.html#commands-and-options",
    "href": "PISA.html#commands-and-options",
    "title": "PISA User Guide",
    "section": "Commands and options",
    "text": "Commands and options\n\nCommon options for all tools\n\n\n-h\n\n\nHelp information\n\n\n-o FILE\n\n\nOutput file.\n\n\n-tags tag(s)\n\n\nBarcode tags to group reads, usually be cell barcode tag.\n\n\n-umi tag\n\n\nUMI tag.\n\n\n-t/-@ number\n\n\nMultithreads to process data.\n\n\n-report FILE.csv\n\n\nSummary report in csv format.\n\n\n\n\nparse\nThe parse tool is specifically designed to convert FASTQ files into the extended FASTQ+ format. It utilizes the -rule option to define the library structure, accommodating various sequencing setups. For ease of use, this tool has included predefined common library structures in the release; these can be applied using the -x option. This tool is optimized for speed and supports the correction of barcodes that have up to one mismatch.\n# Parse cell barcode and UMI string from raw FASTQ.\n\n$ PISA parse -rule CB,R1:1-10,whitelist.txt,CB,1;R1,R1:11-60;R2,R2 -report fastq.csv lane1_1.fq.gz,lane02_1.fq.gz lane1_2.fq.gz,lane2_2.fq.gz\n\nOptions :\n -1       [fastq]   Read 1 output.\n -2       [fastq]   Read 2 output.\n -rule    [STRING]  Read structure in line. See Notice.\n -p                 Read 1 and read 2 interleaved in the input file.\n -q       [INT]     Drop reads if average sequencing quality below this value.\n -dropN             Drop reads if N base in sequence or barcode.\n -report  [csv]     Summary report.\n -t       [INT]     Threads. [4]\n -order             Keep input order.\n -x                 Predefined code for specific library.\n          * C4      Library structure for DNBelab C4 RNA kit v1.\nNotice :\n * -rule accept tag rule STRING to parse input fastq following format \"TAG,location,whitelist,corrected TAG,allow mismatch\".\n   For each tag rule, location part should be format like R[12]:start-end. Both start and end location start from 1.\n   TAG and locaion parts are mandatory, and whitelist, corrected TAG and mismatch are optional.\n   Futhermore, multiply tags seperated by ';'. In location part, R1 stands for raw read 1, R2 stands for raw read 2.\n   In tag part, R1 stands for output read 1 while R2 stands for output read 2. Here are some examples.\n\n$ PISA parse -rule 'CR,R1:1-18,barcodes.txt,CB,1;UR,R1:19-30;R1,R2:1-100' -1 read_1.fq raw_read_1.fq raw_read_2.fq\n\n# CR,R1:1-18,barcodes.txt,CB,1  - CR tag start from 1 to 18 in read 1, and barcodes.txt are barcode whitelist,\n#   each barcode per line. Cell barcode will be corrected while hamming distance &lt;= 1.\n#   Corrected cell barcode tag is CB. \n# UR,R1:19-30 - UR tag start from 19-30 in read 1.\n# R1,R2:1-100 - Sequence from 1 to 100 in read 2 output to read 1 file. \n\n$ PISA parse -rule 'CR,R1:1-10,bc1.txt,CB,1;CR,R1:11-20,bc2.txt,CB,1;R1,R2:1-100' -1 read_1.fq raw_read_1.fq raw_read_2.fq\n\n# CR,R1:1-10,bc1.txt,CB,1;CR,R1:11-20,bc2.txt,CB,1 - This cell barcode consist of two segments, first segment start\n#   from 1 to 10 in read 1, and whitelist is bc1.txt, and second segment start from 11 to 20, and whitelist is bc2.txt.\n#   These two segments will be combined after correction, because the corrected tag are the same.\nOption -report can specify a quality control report in CSV format. Here is the explanation of each term in this file.\n\n\n\n\n\n\n\n\nTerms\nDescription\n\n\n\n\nNumber of Fragments\nThe number of records in the FASTQ(s). For paired reads, each pair only count once.\n\n\nFragments pass QC\nReads or paired reads pass QC.\n\n\nFragments with Exactly Matched Barcodes\nBarcodes exactly matched with any barcode in the candidate list.\n\n\nFragments with Failed Barcodes\nNo barcode found in the candidate list with similar search.\n\n\n\n\n\n\nfsort\nThe fsort tool is engineered to order FASTQ+ records based on specified tags, which can be defined using the -tags option. This tool efficiently handles file sorting: for files smaller than 1 gigabyte, it performs the sort directly. However, for larger FASTQ files, where caching the entire file in memory is impractical, fsort employs a different strategy. It splits the large file into smaller segments, sorts each segment individually, and then merges the sorted segments. This method ensures efficient handling of large datasets while maintaining the integrity and order of the FASTQ+ records.\n# Sort reads by tags.\n\n$ PISA fsort -tags CB,UR -list cell_barcodes_top10K.txt -@ 5 -o sorted.fq.gz in.fq\n\nOptions:\n -tags    [TAGS]     Tags, such as CB,UR. Order of these tags is sensitive.\n -@       [INT]      Threads to compress file.\n -o       [fq.gz]    bgzipped output fastq file.\n -m       [mem]      Memory per thread. [1G]\n -p                  Input fastq is smart pairing.\n -T       [prefix]   Write temporary files to PREFIX.nnnn.tmp\n\n\nstream\nThe stream tool is designed as a framework to process FASTQ+ files, where each FASTQ+ block—defined by having identical tags and grouped together in the file—is handled individually. The -script option allows users to specify a custom bash script that processes each block. This user-defined script reads a ‘small’ FASTQ+ file, generating FASTQ or FASTA output that is then sent to stdout. The stream tool captures this output via a pipe and updates the tags to ensure that each block of reads retains its original tags. Finally, it consolidates all outputs into a single file. In essence, this tool efficiently divides and processes each FASTQ+ block through a user-defined method, then seamlessly merges the results.\n# Perform user-defined script for each FASTQ+ block.\n\n$ PISA stream -script run.sh reads.fq.gz\n\nOptions :\n -tags    [TAGS]     Tags to define read blocks.\n -script  [FILE]     User defined bash script, process $FQ and generate results to stdout.\n -min     [INT]      Mininal reads per block to process.  [2]\n -keep               Output unprocessed FASTQ+ records.\n -fa                 Stream FASTQ output instead of FASTQ.\n -tmpdir\n -t                  Threads.\n -o       [FILE]     Path to output file.\n -nw                 Disable warning messages.\n\nWrite a script for PISA stream\nThe PISA stream tool generates a temporary file named _block.fq for each block of reads, storing this file in a designated temporary directory. The path to this file is set in the environment variable ${FQ} for accessibility by subprocesses. Additionally, to ensure the uniqueness of each block, an alias named the ‘unique block index’ is exported to the environment as ${UBI}.\nThe following example script demonstrates how to convert FASTQ+ to FASTA and rename the sequence ID. It is crucial for users to ensure that the script’s final output (either FASTQ+ or FASTA) is directed to stdout. All other script steps should avoid producing output to stdout or stderr, except for the last step. This precaution is necessary because PISA captures the script’s output through a pipe, and any unintended characters could disrupt the data format. Scripts can be written in a bash file or specified inline within the command.\n\n$ cat run.sh\nseqtk rename ${FQ} &gt; test.fa; seqtk rename test.fa ${UBI}\n\n\n\n\naddtags\nThe addtags tool is designed to put the new tags or update tags for FASTQ+ or BAM files.\n# Just add tags to reads.\n\n$ PISA addtags -str CB:Z:CELL1,LB:Z:PoII2 -o out.bam in.bam\n$ PISA addtags -str CB:Z:CELL1,LB:Z:PoII2 -o out.fastq in.fastq\n\nOptions:\n-o    [FILE]    Output file, bam or fastq, depends on input format\n-str  [string]  TAGs.\n-@    [INT]     Threads to pack file.\n-mapq [INT]     Mapping quality score to filter mapped reads.\n\n\nsam2bam\nAfter alignment, the sequence ID from the FASTQ+ records is retained in the RNAME field of the SAM file. Given that the RNAME field is limited to 254 characters, we also restrict the sequence ID and any optional tag fields in FASTQ+ to this length to ensure compatibility. The sam2bam tool processes these details by parsing the tags from the RNAME and appending them to the end of the SAM optional fields.\n# Parse FASTQ+ read name and convert SAM to BAM.\n\n$ PISA sam2bam -report alignment.csv -@ 5 -adjust-mapq -gtf genes.gtf -o aln.bam in.sam[.gz]\n\nOptions :\n -o       [BAM]       Output file [stdout].\n -t       [INT]       Work threads.\n -mito    [string]    Mitochondria name. Used to stat ratio of mitochondria reads.\n -maln    [BAM]       Export mitochondria reads into this file instead of standard output file.\n -@       [INT]       Threads to compress bam file.\n -report  [csv]       Alignment report.\n\nNote :\n* Reads map to multiple loci usually be marked as low quality and filtered at downstream analysis.\n  But for RNAseq library, if reads map to an exonic locus but also align to 1 or more non-exonic loci,\n  the exonic locus can be prioritized as primary alignments, and mapping quality adjusts to 255. Tag\n  MM:i:1 will also be added for this record. Following options used to adjust mapping quality.\n* Input SAM need be sorted by read name, and aligner should output all hits of a read in this SAM.\n -adjust-mapq         Enable adjusts mapping quality score.\n -gtf     [GTF]       GTF annotation file. This file is required to check the exonic regions.\n -qual    [255]       Updated quality score.\nOption -t is to set the threads to parse the SAM records. The -@ option is to set the threads to compress alignments in BGZF format. The default compress level of BGZF is 6 in the htslib, but here PISA has reset this value to 2 to decrease the CPU times. It’s not a good design to have both -t and -@, but will require a lot work to redesign the multithreads strategy, I have put this work in my todo list.\nOption -report can specify a quality control report in CSV format. Here is the explanation of each term in this file.\n\n\n\n\n\n\n\n\nTerms\nDescription\n\n\n\n\nRaw reads\nRaw reads in the BAM files, secondary alignment will be skipped.\n\n\nMapped reads\nReads mapped to reference, and the ratio of raw reads.\n\n\nPlus strand\nReads mapped to forward strand of reference.\n\n\nMinus strand\nReads mapped to backward strand of reference.\n\n\nMitochondria ratio\nRatio of reads mapped to chromosome mitochondria. The default mito name is “chrM”, user should change it by -mito option if reference is different. Otherwise this value will always be 0.\n\n\n\n\n\nMapQ adjust method\nFor RNA libraries, if a read from cDNA maps to an exonic locus but also maps to one or more non-exonic regions, the exonic locus can be prioritized as primary alignments, and mapping quality adjusts to 255. In the below records below, read DP8400008965TLL1C001R0102043364 mapped to three loci, and the aligner random pick one as the primary alignment and others as secondary. Each of these alignments has low mapping quality (MAPQ == 2, is usually filtered at downstream analysis). Our adjustment method will check if only one of these alignments overlaps with exonic regions. In our example, the last alignment overlapped with gene EEF1A1, and the other two hit intergenic regions. After adjustment, the last record has been flagged as a primary hit, and the mapping quality adjusted to 255, and other alignments of the same read are updated as secondary, MAPQ adjust to 0. MM:i:1 tag also is added to the primary record after adjustment. Option -adjust-mapq is reimplemented to mirror the 10X CellRanger’s MAPQ adjustment method (https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/algorithms/overview#alignment).\n#  Output by aligner:\n \nDP8400008965TLL1C001R0102043364 0   9   133020979   2   100M    *   0   0   GTTAATGATAACAATGCATCGTAAAACCTTCAGAAGGAAAGGAGAATGTTTTGTGGACCACTTTGGTTTTCTTGTTTGCGTGTGGCAGTTTTAAGTTTTT    ...\nDP8400008965TLL1C001R0102043364 272 7   22510408    2   100M    *   0   0   AAAAACTTAAAACTGCCACACGCAAACAAGAAAACCAAAGTGGTCCACAAAACATTCTCCTTTCCTTCTGAAGGTTTTACGATGCATTGTTATCATTAAC    ...\nDP8400008965TLL1C001R0102043364 272 6   73517606    2   100M    *   0   0   AAAAACTTAAAACTGCCACACGCAAACAAGAAAACCAAAGTGGTCCACAAAACATTCTCCTTTCCTTCTGAAGGTTTTACGATGCATTGTTATCATTAAC    ...\n\n# After adjustment (Seq and Qual in secondary alignments masked as *):\n\nDP8400008965TLL1C001R0102043364 256 9   133020979   0   100M    *   0   0   *   ...\nDP8400008965TLL1C001R0102043364 272 7   22510408    0   100M    *   0   0   *   ...\nDP8400008965TLL1C001R0102043364 16  6   73517606    255 100M    *   0   0   AAAAACTTAAAACTGCCACACGCAAACAAGAAAACCAAAGTGGTCCACAAAACATTCTCCTTTCCTTCTGAAGGTTTTACGATGCATTGTTATCATTAAC    ... MM:i:1\nAn example list here to show how to enable mapq adjuestment.\nPISA sam2bam -report alignment.csv -o out.bam -adjust-mapq -gtf hg38.gtf in.sam\n\n\n\nrmdup\nTo effectively manage PCR duplication in single-cell experiments, it is essential to consider both cell and molecular barcodes. During the feature counting stage facilitated by PISA count, deduplication is efficiently handled by relying solely on unique UMIs. This reliance makes traditional PCR deduplication unnecessary for libraries that use UMIs. Nonetheless, producing a deduplicated BAM file remains beneficial for other analytical processes, such as variant calling, or simply to reduce file size.\nThe rmdup tool is specifically designed to remove duplicate reads that share identical barcodes, such as UMIs and cell barcodes. This selective deduplication approach ensures that only truly redundant data is removed, thus preserving the integrity and completeness of the dataset for comprehensive downstream analyses.\n# Deduplicate PCR reads with same barcodes.\n\n$ PISA rmdup -tags CB,UR -o rmdup.bam in.bam\n\nOptions :\n   -tags  [TAGS]       Barcode tags to group reads.\n   -@     [INT]        Threads to unpack BAM.\n   -o     [BAM]        Output bam.\n   -q     [INT]        Map Quality Score cutoff.\n   -k                  Keep duplicates, make flag instead of remove them.\n   -nw                 Disable warnings.\nIn this version, PISA rmdup only supports single-end reads. For paired-end reads, such as scATAC data, PCR deduplication can be performed by the PISA bam2frag tool.\n\n\npick\nThe PISA pick tool is designed to select alignments with predefined tags and candidate values.\n$ PISA pick -tags CB,GN -list cell_barcodes.txt in.bam\n\nOptions :\n -tags    [TAGS]       Barcode tags.\n -list    [FILE]       Barcode white list, tag values in related column will be apply.\n -o       [BAM]        Output file.\n -q       [INT]        Map Quality Score cutoff.\n -@       [INT]        Threads to unpack BAM.\nDepending on the number of tags specified by the user, the candidate list for tags can consist of either a single column or multiple columns. If multiple tags are specified but only one column is present in the list, the program will primarily compare the value of the first tag in the alignments with the list.\n\n\nanno\nConnecting alignment results with genomic features is essential in single-cell data analysis. PISA categorizes features into three main types: gene annotation, functional regions, and genetic or sequence variations. For gene annotation, the PISA anno tool efficiently organizes all exons, transcripts, and genes from a GTF database into a sorted hierarchical tree structure.\nBased on their alignment status, reads are then classified into one of nine distinct types, see illustrate below Figure 1. This detailed categorization helps in accurately assessing the transcriptional landscape and understanding the complex genomic architecture within single-cell datasets.\n\n\n\nFigure 1: Read types.\n\n\n\n# annotate strand-specific reads\n$ PISA anno -gtf genes.gtf -o anno.bam in.bam\n\n# annotate non-strand-specific reads, for Smartseq or bulk RNAseq\n$ PISA anno -is -gtf genes.gtf -o anno.bam in.bam\n\n# also label gene name for intronic reads, i.e. RNA velocity analysis\n$ PISA anno -velo -gtf genes.gtf -o anno.bam in.bam\n\n\n# annotate exon, junction, and exon skipped reads\n$ PISA anno -exon -psi -gtf genes.gtf -o anno.bam in.bam\n\n# annotate expressed peaks\n$ PISA anno -bed peak.bed -o anno.bam in.bam\n\n# annotate genetic variants (both reference allele and alternative allele) \n$ PISA anno  -vcf in.vcf.gz -ref-alt -o anno.bam in.bam\nBesides these annotation methods, PISA anno also supports a -chr-species method. This method requires a binding list for chromosome and related label relationships. The software will check the chromosome and add the related tag for each chromosome. This method, combined with PISA attrcnt can help to summarize the mixed two cell lines from different species.\n# A binding list is tab-separated two columns txt file.\n$ cat binding_list.txt\nGRCh38_chr1    Human\nGRCh38_chr21   Human\nmm10_chr21     Mouse\n\n$ PISA anno -chr-species binding.txt -btag SP -o anno_species.bam sorted.bam\nThe full options and descriptions list below.\n# Annotate SAM/BAM records with overlapped function regions. Such as gene, transcript etc.\n\n$ PISA anno -bed peak.bed -tag PK -vcf in.vcf.gz -vtag VF -vcf-ss -ref-alt -o anno.bam in.bam\n$ PISA anno -gtf genes.gtf -o anno.bam in.bam\n$ PISA anno -gtf genes.gtf -o anno.bam -sam in.sam\n\nOptions :\n -o        [BAM]       Output bam file.\n -report   [csv]       Summary report.\n -@        [INT]       Threads to compress bam file.\n -q        [0]         Map Quality Score cutoff. MapQ smaller than this value will not be annotated.\n -t        [INT]       Threads to annotate.\n -chunk    [INT]       Chunk size per thread.\n -anno-only            Export annotated reads only.\n -sam                  Input is SAM file, parse tags from read name.\n -rev                  Annotation in reverse strand; Some probe ligation library for FFPE samples create reverse fragments.\n -is                   Disable strand sensitive annotation of gene, genomic region and genetic variants.\n\nOptions for BED file :\n -bed      [BED]       Function regions. Three or four columns bed file. Col 4 could be empty or names of this region.\n -tag      [TAG]       Attribute tag name. Set with -bed. Default is PK.\n\nOptions for mixed samples.\n -chr-species  [FILE]  Chromosome name and related species binding list.\n -btag     [TAG]       Species tag name. Set with -chr-species. Default is SP.\n\nOptions for GTF file :\n -gtf      [GTF]       GTF annotation file. gene_id,transcript_id is required for each record.\n -tags     [TAGs]      Attribute names, more details see `Notice` below. [TX,GN,GX,RE,EX,JC]\n -splice               Reads covered exon-intron edge (ExonIntron type) will also be annotated with all tags.\n -intron/-velo         Reads covered intron regions will also be annotated with all tags.\n -exon                 Generate exon level and junction annotation. Put exon name (chr:start-end/[[+-]/Gene) in EX tag.\\ \n                       Also generate junction name (chr:exon1_end-exon2_start/[+-]/Gene) in JC tag.\n -flatten              Split overlapped exons into nonoverlapped bins.\n -psi                  Annotate exclude reads tag (ER) for each exon.\n\n -tss                  Annotate reads start from TSS, designed for capped library. **experiment**\n -ctag     [TAG]       Tag name for TSS annotation. Need set with -tss.\n\nOptions for VCF file :\n -vcf      [VCF/BCF]   Varaints file in vcf or bcf format. In default, only annotate alternative alleles.\n -vtag     [TAG]       Tag name for variants. Set with -vcf. Default is VR.\n -ref-alt              Annotate ref allele.\n\nNotice :\n * If input is SAM format, will try to parse the tags in the read name.\n * For GTF mode, this program will set tags in default, you could also reset them by -tags.\n   TX : Transcript id.\n   GN : Gene name.\n   GX : Gene ID.\n   RE : Region type, E (exon), N (intron), C (exon and intron), S (junction reads cover isoforms properly), V (ambiguous reads),\n        I (intergenic), A (antisense or antisense exon), B (antisense intron), X (one or more exons are excluded in transcrpit)\n * The following tags set with -exon.\n   EX : Exon name tag.\n   JC : Isoform junction name.\n   FL : Flatten exon name. Only generate it with -flatten.\n * The following tags set with -psi.\n   ER : Excluded exons.\n * PSI = EX/(EX+ER); EX is the exon tag, which indicate include reads in exon.\n\n\ncorr\nThe diversity of UMIs of each gene in one cell is used to evaluate the gene expression level, but the error of UMI comes from sequencing or PCR may introduce bias. PISA corr is designed to correct the UMI or barcode sequence based on Hamming distance. In default, two groups of UMI from the same gene of one cell with Hamming distance equal to 1, will be considered to originate from the same transcript. The group with high frequency will be selected as a real one, and another one will be corrected to the high one.\nBecause PISA corr does not require a sorted BAM, this tool will first build a correction list by caching all the raw UMIs and barcodes and then correct them in memory. After these steps, this tool will reread the file and update these records by order. This design can avoid potential bias for the same gene from different chromosomes (i.e., the HLA genes in alternative locus). However, this design also required a lot of memory for a big BAM.\nCellRanger also introduces an algorithm to correct reads with the same UMI of one cell but mapping to more than one gene (https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/algorithms/overview). PISA implements this method but does not enable it in default. The -cr option can be used by users to enable this function. The reason for not enable it by default is PISA corr not only is used to correct UMIs, but also can be used to correct any other types of barcodes. The following example shows how to use PISA corr to correct cell barcodes for reads in the same gene.\n// Reads with same gene tag (GN) and UMI (UB) will be grouped and calculate the Hamming distance between each other. \n// Only if Hamming distance == 1 will be corrected.\nPISA corr -tag CR -new-tag CB -tags-block GN,UB -o cell_barcode_corrected.bam in.bam\nFull options of PISA corr list below.\n# Correct similar barcodes (hamming distance == 1).\n\n$ PISA corr -tag UR -new-tag UB -tags-block CB,GN -@ 5 -o corr.bam in.bam\n\nOptions :\n -o        [BAM]       Output bam.\n -tag      [TAG]       Tag to correct.\n -new-tag  [TAG]       Create a new tag for corrected barcodes.\n -tags-block  [TAGS]   Tags to define read group. For example, if set to GN (gene), reads in the same gene will be grouped together.\n -cr                   Enable CellRanger like UMI correction method. See `Examples` for details.\n -e                    Maximal hamming distance to define similar barcode, default is 1.\n -@        [INT]       Thread to compress BAM file.\n\n\nExamples :\n // Two groups of reads have same cell barcode (CB) and gene (GN) but their raw UMIs (UR) differ by only one base. The UMI of less \n // supported is corrected to the UMI with higher support. UB save the checked or corrected UMI.\n$ PISA corr -tag UR -new-tag UB -tags-block CB,GN in.bam -o corr.bam \n\n // Same with above. Besides, if two or more groups of reads have same CB and UB but different GN, the GN with the most supporting reads\n // is kept for UMI counting, and the other read groups are discarded. In case of a tie for maximal read support, all read groups are\n // discarded, as the gene cannot be confidently assigned (Cell Ranger method).\n$ PISA corr -cr -tag UR -new-tag UB -tags-block CB,GN in.bam -o corr.bam \n\n\nattrcnt\nPISA attrcnt is used to summarize the meta information of the library. We start introduce this tool with few examples.\n# Count reads per cell, -cb option is required to specify cell barcode tag\n$ PISA attrcnt -cb CB in.bam\n\n// the summary information output in tsv format\nBARCODE Raw                           // the title\nAGCTATGCTTCTAGTGTAAC-1  38            // cell barcode and raw reads per cell, separated by a tab\nGCCGCTGATCGGCCTGCACA-1  12\nGTCGCGATTCTGCTCAGAAG-1  13\nGTCAGTACCATGCTCAGAAG-1  27\nCAACTCGTCGGTTGTCTGAC-1  23\n\n# Count raw reads and reads in the peaks per cell\n$ PISA attrcnt -cb CB -tags PK             // PK tag is annotated for reads in peak\n             -o summary.tsv              // Summary file\n             example/anno/demo_1.bam \n\n$ head summary.tsv \nBARCODE Raw PK\nGGCATTATCGGCTCGGTATG    2   2\nTGAGTTGTGTATACTCCTAC    2   2\nCCGCGGCACTACACACCAGA    1   1\nATTAGTGGTCTCCTGGTCGG    1   1\nTTATTGGACCACGTTGAATA    1   1\nGGAATGCCACAAGCGCCGTA    1   1\nAGTCTATCGTGGCCTGCACA    5   5\nAGGCACACCTCGCTGAATTC    3   3\nGTCAGGATCGATAACATACG    2   2\n\n# Count UMIs per cell\n$ PISA attrcnt -cb CB -tags UB      // UB is tag of corrected UMIs\n             -dedup               // -dedup option used to remove duplication of tag values, if not set, this \n                                  // command will export reads with UB tag but not the unique UMIs per cell\n             -o summary.tsv anno.bam\n\n# Count UMIs and Genes per cell\n$ PISA attrcnt -cb CB -tags UB,GN  // GN is tag for annotated gene; -tags can accept multiple tag names, and seperated by \",\"\n             -dedup -o summary.tsv anno.bam\n\n$ head summary.tsv\nBARCODE Raw UB  GN\nAGCTATGCTTCTAGTGTAAC-1  38  35  0\nGCCGCTGATCGGCCTGCACA-1  12  12  0\nGTCGCGATTCTGCTCAGAAG-1  13  11  0\nGTCAGTACCATGCTCAGAAG-1  27  26  0\nCAACTCGTCGGTTGTCTGAC-1  23  21  0\nGGTACACCACAGTAGTTACG-1  12  10  0\nGCGCGCCGAGGGACACTCTT-1  1   1   0\nCTCTAAGCATCGAGGTTAAC-1  162 138 50\nTTCGTAGCACCGATACTAGC-1  51  48  46\nFull list of options list below.\n# Count the frequency of tag values.\n\n$ PISA attrcnt -cb CB -tags UR,GN -dedup -all-tags in.bam\n\nOptions :\n -cb       [TAG]      Cell Barcode, or other tag used for grouping reads.\n -list     [FILE]     Cell barcode white list.\n -tags     [TAGS]     Tags to count.\n -dedup               Deduplicate the atrributes in each tag.\n -all-tags            Only records with all tags be count.\n -group    [TAG]      Group tag, count all tags for each group seperately.\n -o        [FILE]     Output count table.\n -q        [INT]      Map Quality to filter bam.\n -no-header           Ignore header in the output.\n -@        [INT]      Thread to unpack bam.\n -ttag     [TAG]      Region type tag. [RE]\n -ttype               Region type used to count. Set `E,S` to count exon enclosed reads. Set `N,C` to count intron overlapped reads.\n\n\nextract\nPISA extract is designed to extract the values of tags from BAM records and generate a tab-separated file.\n# Extract tag values from alignments.\n\n$ PISA extract -tags CB,UR,GN -o tags.tsv in.bam\n\nOptions :\n -tags     [TAGS]     Tags to be extracted.\n -o        [FILE]     Output file. tsv format\n -n                   Print read name.\n -q                   Map Quality Score threshold.\n -all                 Only export if all tags have value.\n\n\ncount\nThe PISA count tool is designed to generate a counts matrix for various features or tags, traditionally outputting a gene-by-cell digit matrix. Starting with version 0.4, this tool now supports the MEX format output, which is highly recommended for use in downstream analyses due to its superior performance. It’s important to note that MEX format consists of three files, so you should use the -outdir option to specify the directory where the output files will be saved.\n# Count reads or fragments matrix for single-cell datasets.\n\n$ PISA count -cb CB -anno-tag GN -umi UB -outdir exp aln.bam\n$ PISA count [options] aln1.bam,aln2.bam\n$ PISA count -cb RG -sample-list bam_files.txt -outdir exp\n$ PISA count -tags Cx,Cy -anno-tag GN -umi UB -outdir exp -velo aln.bam\n\nOptions :\n -tags/-cb [TAGs]     A cell barcode tag or two tags of spatial coordinates for spatial data.\n -anno-tag [TAG]      Annotation tag, gene or peak.\n -genome-bin [INT]    If genome bin size set, genome bin count matrix will be generated, conflict with -anno-tag and -chr.\n -is                  Ignore strand for bin counting.\n -chr                 Count chromosome expression level, conflict with -anno-tag and -genome-bin.\n -list     [FILE]     Barcode white list, used as column names at matrix. If not set, all barcodes will be count.\n -outdir   [DIR]      Output matrix in MEX format into this folder.\n -umi      [TAG]      UMI tag. Count once if more than one record has same UMI in one gene or peak.\n -one-hit             Skip if a read hits more than 1 gene or peak.\n -q        [INT]      Minimal map quality to filter. Default is 20.\n -t        [INT]      Threads.\n -ttag     [TAG]      Region type tag. [RE]\n -velo                Generate spliced and unspliced matrix files for RNA velocity analysis.\n -ttype    [TYPE]     Region type used to count. Set `E,S` to count exon enclosed reads. Set `N,C` to count intron overlapped reads.\n -sample-list [FILE]  A list of bam files. Each path per line.\n\nOptions for Stereoseq:\n -stereoseq           Stereoseq pipeline pack UMI to hex string. Need set this option to decode UMIs.\n -spatial-bin [INT]   Bin size for spatial coordiate. Can be set if -tags specify spatial coordinates.[1]\n -dup                 Do NOT skip duplicate reads.\n\nNotice :\n * Region type (RE), which label functional region reads mapped, is annotated by `PISA anno`. Optional -ttype can be set\n   to one of region types(E/S/C/N) or combination to count reads mapped to these functional regions only.\n * If you want count from more than one bam file, there are two ways to set the parameter. By seperating bam files with ',' or by\n   setting -sample-list option.\n * If -velo set, spliced and unspliced folders will be created at outdir.\n\nFor Smartseq user\nPISA count also support counting gene expression from multiple bam files.\n$ PISA count -file-barcode             // use alias name for each bam file as cell barcode. If this flag is not set -cb must be specified.\n-tags CB                   // Cell barcode\n-sample-list bam_list.txt // bam file path and alias name\n-outdir exp/ -anno-tag GN \n\n# The `-sample-list' specify multiply files, each BAM path per line.\n\n\nDescription of MEX file\nThe Market Exchange (MEX) format (https://math.nist.gov/MatrixMarket/formats.html) is designed for representing the sparse matrix. The -outdir option specifies the output directory for one MEX fold. The MEX format consists of three files, one is cell barcodes, one is feature names (genes or peak names), and the third one defines the expression or signal values.\n$ ls\nbarcodes.tsv.gz  features.tsv.gz  matrix.mtx.gz\n\n$ zcat barcodes.tsv.gz|head\nAACCTGGTGAAGTTGTCGAA\nAAGGAACTAAGCGCAGCACC\nCGATAGAATACTTCTTCGTA\nTACTATCCTCTAGCTGCTAC\nTGACCATCCTACAGTCCACC\nCAGATTCAACTACGAAGTGC\nTTCGTAGCACTCTTCATCTC\nGGCACCTTGCTTAACGTAGG\nACTTCGGATACGTATCGCCT\nGACTCGCTAGTAGTCGGAAT\n\n$ zcat features.tsv.gz|head\nRP11-34P13.7\nRP11-34P13.8\nRP11-34P13.9\nFO538757.3\nFO538757.2\nAP006222.2\nRP4-669L17.10\nRP5-857K21.4\nRP11-206L10.4\nRP11-206L10.9\n\n$ zcat matrix.mtx.gz|head\n%%MatrixMarket matrix coordinate integer general\n% Generated by PISA v0.4-alpha-72-g09c4ded\n23900   782761  11533380\n1   1   2\n1   2   2\n1   3   2\n1   4   1\n1   5   2\n1   6   1\n1   7   2\nThe MEX file can be read by R package Yano::ReadPISA.\n\n\n\nbam2fq\nPISA bam2fq is designed to convert alignment records to FATSQ+ records. Option -tags specify which tags will be kept in the FASTQ+. Full options list below.\n# Convert BAM into fastq.\n$ PISA bam2fq -tags CB,UB,GN -o out.fq aln.bam\n\nOptions :\n -tags     [TAGS]     Export tags in read name.\n -f                   Filter records if specified tags not all exist.\n -fa                  Output fasta instead of fastq.\n -o        [fastq]    Output file.\n -@        [INT]      Threads to unpack BAM.\n\n\nbam2frag\nThe fragment file is a five columns tab-separated flat file which is designed for scATAC-seq. The first column is the chromosome name, the second column is the start location of this fragment (0 based), and the third column is the end position in 1 based of this fragment. The fourth column is the cell barcode of this fragment and the last column is how many duplicates of this fragment.\nPISA bam2frag requires the input BAM file to be sorted by coordinate. This tool will check the cell barcode and the fragment position for each paired reads, duplicates in one cell will only keep one record, and the numeber of copies for this fragment will be updated in column four.\n# Convert sam record to fragment file.\n\n$ PISA bam2frag -cb CB -list cell_barcodes.txt -o out.tsv.gz in.bam\n\nOptions:\n -o       [FILE]    Output file. This file will be bgzipped and indexed.\n -cb      [TAG]     Cell barcode tag.\n -list    [FILE]    Cell barcode white list.\n -q       [20]      Mapping quality score to filter reads.\n -isize   [2000]    Skip if insert size greater than this. [2KB]\n -bed     [BED]     Only convert fragments overlapped with target regions.\n -black-region [BED] Skip convert fragments overlapped with black regions.\n -stat    [FILE]    Transposition events per cell.\n -@       [4]       Thread to unpack and pack files.[4]\n -disable-offset    Disable Tn5 offset for each fragment.\n\n\ndepth\nPISA depth generates coverage information for each position of the predefined region(s). The significant difference between PISA depth and samtools depth (http://www.htslib.org/doc/samtools-depth.html) is that PISA depth use UMI rather than reads. Besides, PISA depth is strand sensitive, and can produce results for target cells.\n# Count coverage depth or unique UMIs for genome locations.\n\nUsage : PISA depth [options] sorted.bam [region]\n\n$ PISA depth -cb CB -umi UB -tags GN -region in.bed -o depth.tsv sorted.bam\n$ PISA depth -cb CB -umi UB sorted.bam chr1:1-2:+\n\nOptions : \n -tag      [TAG]      Tag used for grouping reads.\n -list     [FILE]     Candidate list for -tag.\n -umi      [TAG]      UMI tag. If set, only count unique UMIs for each location.\n -bed      [BED]      Target BED region file. If the strand in column six set, only count reads with the same strand.\n -o        [FILE]     Output depth file. [stdout].\n -q        [INT]      Minimal map quality to filter. [20]\n -@        [INT]      Threads to unpack bam. [4]\n\nNotice :\n * Require sorted and indexed BAM as input.\n * Compare with `samtools depth', PISA depth considers UMIs and strand of reads.\n\n\ncallept\nThe term ‘EPT’ stands for Expressed Peak Tag. EPTs can be identified by PISA within aligned reads from RNA libraries. Once identified, the relationship between each EPT and its corresponding gene can be annotated and analyzed using the Yano package. This analysis helps in understanding the functional implications of EPTs in gene expression regulation.\nThe callept tool is designed to call expressed peak tags (EPTs) for indexed BAM files. The peaks are defined with UMI depth &gt;= cutoff.\n$ PISA cellept -o epts.bed sorted.bam\n$ PISA cellept -tag CB -list cells.txt -umi UB -o epts.bed sorted.bam\n\nOptions :\n -tag      [TAG]      Tag used for grouping reads.\n -list     [FILE]     Candidate list for -tag.\n -umi      [TAG]      UMI tag. If set, only count unique UMIs for each location.\n -is                  Ignore strand.\n -gap      [INT]      Maximum gap to merge nearby peaks. [50]\n -min-length  [INT]   Minimum peak length. [50]\n -cutoff   [INT]      Cutoff of depth. [10]\n -o        [FILE]     Output EPTs in bed format. [stdout].\n -q        [INT]      Minimal map quality to filter. [20]\n -t        [INT]      Threads. [4]\n\nNotice :\n * Requires sorted and indexed BAM as input.\n * Compares with `MACS2` and other peak callers, PISA callept considers UMIs and strand of reads.\n * For paired reads, strand of read 2 will be reversed to revert fragment strand.\n\n\ncount2\nPISA count generates the MEX format matrix for fragments per peak.\n# Count fragments per peak per cell matrix.\n\n$ PISA count2 -bed peaks.bed -t 10 -list barcodes.txt -outdir exp fragments.tsv.gz\n\nOptions :\n -list     [FILE]     Barcode white list, used as column names at matrix. If not set, all barcodes will be count.\n -outdir   [DIR]      Output matrix in MEX format into this fold.\n -prefix   [STR]      Prefix of output files.\n -t        [INT]      Threads.\n\n\nmergebed\nMerge overlapped regions by strand and name.\n$ PISA mergebed -o merged.bed sample1.bed sample2.bed\n$ PISA mergebed -up 500 -down 500 -o flank.bed peaks.bed\n\nOptions:\n-o    [FILE]    Output bed file.\n-s              Ignore strand.\n-up   [INT]     Enlarge regions upstream.\n-down [INT]     Enlarge regions downstream.\n-name           Merge regions by bed name.\n\nNotice :\n * This tool accepts 3 columns or 6 columns bed file(s), strand (+/-) is set in column 6.\n * By default, merging is done with respect to strandness unless -s is set.\n * -up/-down is set respect to strandness, so upstream of plus strand is downstream of minus strand.\n\n\nannobed\nAnnotate the type of region and output in a BED like file. The region type can be defined into.\n$ PISA annobed -gtf genes.gtf -o anno.bed in.bed\n\nOptions:\n-gtf    [GTF]     GTF database.\n-o      [FILE]    Output bed file.\n-report [FILE]    Summary report. Export in STDERR by default.\n-is               Ignore strand.\n-gene-name        Set annatated gene as bed name (column 4).\n-skip-chrs        Skip chromosomes if not exist in GTF. Defa\n-up  [1000]         Annotate intergenic regions at upstream of gene.\n-down  [1000]       Annotate intergenic regions at downstream of gene.\n\nOutput format :\nchromosome,start(0based),end(1based),name,score,strand,number of covered genes, cover gene name(s),type,nearest gene name,distance to nearby gene\n\nNotice :\n * This tool accepts 3 columns or 6 columns bed file(s), strand (+/-) is set in column 6.\n * By default, annotation is done with respect to strandness unless -s is set.\n\n\nflatten\nConvert overlapped into flatten records. If strand exist, the flatten records will be strand sensitive.\n$ PISA flatten -o flatten.bed overlapped.bed\n\nOptions:\n-o    [FILE]    Output bed file.\n\nFor example:\nreg1 ===========\nreg2       ===========\nflattening of regions:\nreg1 ======\nreg2       =====\nreg3            ======\n\n\ngtffmt\nFormat and reorder GTF records.\n$ PISA gtffmt in.gtf\n\nOptions:\n -o      [FILE]    Output GTF file\n -f                Only export gene, transcript, exon and CDS records.\n -key    [all]     Export selected keys in optional fields.\n -report [stderr]  Summary report file.\n\n\ngtf2bed\nConvert GTF file to BED format.\n$ PISA gtf2bed -o merged.bed in.gtf.gz\n\nOptions:\n  -o    [FILE]                          Output bed file.\n  -type [gene|transcript|exon]          Covert to bed.\n  -name [none|gene|transcript|exon]     Set name for bed."
  },
  {
    "objectID": "PISA.html#deprecated-commands",
    "href": "PISA.html#deprecated-commands",
    "title": "PISA User Guide",
    "section": "Deprecated commands",
    "text": "Deprecated commands\n\nparse0\nSince v1.0, the old parse tool has been replaced by parse2, and renamed to parse0 for backup purposes. Due to its lower performance compared to parse, parse0 will be deleted from v2 onwards. The parse0 tool requires a configuration file to describe the library structure, including cell barcode locations, UMI locations, and tag names. Additionally, it generates various quality control reports and outputs cell barcode distributions to stdout. Below is the complete options list and a general workflow for filtering and counting reads.\n$ PISA parse -config read_struct.json -report fastq.csv -cbdis cell_dist.tsv \\\n          -1 out.fq lane1_1.fq.gz,lane02_1.fq.gz  lane1_2.fq.gz,lane2_2.fq.gz\n\nOptions :\n -1       [fastq]   Read 1 output. Default is stdout.\n -2       [fastq]   Read 2 output.\n -config  [json]    Read structure configure file in JSON format. Required.\n -run     [string]  Run code, used for different library.\n -cbdis   [FILE]    Read count per cell barcode.\n -p                 Read 1 and read 2 interleaved in the input file.\n -q       [INT]     Drop reads if average sequencing quality below this value.\n -dropN             Drop reads if N base in sequence or barcode.\n -report  [csv]     Summary report.\n -t       [INT]     Threads. [4]\n-config requires a JSON file to tell software the locations of cell barcodes and/or UMIs. An example configured file can be found at demo/demo.json.\n\n{\n    \"cell barcode tag\":\"CB\",  \n    \"cell barcode\":[\n        {\n            \"location\":\"R1:1-16\" # the location is 1 based\n        }\n    ],\n    \"UMI tag\":\"UR\",\n    \"UMI\":{\n        \"location\":\"R1:17-28\",\n    },\n    \"read 1\":{\n        \"location\":\"R2:1-91\",\n    }\n}\n\nOption -report can specify a quality control report in CSV format. Here is the explanation of each term in this file.\n\n\n\n\n\n\n\n\nTerms\nDescription\n\n\n\n\nNumber of Fragments\nThe number of records in the FASTQ(s). For paired reads, each pair only count once.\n\n\nFragments pass QC\nReads or paired reads pass QC.\n\n\nFragments with Exactly Matched Barcodes\nCell barcode exactly matched with any barcode in the candidate list.\n\n\nFragments with Failed Barcodes\nNo cell barcode found in the candidate list with similar search.\n\n\nFragments Filtered on Low Quality\nMean sequence quality of the records smaller than threshold.\n\n\nFragments Filtered on Unknown Sample Barcodes\nSample barcodes not matched with any barcode in the candidate list.\n\n\nQ30 bases in Cell Barcode\nRatio of bases in cell barcode sequence with quality \\(&gt;=\\) 30.\n\n\nQ30 bases in Sample Barcode\nRatio of bases in sample barcode sequence with quality \\(&gt;=\\) 30.\n\n\nQ30 bases in UMI\nRatio of bases in UMI sequence with quality \\(&gt;=\\) 30.\n\n\nQ30 bases in Reads\nRatio of bases in read sequence with quality \\(&gt;=\\) 30.\n\n\n\n\nHere is an example to parse barcodes and reads with a predefined configure JSON file, the test files can be found at demo directory.\n$ PISA parse0 -config demo/demo.json -report demo/parse.csv demo/demo_1.fq.gz demo/demo_2.fq.gz &gt; demo/demo.fq"
  },
  {
    "objectID": "PISA.html#difference-in-alignment-annotation-between-pisa-and-cellranger",
    "href": "PISA.html#difference-in-alignment-annotation-between-pisa-and-cellranger",
    "title": "PISA User Guide",
    "section": "Difference in alignment annotation between PISA and CellRanger",
    "text": "Difference in alignment annotation between PISA and CellRanger\nIn most cases, PISA annotation produces results similar to CellRanger, but there are two key differences. In CellRanger, exonic reads are defined as those that overlap with an exon by at least 50% of the read length. In PISA, however, reads overlapping with an exon are classified into three distinct categories. Exonic reads are fully enclosed within an exon (E). If a read partially overlaps both an exon and an intron, it is classified as exonintron (C). Junction reads spanning more than one exon are classified as spliced reads (S). By default, only exonic (E) and spliced reads (S) are counted towards gene expression, but exonintronic (C) are skipped unless option -splice or -intron is set. Therefore, PISA anno is more stringent than CellRanger in gene annotation. However, for third-generation sequencing reads, small indels may be introduced during sequencing, causing imperfect alignment at splice sites or gene ends. In these cases, the -vague-edge option can be used to account for such mapping variances.\nThe second difference relates to UMI handling. In CellRanger, if a UMI maps to more than one gene, it is discarded. In contrast, PISA annotates all genes if the read is fully enclosed within the exons of these genes, and the UMI is counted for all of them. However, this type of reads can be skipped in PISA if the -one-hit option is set during the PISA count process.\nFor more information on CellRanger’s counting strategy, you can refer to the official documentation: Cell Ranger Algorithm Overview."
  },
  {
    "objectID": "PISA.html#changelog",
    "href": "PISA.html#changelog",
    "title": "PISA User Guide",
    "section": "Changelog",
    "text": "Changelog\n\n\nv1.6 2025/05/29\n\n\nFix a bug if gene_name or gene_id is empty in GTF, annotation may case segmental fault.\nPISA bin method is introduced.\n\n\n\n\nv1.5 2025/03/17\n\nCheck and label EXACT_MATCH for all cell barcode segments. Previous only check the first segment. Thanks to @lishuangshuang0616 report this bug.\n\n\n\nv1.4 2025/03/15\n\n\nUpdate -anno-tags instead of -anno-tag to allow specify more than one tag. Only count tag 1 if other tags exist in the alignment.\n\n\n\n\nv1.3 2024/10/10\n\n\nRemove -vcf-ss option for PISA anno. Enable strand sensitive mode in default for genetic variant annotation.\n\n\n\n\nv1.2 2024/9/7\n\n\nFix a bug of PISA corr. This bug was caused by the recent update to dict.c. ThePISA corr function was not updated accordingly. This issue will not influence the result.\n\n\n\n\nv1.1 2024/6/11\n\n\n-psi and -flatten added for PISA anno;\nAdd new tools gtf2bed and flatten.\n\n\n\n\nv1.0 2023/12/2\n\n\nEPT calling method added.\nmergebed and annobed for BED file added.\nNew parameters added to anno.\n\n\n\n\nv1.0a 2023/10/20\n\n\nMajor update.\nNew callept method introduced. Check EPT paper for details.\nNew mergebed and annobed methods added.\nNew -vcf-ss and -alt-ref now added to PISA anno\nPISA count can count bin and chromosome expression.\n\n\n\n\nv0.12 2022/06/18\n\n\nFix the number of records in MEX file.\n\n\n\n\nv0.12b 2022/04/26\n\n\nBugs fixed.\nChange compress level of BGZF from 6 to 2, speed up few tools.\nNow accept unorder GTFs\nNew tool gtfmt introduced to format a GTF file.\nAdd manual and FASTQ+ specification.\n\n\n\n\nv0.12a 2022/03/31\n\n\nAdd parse2.\n\n\n\n\nv0.11a 2022/03/13\n\n\nAdd counts2, count peaks X cells matrix from the fragment file.\n\n\n\n\nv0.10 2022/01/06\n\n\nUpdate bam2frag, export a fragment file compatible with 10X cellranger-ATAC.\n\n\n\n\nv0.10b 2021/12/09\n\n\nPISA count now has -velo option to export unspliced and spliced matrix together. For velocity analysis, remember to use -intron to annotate reads.\nPISA parse support multi-threads.\n\n\n\n\nv0.10a 2021/11/06\n\n\nPISA count support count spliced and unspliced reads.\nPISA count support count from multiple bam files.\n\n\n\n\nv0.9 2021/10/14\n\n\nRewrite rmdup. Not support paired reads for now.\n\n\n\n\nv0.8 2021/07/20\n\n\nReduce memory usage of count\nFix region query bug of anno -bed\nAdd anno -vcf method\n\n\n\n\nv0.7 2020/11/20\n\n\nIntroduce the PCR deduplicate method rmdup.\nMask read and qual field as * instead of sequence for secondary alignments in the BAM file.\n\n\n\n\nv0.6 2020/10/29\n\n\nPISA attrcnt, Skip secondary alignments before counting reads\nPISA anno fix segments fault bugs when loading malformed GTF\n\n\n\n\nv0.5 2020/08/27\n\n\nAdd PISA bam2frag function (experimental).\nPISA anno Skip secondary alignments when counting total reads.\n\n\n\n\nv0.4 2020/07/14\n\n\nPISA sam2bam add mapping quality adjustment method;\nRewrite UMI correction index structure to reduce memory use;\nFix bugs.\n\n\n\n\nv0.4alpha 2020/05/2\n\n\nPISA anno use UCSC bin scheme instead of linear search for reads query gene regions. Fix the bug of misannotated antisense reads.\nPISA count use MEX output instead of plain cell vs gene table.\n\n\n\n\nv0.3 2020/03/26\n\nFix bugs and improve preformance.\n\n\n\n0.0.0.9999 2019/05/19\n\nInit version."
  },
  {
    "objectID": "PISA.html#todo-list",
    "href": "PISA.html#todo-list",
    "title": "PISA User Guide",
    "section": "TODO list",
    "text": "TODO list\n\nImprove multi-threads performance.\nSupport Stereo-seq and Visium \nSpeed up PISA count and PISA corr.\nImplement parse strategy for cell hash and CITEseq (frozen).\nAssemble reads original from one molecule;\nImplement new designed and more user-friendly parse;\nSupport loom output (frozen);\nExport unspliced matrix for velocity;\nUpgrade PISA parse for faster process fastqs."
  },
  {
    "objectID": "PISA.html#reporting-issues",
    "href": "PISA.html#reporting-issues",
    "title": "PISA User Guide",
    "section": "Reporting Issues",
    "text": "Reporting Issues\nIf you have any suggestion or report issues, please using Github issues page https://github.com/shiquan/PISA/issues."
  },
  {
    "objectID": "PISA.html#citation",
    "href": "PISA.html#citation",
    "title": "PISA User Guide",
    "section": "Citation",
    "text": "Citation\nShi Q, Liu S, Kristiansen K, Liu L. The FASTQ+ format and PISA. Bioinformatics. 2022 Sep 30;38(19):4639-4642. doi: 10.1093/bioinformatics/btac562. PMID: 35993907."
  }
]