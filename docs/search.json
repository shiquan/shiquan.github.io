[
  {
    "objectID": "Yano/RunAutoCorr.html",
    "href": "Yano/RunAutoCorr.html",
    "title": "RunAutoCorr",
    "section": "",
    "text": "Source code\n\n\nCalculate spatial autocorrelation (Moran’s I) for features in parallel.\n\n\n\nRunAutoCorr(\n  object = NULL,\n  assay = NULL,\n  layer = \"data\",\n  reduction = \"pca\",\n  dims = 1:20,\n  k.param = 20,\n  prune.SNN = 1/50,\n  nn.method = \"annoy\",\n  n.trees = 50,\n  annoy.metric = \"euclidean\",\n  nn.eps = 0,\n  l2.norm = FALSE,\n  cells = NULL,\n  min.cells = 10,\n  snn.name = NULL,\n  spatial = FALSE,\n  order.cells = NULL,\n  weight.method = c(\"dist\", \"average\"),\n  prune.distance = -1,\n  features = NULL,\n  wm.name = NULL,\n  prefix = \"moransi\",\n  threads = 0,\n  verbose = TRUE,\n  ...\n)\n\n\n\n\n\n\n\nobject\n\n\nSeurat object\n\n\n\n\nassay\n\n\nWorking assay\n\n\n\n\nlayer\n\n\nInput data layer, usually be ‘data’.\n\n\n\n\nreduction\n\n\nCell space used to calculate SNN graph, default is ‘pca’.\n\n\n\n\ndims\n\n\nDimensions of reduction used to calculate SNN graph.\n\n\n\n\nk.param\n\n\nDefines k for K-nearest neighbor algorithm\n\n\n\n\nprune.SNN\n\n\nThis parameter sets the cutoff for the acceptable Jaccard index when computing neighborhood overlap during SNN (Shared Nearest Neighbor) construction. It is passed to Seurat::FindNeighbors. Any edges with Jaccard index values less than or equal to this cutoff will be set to 0 and removed from the SNN graph, effectively controlling the stringency of pruning (with 0 meaning no pruning and 1 meaning everything is pruned). The default value is 1/50, which differs from Seurat’s default setting. This is because Seurat’s default is OK for cell clustering but may cause the loss of many sparse features in large cell populations during spatial dissimilarity test. Setting the cutoff to a smaller value can capture more features, but it will also increase computational time.\n\n\n\n\nnn.method\n\n\nnn.method passed to Seurat::FindNeighbors, default is “euclidean”.\n\n\n\n\nn.trees\n\n\nn.trees passed to Seurat::FindNeighbors, default is 50.\n\n\n\n\nannoy.metric\n\n\nannoy.metric passed to Seurat::FindNeighbors, default is “annoy”.\n\n\n\n\nnn.eps\n\n\nnn.eps passed to Seurat::FindNeighbors, default is 0\n\n\n\n\nl2.norm\n\n\nL2 normalization. Default is FALSE.\n\n\n\n\ncells\n\n\nCells used for calculate weight matrix. Used with snn graph. In default will use all cells.\n\n\n\n\nmin.cells\n\n\nIf a feature can be detect in few than min.cells, will skip to save time. Default is 10.\n\n\n\n\nsnn.name\n\n\nname of SNN space. If spatial=FALSE and order.cells = NULL, default snn.name will set to ‘RNA_snn’. Use SNN space to calculate the cell-cell weight martix.\n\n\n\n\nspatial\n\n\nUse spatial coordinate instead of SNN space and linear trajectory to calculate the cell-cell weight matrix.\n\n\n\n\norder.cells\n\n\nFor linear trajetory, input ordered cell names to calculate the cell-cell distance weight matrix. Conflict with sptaial=TRUE and snn.name != NULL.\n\n\n\n\nweight.method\n\n\nWeight method for distance, default 1/dist^2. Also support average, use mean weight value for nearby cells.\n\n\n\n\nprune.distance\n\n\nSet the cutoff for neighbors for order cells and spatial coordinates. In default, 50 for order cells, 8 for spatial coordinates.\n\n\n\n\nfeatures\n\n\nList of features to test. Default is all features with that coverage &gt;= min.cells.\n\n\n\n\nwm.name\n\n\nWeight matrix/graph name in Seurat object. After this function, the graph can be visited by obj[[wm.name]]. Default name is “RNA_wm”, if you change the default name, you should specific the new name in RunBlockCorr.\n\n\n\n\nprefix\n\n\nPrefix for score and p value names. Default prefix is “moransi”. If you change the default name, you should specific the new name in SetAutoCorrFeatures.\n\n\n\n\nthreads\n\n\nThreads.\n\n\n\n\nverbose\n\n\nPrint log message. Default is TRUE.\n\n\n\n\n…\n\n\nparameters pass to GetWeightFromSpatial, so it only works if spatial is TRUE."
  },
  {
    "objectID": "Yano/RunAutoCorr.html#description",
    "href": "Yano/RunAutoCorr.html#description",
    "title": "RunAutoCorr",
    "section": "",
    "text": "Calculate spatial autocorrelation (Moran’s I) for features in parallel."
  },
  {
    "objectID": "Yano/RunAutoCorr.html#usage",
    "href": "Yano/RunAutoCorr.html#usage",
    "title": "RunAutoCorr",
    "section": "",
    "text": "RunAutoCorr(\n  object = NULL,\n  assay = NULL,\n  layer = \"data\",\n  reduction = \"pca\",\n  dims = 1:20,\n  k.param = 20,\n  prune.SNN = 1/50,\n  nn.method = \"annoy\",\n  n.trees = 50,\n  annoy.metric = \"euclidean\",\n  nn.eps = 0,\n  l2.norm = FALSE,\n  cells = NULL,\n  min.cells = 10,\n  snn.name = NULL,\n  spatial = FALSE,\n  order.cells = NULL,\n  weight.method = c(\"dist\", \"average\"),\n  prune.distance = -1,\n  features = NULL,\n  wm.name = NULL,\n  prefix = \"moransi\",\n  threads = 0,\n  verbose = TRUE,\n  ...\n)"
  },
  {
    "objectID": "Yano/RunAutoCorr.html#arguments",
    "href": "Yano/RunAutoCorr.html#arguments",
    "title": "RunAutoCorr",
    "section": "",
    "text": "object\n\n\nSeurat object\n\n\n\n\nassay\n\n\nWorking assay\n\n\n\n\nlayer\n\n\nInput data layer, usually be ‘data’.\n\n\n\n\nreduction\n\n\nCell space used to calculate SNN graph, default is ‘pca’.\n\n\n\n\ndims\n\n\nDimensions of reduction used to calculate SNN graph.\n\n\n\n\nk.param\n\n\nDefines k for K-nearest neighbor algorithm\n\n\n\n\nprune.SNN\n\n\nThis parameter sets the cutoff for the acceptable Jaccard index when computing neighborhood overlap during SNN (Shared Nearest Neighbor) construction. It is passed to Seurat::FindNeighbors. Any edges with Jaccard index values less than or equal to this cutoff will be set to 0 and removed from the SNN graph, effectively controlling the stringency of pruning (with 0 meaning no pruning and 1 meaning everything is pruned). The default value is 1/50, which differs from Seurat’s default setting. This is because Seurat’s default is OK for cell clustering but may cause the loss of many sparse features in large cell populations during spatial dissimilarity test. Setting the cutoff to a smaller value can capture more features, but it will also increase computational time.\n\n\n\n\nnn.method\n\n\nnn.method passed to Seurat::FindNeighbors, default is “euclidean”.\n\n\n\n\nn.trees\n\n\nn.trees passed to Seurat::FindNeighbors, default is 50.\n\n\n\n\nannoy.metric\n\n\nannoy.metric passed to Seurat::FindNeighbors, default is “annoy”.\n\n\n\n\nnn.eps\n\n\nnn.eps passed to Seurat::FindNeighbors, default is 0\n\n\n\n\nl2.norm\n\n\nL2 normalization. Default is FALSE.\n\n\n\n\ncells\n\n\nCells used for calculate weight matrix. Used with snn graph. In default will use all cells.\n\n\n\n\nmin.cells\n\n\nIf a feature can be detect in few than min.cells, will skip to save time. Default is 10.\n\n\n\n\nsnn.name\n\n\nname of SNN space. If spatial=FALSE and order.cells = NULL, default snn.name will set to ‘RNA_snn’. Use SNN space to calculate the cell-cell weight martix.\n\n\n\n\nspatial\n\n\nUse spatial coordinate instead of SNN space and linear trajectory to calculate the cell-cell weight matrix.\n\n\n\n\norder.cells\n\n\nFor linear trajetory, input ordered cell names to calculate the cell-cell distance weight matrix. Conflict with sptaial=TRUE and snn.name != NULL.\n\n\n\n\nweight.method\n\n\nWeight method for distance, default 1/dist^2. Also support average, use mean weight value for nearby cells.\n\n\n\n\nprune.distance\n\n\nSet the cutoff for neighbors for order cells and spatial coordinates. In default, 50 for order cells, 8 for spatial coordinates.\n\n\n\n\nfeatures\n\n\nList of features to test. Default is all features with that coverage &gt;= min.cells.\n\n\n\n\nwm.name\n\n\nWeight matrix/graph name in Seurat object. After this function, the graph can be visited by obj[[wm.name]]. Default name is “RNA_wm”, if you change the default name, you should specific the new name in RunBlockCorr.\n\n\n\n\nprefix\n\n\nPrefix for score and p value names. Default prefix is “moransi”. If you change the default name, you should specific the new name in SetAutoCorrFeatures.\n\n\n\n\nthreads\n\n\nThreads.\n\n\n\n\nverbose\n\n\nPrint log message. Default is TRUE.\n\n\n\n\n…\n\n\nparameters pass to GetWeightFromSpatial, so it only works if spatial is TRUE."
  },
  {
    "objectID": "Yano/PSIPlot.html",
    "href": "Yano/PSIPlot.html",
    "title": "PSIPlot",
    "section": "",
    "text": "Source code\n\n\nPlot PSI score on reduction map.\n\n\n\nPSIPlot(\n  object = NULL,\n  exon.assay = NULL,\n  exclude.assay = \"exclude\",\n  features = NULL,\n  dims = c(1, 2),\n  cells = NULL,\n  cols = c(\"lightgrey\", \"red\"),\n  pt.size = NULL,\n  alpha = 1,\n  order = TRUE,\n  reduction = NULL,\n  shape.by = NULL,\n  ncol = NULL,\n  split.by = NULL,\n  by.col = TRUE,\n  coord.fixed = FALSE,\n  combine = TRUE,\n  raster = NULL,\n  raster.dpi = c(512, 512)\n)\n\n\n\n\n\n\n\nobject\n\n\nSeurat object.\n\n\n\n\nexon.assay\n\n\nExon assay name.\n\n\n\n\nexclude.assay\n\n\nExcluded exon assay name.\n\n\n\n\nfeatures\n\n\nFeatures to plot.\n\n\n\n\ndims\n\n\nDimensions to plot, must be a two-length numeric vector specifying x- and y-dimensions\n\n\n\n\ncells\n\n\nVector of cells to plot (default is all cells)\n\n\n\n\ncols\n\n\nVector of colors, each color corresponds to an identity class. This may also be a single character or numeric value corresponding to a palette as specified by RColorBrewer::brewer.pal.info.\n\n\n\n\npt.size\n\n\nAdjust point size for plotting\n\n\n\n\nalpha\n\n\nAlpha value for points\n\n\n\n\norder\n\n\nBoolean determing whether to plot cells in order of PSI score.\n\n\n\n\nreduction\n\n\nWhich dimensionality reduction to use. If not specified, first searches for umap, then tsne, then pca\n\n\n\n\nshape.by\n\n\nIf NULL, all points are circles (default). You can specify any cell attribute (that can be pulled with FetchData) allowing for both different colors and different shapes on cells. Only applicable if raster = FALSE.\n\n\n\n\nncol\n\n\nNumber of columns to combine multiple features plots to\n\n\n\n\nsplit.by\n\n\nA factor in object metadata to split the plot by, pass ‘ident’ to split by cell identity\n\n\n\n\nby.col\n\n\nIf splitting by a factor, plot the splits per column with the features as rows\n\n\n\n\ncoord.fixed\n\n\nPlot cartesian coordinates with fixed aspect ratio\n\n\n\n\ncombine\n\n\nCombine plots into a single patchwork ggplot object. If FALSE, return a list of ggplot objects.\n\n\n\n\nraster.dpi\n\n\nPixel resolution for rasterized plots, passed to geom_scattermore(). Default is c(512, 512).\n\n\n\n\nmin.cutoff, max.cutoff\n\n\nVector of minimum and maximum cutoff values for each feature\n\n\n\n\nmode\n\n\nTest mode. For mode 1, X (test feature) vs Y (binding feature). For mode 2, X vs (Y-X). For mode 3, X vs (Y+X). Please note, when set to mode 2 or 3, will use raw counts to update expression value of binding features. Then normalise the counts before testing. For mode 1, will use Layer ‘data’. Default is mode 1.\n\n\n\n\ngroup.by\n\n\nName of one or more metadata columns to group (color) cells by (for example, orig.ident); pass ‘ident’ to group by identity class\n\n\n\n\n\n\nA patchwork ggplot object of combine = TRUE; otherwise, a list of ggplot objects"
  },
  {
    "objectID": "Yano/PSIPlot.html#description",
    "href": "Yano/PSIPlot.html#description",
    "title": "PSIPlot",
    "section": "",
    "text": "Plot PSI score on reduction map."
  },
  {
    "objectID": "Yano/PSIPlot.html#usage",
    "href": "Yano/PSIPlot.html#usage",
    "title": "PSIPlot",
    "section": "",
    "text": "PSIPlot(\n  object = NULL,\n  exon.assay = NULL,\n  exclude.assay = \"exclude\",\n  features = NULL,\n  dims = c(1, 2),\n  cells = NULL,\n  cols = c(\"lightgrey\", \"red\"),\n  pt.size = NULL,\n  alpha = 1,\n  order = TRUE,\n  reduction = NULL,\n  shape.by = NULL,\n  ncol = NULL,\n  split.by = NULL,\n  by.col = TRUE,\n  coord.fixed = FALSE,\n  combine = TRUE,\n  raster = NULL,\n  raster.dpi = c(512, 512)\n)"
  },
  {
    "objectID": "Yano/PSIPlot.html#arguments",
    "href": "Yano/PSIPlot.html#arguments",
    "title": "PSIPlot",
    "section": "",
    "text": "object\n\n\nSeurat object.\n\n\n\n\nexon.assay\n\n\nExon assay name.\n\n\n\n\nexclude.assay\n\n\nExcluded exon assay name.\n\n\n\n\nfeatures\n\n\nFeatures to plot.\n\n\n\n\ndims\n\n\nDimensions to plot, must be a two-length numeric vector specifying x- and y-dimensions\n\n\n\n\ncells\n\n\nVector of cells to plot (default is all cells)\n\n\n\n\ncols\n\n\nVector of colors, each color corresponds to an identity class. This may also be a single character or numeric value corresponding to a palette as specified by RColorBrewer::brewer.pal.info.\n\n\n\n\npt.size\n\n\nAdjust point size for plotting\n\n\n\n\nalpha\n\n\nAlpha value for points\n\n\n\n\norder\n\n\nBoolean determing whether to plot cells in order of PSI score.\n\n\n\n\nreduction\n\n\nWhich dimensionality reduction to use. If not specified, first searches for umap, then tsne, then pca\n\n\n\n\nshape.by\n\n\nIf NULL, all points are circles (default). You can specify any cell attribute (that can be pulled with FetchData) allowing for both different colors and different shapes on cells. Only applicable if raster = FALSE.\n\n\n\n\nncol\n\n\nNumber of columns to combine multiple features plots to\n\n\n\n\nsplit.by\n\n\nA factor in object metadata to split the plot by, pass ‘ident’ to split by cell identity\n\n\n\n\nby.col\n\n\nIf splitting by a factor, plot the splits per column with the features as rows\n\n\n\n\ncoord.fixed\n\n\nPlot cartesian coordinates with fixed aspect ratio\n\n\n\n\ncombine\n\n\nCombine plots into a single patchwork ggplot object. If FALSE, return a list of ggplot objects.\n\n\n\n\nraster.dpi\n\n\nPixel resolution for rasterized plots, passed to geom_scattermore(). Default is c(512, 512).\n\n\n\n\nmin.cutoff, max.cutoff\n\n\nVector of minimum and maximum cutoff values for each feature\n\n\n\n\nmode\n\n\nTest mode. For mode 1, X (test feature) vs Y (binding feature). For mode 2, X vs (Y-X). For mode 3, X vs (Y+X). Please note, when set to mode 2 or 3, will use raw counts to update expression value of binding features. Then normalise the counts before testing. For mode 1, will use Layer ‘data’. Default is mode 1.\n\n\n\n\ngroup.by\n\n\nName of one or more metadata columns to group (color) cells by (for example, orig.ident); pass ‘ident’ to group by identity class"
  },
  {
    "objectID": "Yano/PSIPlot.html#value",
    "href": "Yano/PSIPlot.html#value",
    "title": "PSIPlot",
    "section": "",
    "text": "A patchwork ggplot object of combine = TRUE; otherwise, a list of ggplot objects"
  },
  {
    "objectID": "Yano/FindAllAltExp.html",
    "href": "Yano/FindAllAltExp.html",
    "title": "Test alternative expression for all cell groups",
    "section": "",
    "text": "Source code\n\n\nTest alternative expression for all cell groups\n\n\n\nFindAllAltExp(\n  object = NULL,\n  assay = NULL,\n  features = NULL,\n  bind.name = \"gene_name\",\n  bind.assay = NULL,\n  bind.features = NULL,\n  node = NULL,\n  min.cells = 10,\n  return.thresh = NULL,\n  mode = c(1, 2, 3),\n  test.use = c(\"DEXSeq\", \"PermTest\"),\n  threads = 0,\n  perm = 100,\n  seed = 999,\n  pseudo.group = 3,\n  debug = FALSE\n)\n\n\n\n\n\n\n\nobject\n\n\nA Seurat object.\n\n\n\n\nassay\n\n\nTest assay (X). Default assay will be used if not set.\n\n\n\n\nfeatures\n\n\nCandidate list to test. If not set, will use AutoCorrFeatures(object, assay = assay).\n\n\n\n\nbind.name\n\n\nTitle name for binding features in the meta table. Consider most users start Yano to perform alternative splicing analysis, the default bind.name set to “gene_name”.\n\n\n\n\nbind.assay\n\n\nBind assay (Y). If not set, will aggregate all X values of the same block.\n\n\n\n\nbind.features\n\n\nCandidate list for bind features to test. If not set, will test all covered.\n\n\n\n\nnode\n\n\nA node to find markers for and all its children; requires BuildClusterTree to have been run previously. Only can be used if test all groups.\n\n\n\n\nmin.cells\n\n\nUsed to filter candiate features or binding features. Require them at least expressed in min.cells. Default is 10.\n\n\n\n\nreturn.thresh\n\n\nOnly return markers that have a p-value &lt; return.thresh. Default is NULL.\n\n\n\n\nmode\n\n\nTest mode. For mode 1, X (test feature) vs Y (binding feature). For mode 2, X vs (Y-X). For mode 3, X vs (Y+X).\n\n\n\n\nthreads\n\n\nThreads. For DEXSeq, threads will set to 1. For other methods, threads set to 0, which will auto check the CPU cores and set threads = number of CPU cores -1.\n\n\n\n\nperm\n\n\nPermutation steps for calculate statistical of delta-ratio. Default is 100.\n\n\n\n\nseed\n\n\nSeed for generate random number. Default is 999.\n\n\n\n\ndebug\n\n\nPrint debug logs. Will auto set thread to 1. Default is FALSE.\n\n\n\n\n\n\nData frame containing p values.\n\n\n\nlibrary(\"Yano\")\n\ndata(\"glbt_small\")\nDefaultAssay(glbt_small) &lt;- \"exon\"\nalt.exon &lt;- FindAllAltExp(object = glbt_small, bind.assay = \"RNA\", bind.name = \"gene_name\", features = rownames(glbt_small))\nhead(alt.exon)\ndata frame with 0 columns and 0 rows"
  },
  {
    "objectID": "Yano/FindAllAltExp.html#description",
    "href": "Yano/FindAllAltExp.html#description",
    "title": "Test alternative expression for all cell groups",
    "section": "",
    "text": "Test alternative expression for all cell groups"
  },
  {
    "objectID": "Yano/FindAllAltExp.html#usage",
    "href": "Yano/FindAllAltExp.html#usage",
    "title": "Test alternative expression for all cell groups",
    "section": "",
    "text": "FindAllAltExp(\n  object = NULL,\n  assay = NULL,\n  features = NULL,\n  bind.name = \"gene_name\",\n  bind.assay = NULL,\n  bind.features = NULL,\n  node = NULL,\n  min.cells = 10,\n  return.thresh = NULL,\n  mode = c(1, 2, 3),\n  test.use = c(\"DEXSeq\", \"PermTest\"),\n  threads = 0,\n  perm = 100,\n  seed = 999,\n  pseudo.group = 3,\n  debug = FALSE\n)"
  },
  {
    "objectID": "Yano/FindAllAltExp.html#arguments",
    "href": "Yano/FindAllAltExp.html#arguments",
    "title": "Test alternative expression for all cell groups",
    "section": "",
    "text": "object\n\n\nA Seurat object.\n\n\n\n\nassay\n\n\nTest assay (X). Default assay will be used if not set.\n\n\n\n\nfeatures\n\n\nCandidate list to test. If not set, will use AutoCorrFeatures(object, assay = assay).\n\n\n\n\nbind.name\n\n\nTitle name for binding features in the meta table. Consider most users start Yano to perform alternative splicing analysis, the default bind.name set to “gene_name”.\n\n\n\n\nbind.assay\n\n\nBind assay (Y). If not set, will aggregate all X values of the same block.\n\n\n\n\nbind.features\n\n\nCandidate list for bind features to test. If not set, will test all covered.\n\n\n\n\nnode\n\n\nA node to find markers for and all its children; requires BuildClusterTree to have been run previously. Only can be used if test all groups.\n\n\n\n\nmin.cells\n\n\nUsed to filter candiate features or binding features. Require them at least expressed in min.cells. Default is 10.\n\n\n\n\nreturn.thresh\n\n\nOnly return markers that have a p-value &lt; return.thresh. Default is NULL.\n\n\n\n\nmode\n\n\nTest mode. For mode 1, X (test feature) vs Y (binding feature). For mode 2, X vs (Y-X). For mode 3, X vs (Y+X).\n\n\n\n\nthreads\n\n\nThreads. For DEXSeq, threads will set to 1. For other methods, threads set to 0, which will auto check the CPU cores and set threads = number of CPU cores -1.\n\n\n\n\nperm\n\n\nPermutation steps for calculate statistical of delta-ratio. Default is 100.\n\n\n\n\nseed\n\n\nSeed for generate random number. Default is 999.\n\n\n\n\ndebug\n\n\nPrint debug logs. Will auto set thread to 1. Default is FALSE."
  },
  {
    "objectID": "Yano/FindAllAltExp.html#value",
    "href": "Yano/FindAllAltExp.html#value",
    "title": "Test alternative expression for all cell groups",
    "section": "",
    "text": "Data frame containing p values."
  },
  {
    "objectID": "Yano/FindAllAltExp.html#examples",
    "href": "Yano/FindAllAltExp.html#examples",
    "title": "Test alternative expression for all cell groups",
    "section": "",
    "text": "library(\"Yano\")\n\ndata(\"glbt_small\")\nDefaultAssay(glbt_small) &lt;- \"exon\"\nalt.exon &lt;- FindAllAltExp(object = glbt_small, bind.assay = \"RNA\", bind.name = \"gene_name\", features = rownames(glbt_small))\nhead(alt.exon)\ndata frame with 0 columns and 0 rows"
  },
  {
    "objectID": "Yano/ParseVarName.html",
    "href": "Yano/ParseVarName.html",
    "title": "ParseVarName",
    "section": "",
    "text": "Source code\n\n\nParse chromosome name, start, ref allele, alternative allele and strand from EAT name. EAT generated by ‘PISA anno’ is formated like chr:pos(ref)&gt;(alt)/[+-].\n\n\n\nParseVarName(object = NULL, assay = NULL)\n\n\n\n\n\n\n\nobject\n\n\nSeurat object\n\n\n\n\nassay\n\n\nEAT assay. Default is current actived assay."
  },
  {
    "objectID": "Yano/ParseVarName.html#description",
    "href": "Yano/ParseVarName.html#description",
    "title": "ParseVarName",
    "section": "",
    "text": "Parse chromosome name, start, ref allele, alternative allele and strand from EAT name. EAT generated by ‘PISA anno’ is formated like chr:pos(ref)&gt;(alt)/[+-]."
  },
  {
    "objectID": "Yano/ParseVarName.html#usage",
    "href": "Yano/ParseVarName.html#usage",
    "title": "ParseVarName",
    "section": "",
    "text": "ParseVarName(object = NULL, assay = NULL)"
  },
  {
    "objectID": "Yano/ParseVarName.html#arguments",
    "href": "Yano/ParseVarName.html#arguments",
    "title": "ParseVarName",
    "section": "",
    "text": "object\n\n\nSeurat object\n\n\n\n\nassay\n\n\nEAT assay. Default is current actived assay."
  },
  {
    "objectID": "Yano/AutoCorrFeatures.html",
    "href": "Yano/AutoCorrFeatures.html",
    "title": "AutoCorrFeatures",
    "section": "",
    "text": "Source code\n\n\nreturn spatial autocorrlated features\n\n\n\nAutoCorrFeatures(object = NULL, assay = NULL)\n\n\n\n\n\n\n\nassay\n\n\nWorking assay.\n\n\n\n\nobejct\n\n\nSeurat object"
  },
  {
    "objectID": "Yano/AutoCorrFeatures.html#description",
    "href": "Yano/AutoCorrFeatures.html#description",
    "title": "AutoCorrFeatures",
    "section": "",
    "text": "return spatial autocorrlated features"
  },
  {
    "objectID": "Yano/AutoCorrFeatures.html#usage",
    "href": "Yano/AutoCorrFeatures.html#usage",
    "title": "AutoCorrFeatures",
    "section": "",
    "text": "AutoCorrFeatures(object = NULL, assay = NULL)"
  },
  {
    "objectID": "Yano/AutoCorrFeatures.html#arguments",
    "href": "Yano/AutoCorrFeatures.html#arguments",
    "title": "AutoCorrFeatures",
    "section": "",
    "text": "assay\n\n\nWorking assay.\n\n\n\n\nobejct\n\n\nSeurat object"
  },
  {
    "objectID": "Yano/ReadPISA.html",
    "href": "Yano/ReadPISA.html",
    "title": "ReadPISA",
    "section": "",
    "text": "Source code\n\n\nRead feature count matrix generated by ‘PISA count’.\n\n\n\nReadPISA(\n  mex_dir = NULL,\n  prefix = NULL,\n  suffix = NULL,\n  cells = NULL,\n  barcode.path = NULL,\n  feature.path = NULL,\n  matrix.path = NULL,\n  peak.path = NULL,\n  spliced.path = NULL,\n  unspliced.path = NULL,\n  spanning.path = NULL,\n  use_10X = FALSE,\n  spatial = FALSE\n)\n\n\n\n\n\n\n\nmex_dir\n\n\nFeature count outdir generated by ‘PISA count’.\n\n\n\n\nprefix\n\n\nPrefix to cell names.\n\n\n\n\nsuffix\n\n\nSuffixed to cell names.\n\n\n\n\ncells\n\n\nVector for candidate cells. If not set, will read all cells.\n\n\n\n\nbarcode.path\n\n\nManually specify barcode path in MEX directory.\n\n\n\n\nfeature.path\n\n\nManually specify feature path in MEX directory.\n\n\n\n\nmatrix.path\n\n\nManually specify matrix path in MEX directory.\n\n\n\n\npeak.path\n\n\nManually specific peak path (if feature is a region) in MEX directory.\n\n\n\n\nspliced.path\n\n\nManually specific spliced matrix path in MEX directory. The spliced, unspliced and spanning read count matrix generated by ‘PISA count -velo’.\n\n\n\n\nunspliced.path\n\n\nManually specific unspliced matrix path.\n\n\n\n\nspanning.path\n\n\nManually specific spanning matrix path.\n\n\n\n\nuse_10X\n\n\nSet TRUE if feature name in the second column of feature file.\n\n\n\n\nspatial\n\n\nSet TRUE if barcode is coordinate of bin. Will combine x and y coordinate into bin name “x_y”.\n\n\n\n\n\n\nReturns a sparse matrix of feature counts or a list of spliced, unspliced, and spanning reads sparse matrix."
  },
  {
    "objectID": "Yano/ReadPISA.html#description",
    "href": "Yano/ReadPISA.html#description",
    "title": "ReadPISA",
    "section": "",
    "text": "Read feature count matrix generated by ‘PISA count’."
  },
  {
    "objectID": "Yano/ReadPISA.html#usage",
    "href": "Yano/ReadPISA.html#usage",
    "title": "ReadPISA",
    "section": "",
    "text": "ReadPISA(\n  mex_dir = NULL,\n  prefix = NULL,\n  suffix = NULL,\n  cells = NULL,\n  barcode.path = NULL,\n  feature.path = NULL,\n  matrix.path = NULL,\n  peak.path = NULL,\n  spliced.path = NULL,\n  unspliced.path = NULL,\n  spanning.path = NULL,\n  use_10X = FALSE,\n  spatial = FALSE\n)"
  },
  {
    "objectID": "Yano/ReadPISA.html#arguments",
    "href": "Yano/ReadPISA.html#arguments",
    "title": "ReadPISA",
    "section": "",
    "text": "mex_dir\n\n\nFeature count outdir generated by ‘PISA count’.\n\n\n\n\nprefix\n\n\nPrefix to cell names.\n\n\n\n\nsuffix\n\n\nSuffixed to cell names.\n\n\n\n\ncells\n\n\nVector for candidate cells. If not set, will read all cells.\n\n\n\n\nbarcode.path\n\n\nManually specify barcode path in MEX directory.\n\n\n\n\nfeature.path\n\n\nManually specify feature path in MEX directory.\n\n\n\n\nmatrix.path\n\n\nManually specify matrix path in MEX directory.\n\n\n\n\npeak.path\n\n\nManually specific peak path (if feature is a region) in MEX directory.\n\n\n\n\nspliced.path\n\n\nManually specific spliced matrix path in MEX directory. The spliced, unspliced and spanning read count matrix generated by ‘PISA count -velo’.\n\n\n\n\nunspliced.path\n\n\nManually specific unspliced matrix path.\n\n\n\n\nspanning.path\n\n\nManually specific spanning matrix path.\n\n\n\n\nuse_10X\n\n\nSet TRUE if feature name in the second column of feature file.\n\n\n\n\nspatial\n\n\nSet TRUE if barcode is coordinate of bin. Will combine x and y coordinate into bin name “x_y”."
  },
  {
    "objectID": "Yano/ReadPISA.html#value",
    "href": "Yano/ReadPISA.html#value",
    "title": "ReadPISA",
    "section": "",
    "text": "Returns a sparse matrix of feature counts or a list of spliced, unspliced, and spanning reads sparse matrix."
  },
  {
    "objectID": "Yano/RunDEXSeq.html",
    "href": "Yano/RunDEXSeq.html",
    "title": "RunDEXSeq",
    "section": "",
    "text": "Source code\n\n\nThis will test the test features and binding features are different expressed between groups with a generalised linear model. See DEXSeq (PMID: 22722343) paper for details.\n\n\n\nRunDEXSeq(\n  object = NULL,\n  bind.name = \"gene_name\",\n  ident.1 = NULL,\n  ident.2 = NULL,\n  cells.1 = NULL,\n  cells.2 = NULL,\n  assay = NULL,\n  bind.assay = NULL,\n  features = NULL,\n  bind.features = NULL,\n  min.pct = 0.05,\n  min.pct.bind.feature = 0.05,\n  return.thresh = NULL,\n  node = NULL,\n  pseudo.group = 3,\n  mode = 1,\n  threads = 1,\n  debug = FALSE\n)\n\n\n\n\n\n\n\nobject\n\n\nA Seurat object.\n\n\n\n\nbind.name\n\n\nThe title of binding name in meta table. Usually be “gene_name” for alternative splicing.\n\n\n\n\nident.1\n\n\nIdentify class to test, if not set will compare all groups one by one\n\n\n\n\nident.2\n\n\nA second class for comparsion. If NULL (default), use all other cells for comparison.\n\n\n\n\ncells.1\n\n\nVector of cell names belong to group 1. Conflict with ident.1\n\n\n\n\ncells.2\n\n\nVector of cell names for comparsion. Conflict with ident.2\n\n\n\n\nassay\n\n\nAssay for test features. Default assay will be used if not set.\n\n\n\n\nbind.assay\n\n\nAssay for binding features. If not set, test features in same goup (with same bind name) will be aggreated as binding feature\n\n\n\n\nfeatures\n\n\nCandidate list to test. If not set, will use all.\n\n\n\n\nbind.features\n\n\nCandidate list for binding features. If not set, will use all.\n\n\n\n\nmin.pct\n\n\nOnly test features that are detected in a minimum fraction of min.pct cells in all cells. Meant to speed up the function by not testing genes that are very infrequenctly expressed in all cells. Remember we are testing alternative epxression pattern here, so it is possible the test feature is not expressed in one group, therefore we are not going to check by groups. Note that min.pct is set for test feature here. But in RunPSI, the min.pct is set for binding feature. Default is 0.05.\n\n\n\n\nmin.pct.bind.feature\n\n\nOnly test binding features that are detected in a minimum fraction of min.pct.bind.feature in either of the two populations. Meant to speed up the function by not testing genes that are very infrequenctly expressed in both groups. Default is 0.05.\n\n\n\n\nreturn.thresh\n\n\nOnly return markers that have a p-value &lt; return.thresh.\n\n\n\n\nnode\n\n\nA node to find markers for and all its children; requires BuildClusterTree to have been run previously. Only can be used if test all groups.\n\n\n\n\npseudo.group\n\n\nAggregate single cells into pseudo groups, because DEXSeq is designed for bulk RNA-seq. At least 3 cells are required for each group. Default is 3.\n\n\n\n\nmode\n\n\nTest mode, default is 1. See online manual for the difference between modes. &lt;https://shiquan.github.io/Yano.html&gt;\n\n\n\n\nthreads\n\n\nThreads passed to DEXSeq. Default is 1.\n\n\n\n\n\n\nData frame containing p values and pct for test features and their binding features.\n\n\n\nlibrary(\"Yano\")\n\ndata(\"glbt_small\")\nDefaultAssay(glbt_small) &lt;- \"exon\"\nglbt_small &lt;- ParseExonName(glbt_small)\nalt.exon &lt;- RunDEXSeq(object = glbt_small, assay = \"exon\", bind.assay = \"RNA\", bind.name = \"gene_name\",ident.1 = \"0\", features = rownames(glbt_small))\nhead(alt.exon)\n                                                            feature       pct.1\nchr1:154169305-154169383/-/TPM3     chr1:154169305-154169383/-/TPM3 0.004102564\nchr11:35197162-35197793/+/CD44       chr11:35197162-35197793/+/CD44 0.422564103\nchr11:75421727-75422280/+/RPS3       chr11:75421727-75422280/+/RPS3 0.164102564\nchr11:123060825-123061329/-/HSPA8 chr11:123060825-123061329/-/HSPA8 0.087179487\nchr11:123061588-123061833/-/HSPA8 chr11:123061588-123061833/-/HSPA8 0.065641026\nchr11:123061869-123062022/-/HSPA8 chr11:123061869-123062022/-/HSPA8 0.019487179\n                                       pct.2 bind.feature      log2fc\nchr1:154169305-154169383/-/TPM3   0.05073171         TPM3          NA\nchr11:35197162-35197793/+/CD44    0.32097561         CD44          NA\nchr11:75421727-75422280/+/RPS3    0.05268293         RPS3          NA\nchr11:123060825-123061329/-/HSPA8 0.13951220        HSPA8  0.05078704\nchr11:123061588-123061833/-/HSPA8 0.08780488        HSPA8 -0.44071765\nchr11:123061869-123062022/-/HSPA8 0.04195122        HSPA8  0.31086581\n                                           pval          padj\nchr1:154169305-154169383/-/TPM3    7.392274e-11  2.841919e-09\nchr11:35197162-35197793/+/CD44    3.763464e-116 1.302159e-113\nchr11:75421727-75422280/+/RPS3     1.315600e-17  6.502825e-16\nchr11:123060825-123061329/-/HSPA8  1.955408e-08  6.547463e-07\nchr11:123061588-123061833/-/HSPA8  1.135199e-01  6.810299e-01\nchr11:123061869-123062022/-/HSPA8  2.089351e-02  2.285663e-01"
  },
  {
    "objectID": "Yano/RunDEXSeq.html#description",
    "href": "Yano/RunDEXSeq.html#description",
    "title": "RunDEXSeq",
    "section": "",
    "text": "This will test the test features and binding features are different expressed between groups with a generalised linear model. See DEXSeq (PMID: 22722343) paper for details."
  },
  {
    "objectID": "Yano/RunDEXSeq.html#usage",
    "href": "Yano/RunDEXSeq.html#usage",
    "title": "RunDEXSeq",
    "section": "",
    "text": "RunDEXSeq(\n  object = NULL,\n  bind.name = \"gene_name\",\n  ident.1 = NULL,\n  ident.2 = NULL,\n  cells.1 = NULL,\n  cells.2 = NULL,\n  assay = NULL,\n  bind.assay = NULL,\n  features = NULL,\n  bind.features = NULL,\n  min.pct = 0.05,\n  min.pct.bind.feature = 0.05,\n  return.thresh = NULL,\n  node = NULL,\n  pseudo.group = 3,\n  mode = 1,\n  threads = 1,\n  debug = FALSE\n)"
  },
  {
    "objectID": "Yano/RunDEXSeq.html#arguments",
    "href": "Yano/RunDEXSeq.html#arguments",
    "title": "RunDEXSeq",
    "section": "",
    "text": "object\n\n\nA Seurat object.\n\n\n\n\nbind.name\n\n\nThe title of binding name in meta table. Usually be “gene_name” for alternative splicing.\n\n\n\n\nident.1\n\n\nIdentify class to test, if not set will compare all groups one by one\n\n\n\n\nident.2\n\n\nA second class for comparsion. If NULL (default), use all other cells for comparison.\n\n\n\n\ncells.1\n\n\nVector of cell names belong to group 1. Conflict with ident.1\n\n\n\n\ncells.2\n\n\nVector of cell names for comparsion. Conflict with ident.2\n\n\n\n\nassay\n\n\nAssay for test features. Default assay will be used if not set.\n\n\n\n\nbind.assay\n\n\nAssay for binding features. If not set, test features in same goup (with same bind name) will be aggreated as binding feature\n\n\n\n\nfeatures\n\n\nCandidate list to test. If not set, will use all.\n\n\n\n\nbind.features\n\n\nCandidate list for binding features. If not set, will use all.\n\n\n\n\nmin.pct\n\n\nOnly test features that are detected in a minimum fraction of min.pct cells in all cells. Meant to speed up the function by not testing genes that are very infrequenctly expressed in all cells. Remember we are testing alternative epxression pattern here, so it is possible the test feature is not expressed in one group, therefore we are not going to check by groups. Note that min.pct is set for test feature here. But in RunPSI, the min.pct is set for binding feature. Default is 0.05.\n\n\n\n\nmin.pct.bind.feature\n\n\nOnly test binding features that are detected in a minimum fraction of min.pct.bind.feature in either of the two populations. Meant to speed up the function by not testing genes that are very infrequenctly expressed in both groups. Default is 0.05.\n\n\n\n\nreturn.thresh\n\n\nOnly return markers that have a p-value &lt; return.thresh.\n\n\n\n\nnode\n\n\nA node to find markers for and all its children; requires BuildClusterTree to have been run previously. Only can be used if test all groups.\n\n\n\n\npseudo.group\n\n\nAggregate single cells into pseudo groups, because DEXSeq is designed for bulk RNA-seq. At least 3 cells are required for each group. Default is 3.\n\n\n\n\nmode\n\n\nTest mode, default is 1. See online manual for the difference between modes. &lt;https://shiquan.github.io/Yano.html&gt;\n\n\n\n\nthreads\n\n\nThreads passed to DEXSeq. Default is 1."
  },
  {
    "objectID": "Yano/RunDEXSeq.html#value",
    "href": "Yano/RunDEXSeq.html#value",
    "title": "RunDEXSeq",
    "section": "",
    "text": "Data frame containing p values and pct for test features and their binding features."
  },
  {
    "objectID": "Yano/RunDEXSeq.html#examples",
    "href": "Yano/RunDEXSeq.html#examples",
    "title": "RunDEXSeq",
    "section": "",
    "text": "library(\"Yano\")\n\ndata(\"glbt_small\")\nDefaultAssay(glbt_small) &lt;- \"exon\"\nglbt_small &lt;- ParseExonName(glbt_small)\nalt.exon &lt;- RunDEXSeq(object = glbt_small, assay = \"exon\", bind.assay = \"RNA\", bind.name = \"gene_name\",ident.1 = \"0\", features = rownames(glbt_small))\nhead(alt.exon)\n                                                            feature       pct.1\nchr1:154169305-154169383/-/TPM3     chr1:154169305-154169383/-/TPM3 0.004102564\nchr11:35197162-35197793/+/CD44       chr11:35197162-35197793/+/CD44 0.422564103\nchr11:75421727-75422280/+/RPS3       chr11:75421727-75422280/+/RPS3 0.164102564\nchr11:123060825-123061329/-/HSPA8 chr11:123060825-123061329/-/HSPA8 0.087179487\nchr11:123061588-123061833/-/HSPA8 chr11:123061588-123061833/-/HSPA8 0.065641026\nchr11:123061869-123062022/-/HSPA8 chr11:123061869-123062022/-/HSPA8 0.019487179\n                                       pct.2 bind.feature      log2fc\nchr1:154169305-154169383/-/TPM3   0.05073171         TPM3          NA\nchr11:35197162-35197793/+/CD44    0.32097561         CD44          NA\nchr11:75421727-75422280/+/RPS3    0.05268293         RPS3          NA\nchr11:123060825-123061329/-/HSPA8 0.13951220        HSPA8  0.05078704\nchr11:123061588-123061833/-/HSPA8 0.08780488        HSPA8 -0.44071765\nchr11:123061869-123062022/-/HSPA8 0.04195122        HSPA8  0.31086581\n                                           pval          padj\nchr1:154169305-154169383/-/TPM3    7.392274e-11  2.841919e-09\nchr11:35197162-35197793/+/CD44    3.763464e-116 1.302159e-113\nchr11:75421727-75422280/+/RPS3     1.315600e-17  6.502825e-16\nchr11:123060825-123061329/-/HSPA8  1.955408e-08  6.547463e-07\nchr11:123061588-123061833/-/HSPA8  1.135199e-01  6.810299e-01\nchr11:123061869-123062022/-/HSPA8  2.089351e-02  2.285663e-01"
  },
  {
    "objectID": "Yano/gtf2db.html",
    "href": "Yano/gtf2db.html",
    "title": "gtf2db",
    "section": "",
    "text": "Source code\n\n\nGenerate GTF object from gtf file.\n\n\n\ngtf2db(filename = NULL, use_utr = FALSE)\n\n\n\n\n\n\n\nfilename\n\n\nPath to gtf file.\n\n\n\n\nuse_utr\n\n\nLoad CDS records or not. Default is FALSE.\n\n\n\n\n\n\nA point to GTF struct."
  },
  {
    "objectID": "Yano/gtf2db.html#description",
    "href": "Yano/gtf2db.html#description",
    "title": "gtf2db",
    "section": "",
    "text": "Generate GTF object from gtf file."
  },
  {
    "objectID": "Yano/gtf2db.html#usage",
    "href": "Yano/gtf2db.html#usage",
    "title": "gtf2db",
    "section": "",
    "text": "gtf2db(filename = NULL, use_utr = FALSE)"
  },
  {
    "objectID": "Yano/gtf2db.html#arguments",
    "href": "Yano/gtf2db.html#arguments",
    "title": "gtf2db",
    "section": "",
    "text": "filename\n\n\nPath to gtf file.\n\n\n\n\nuse_utr\n\n\nLoad CDS records or not. Default is FALSE."
  },
  {
    "objectID": "Yano/gtf2db.html#value",
    "href": "Yano/gtf2db.html#value",
    "title": "gtf2db",
    "section": "",
    "text": "A point to GTF struct."
  },
  {
    "objectID": "Yano/SetAutoCorrFeatures.html",
    "href": "Yano/SetAutoCorrFeatures.html",
    "title": "SetAutoCorrFeatures",
    "section": "",
    "text": "Source code\n\n\nSet autocorrection by Moran’s I and/or p value.\n\n\n\nSetAutoCorrFeatures(\n  object = NULL,\n  moransi.min = 0,\n  assay = DefaultAssay(object),\n  p.thresh = 0.01,\n  prefix = \"moransi\",\n  verbose = TRUE\n)\n\n\n\n\n\n\n\nobject\n\n\nSeurat object\n\n\n\n\nmoransi.min\n\n\nMinimal score for Morans I. In default is 0.\n\n\n\n\nassay\n\n\nWorking assay. If not set, use DefaultAssay(object).\n\n\n\n\np.thresh\n\n\nThreshold for p value. Default is 1e-2.\n\n\n\n\nprefix\n\n\nPrefix name for Moran’s index and p value generated by RunAutoCorr. Default is “moransi”.\n\n\n\n\nverbose\n\n\nPrint log message."
  },
  {
    "objectID": "Yano/SetAutoCorrFeatures.html#description",
    "href": "Yano/SetAutoCorrFeatures.html#description",
    "title": "SetAutoCorrFeatures",
    "section": "",
    "text": "Set autocorrection by Moran’s I and/or p value."
  },
  {
    "objectID": "Yano/SetAutoCorrFeatures.html#usage",
    "href": "Yano/SetAutoCorrFeatures.html#usage",
    "title": "SetAutoCorrFeatures",
    "section": "",
    "text": "SetAutoCorrFeatures(\n  object = NULL,\n  moransi.min = 0,\n  assay = DefaultAssay(object),\n  p.thresh = 0.01,\n  prefix = \"moransi\",\n  verbose = TRUE\n)"
  },
  {
    "objectID": "Yano/SetAutoCorrFeatures.html#arguments",
    "href": "Yano/SetAutoCorrFeatures.html#arguments",
    "title": "SetAutoCorrFeatures",
    "section": "",
    "text": "object\n\n\nSeurat object\n\n\n\n\nmoransi.min\n\n\nMinimal score for Morans I. In default is 0.\n\n\n\n\nassay\n\n\nWorking assay. If not set, use DefaultAssay(object).\n\n\n\n\np.thresh\n\n\nThreshold for p value. Default is 1e-2.\n\n\n\n\nprefix\n\n\nPrefix name for Moran’s index and p value generated by RunAutoCorr. Default is “moransi”.\n\n\n\n\nverbose\n\n\nPrint log message."
  },
  {
    "objectID": "Yano/TrackPlot.html",
    "href": "Yano/TrackPlot.html",
    "title": "TrackPlot",
    "section": "",
    "text": "Source code\n\n\nPlot read/UMI coverage and transcript tracks from BAM(s).\n\n\n\nTrackPlot(\n  bamfile = NULL,\n  chr = NULL,\n  start = NULL,\n  end = NULL,\n  gene = NULL,\n  strand = c(\"both\", \"forward\", \"reverse\", \"ignore\"),\n  split.bc = FALSE,\n  bin = 1000,\n  cell.tag = \"CB\",\n  umi.tag = \"UB\",\n  gtf = NULL,\n  max.depth = 0,\n  group.title.size = rel(2),\n  cell.group = NULL,\n  display.genes = NULL,\n  meta.features = NULL,\n  log.scaled = FALSE,\n  upstream = 1000,\n  downstream = 1000,\n  fragfile = NULL,\n  atac.log.scaled = FALSE,\n  atac.max.depth = 0,\n  col.by = NULL,\n  layout.heights = c(1, 10, 2),\n  highlights = NULL,\n  junc = FALSE,\n  junc.min.depth = 5\n)\n\n\n\n\n\n\n\nbamfile\n\n\nA path to a BAM file or a list to BAM files. BAM file(s) should be indexed.\n\n\n\n\nchr\n\n\nChromosome name.\n\n\n\n\nstart\n\n\nStart position.\n\n\n\n\nend\n\n\nEnd position.\n\n\n\n\nstrand\n\n\nPlot reads on strand. Default is bot strands. Can be one of c(“both”, “forward”, “reverse”, “ignore”). When set to ignore, read strand information will be discarded.\n\n\n\n\nsplit.bc\n\n\nSplit coverage by barcode. Default is FALSE, bulk mode.\n\n\n\n\nbin\n\n\nDivide plot region into bins. Save plot time. Default is 1000.\n\n\n\n\ncell.tag\n\n\nTag for cell barcode in the BAM. Default is “CB”.\n\n\n\n\numi.tag\n\n\nTag for UMI in the BAM. Default is “UB”.\n\n\n\n\ngtf\n\n\nGTF database, load by gtf2db.\n\n\n\n\nmax.depth\n\n\nMax depth capped to plot. Default is 0, no capping.\n\n\n\n\ngroup.title.size\n\n\nFont size for track group titles. Default is rel(2).\n\n\n\n\ncell.group\n\n\nVector or list of cell group IDs. Name for the ID is the cell name. If bamfile is a list, the cell.group can also be a list with the same length of bamfile list, and binding cell.group to bam file by the name or order in both lists. See manual online for real cases. &lt;https://shiquan.github.io/Yano.html&gt;\n\n\n\n\ndisplay.genes\n\n\nVector of genes to plot in the target region. Other genes in this region will not print in transcript track plot.\n\n\n\n\nmeta.features\n\n\nMeta table for features. If set the regions will be also plot on top of track plot. Meta table can be accessed by object[[assay]][[]].\n\n\n\n\nlog.scaled\n\n\nLog scaled the coverage depth per group. Only used if the depth is super high. Disabled in default.\n\n\n\n\nupstream\n\n\nFlank the target region with upstream to plot. Default is 1000.\n\n\n\n\ndownstream\n\n\nFlank the target region with downstream to plot. Default is 1000.\n\n\n\n\nfragfile\n\n\nFragment file for ATAC data.\n\n\n\n\natac.log.scaled\n\n\nLog scaled the coverage depth per group for ATAC tracks.\n\n\n\n\natac.max.depth\n\n\nCapped depth to plot for ATAC tracks.\n\n\n\n\ncol.by\n\n\nColor bed regions by value. The specified name should be a colname in meta table. Only support discrete value.\n\n\n\n\nlayout.heights\n\n\nLayout for track plots. Default is c(10,2) or c(1,10,2) if meta.features specified or c(1,10,10,2) if fragment file also specified.\n\n\n\n\nhighlights\n\n\nA region of a list of regions to hightlight. The region is format as c(start,end).\n\n\n\n\njunc\n\n\nAlso plot the junction reads.\n\n\n\n\njunc.min.depth\n\n\nFilter out junctions if low than this cutoff. This parameter used to remove noise background. Default is 5."
  },
  {
    "objectID": "Yano/TrackPlot.html#description",
    "href": "Yano/TrackPlot.html#description",
    "title": "TrackPlot",
    "section": "",
    "text": "Plot read/UMI coverage and transcript tracks from BAM(s)."
  },
  {
    "objectID": "Yano/TrackPlot.html#usage",
    "href": "Yano/TrackPlot.html#usage",
    "title": "TrackPlot",
    "section": "",
    "text": "TrackPlot(\n  bamfile = NULL,\n  chr = NULL,\n  start = NULL,\n  end = NULL,\n  gene = NULL,\n  strand = c(\"both\", \"forward\", \"reverse\", \"ignore\"),\n  split.bc = FALSE,\n  bin = 1000,\n  cell.tag = \"CB\",\n  umi.tag = \"UB\",\n  gtf = NULL,\n  max.depth = 0,\n  group.title.size = rel(2),\n  cell.group = NULL,\n  display.genes = NULL,\n  meta.features = NULL,\n  log.scaled = FALSE,\n  upstream = 1000,\n  downstream = 1000,\n  fragfile = NULL,\n  atac.log.scaled = FALSE,\n  atac.max.depth = 0,\n  col.by = NULL,\n  layout.heights = c(1, 10, 2),\n  highlights = NULL,\n  junc = FALSE,\n  junc.min.depth = 5\n)"
  },
  {
    "objectID": "Yano/TrackPlot.html#arguments",
    "href": "Yano/TrackPlot.html#arguments",
    "title": "TrackPlot",
    "section": "",
    "text": "bamfile\n\n\nA path to a BAM file or a list to BAM files. BAM file(s) should be indexed.\n\n\n\n\nchr\n\n\nChromosome name.\n\n\n\n\nstart\n\n\nStart position.\n\n\n\n\nend\n\n\nEnd position.\n\n\n\n\nstrand\n\n\nPlot reads on strand. Default is bot strands. Can be one of c(“both”, “forward”, “reverse”, “ignore”). When set to ignore, read strand information will be discarded.\n\n\n\n\nsplit.bc\n\n\nSplit coverage by barcode. Default is FALSE, bulk mode.\n\n\n\n\nbin\n\n\nDivide plot region into bins. Save plot time. Default is 1000.\n\n\n\n\ncell.tag\n\n\nTag for cell barcode in the BAM. Default is “CB”.\n\n\n\n\numi.tag\n\n\nTag for UMI in the BAM. Default is “UB”.\n\n\n\n\ngtf\n\n\nGTF database, load by gtf2db.\n\n\n\n\nmax.depth\n\n\nMax depth capped to plot. Default is 0, no capping.\n\n\n\n\ngroup.title.size\n\n\nFont size for track group titles. Default is rel(2).\n\n\n\n\ncell.group\n\n\nVector or list of cell group IDs. Name for the ID is the cell name. If bamfile is a list, the cell.group can also be a list with the same length of bamfile list, and binding cell.group to bam file by the name or order in both lists. See manual online for real cases. &lt;https://shiquan.github.io/Yano.html&gt;\n\n\n\n\ndisplay.genes\n\n\nVector of genes to plot in the target region. Other genes in this region will not print in transcript track plot.\n\n\n\n\nmeta.features\n\n\nMeta table for features. If set the regions will be also plot on top of track plot. Meta table can be accessed by object[[assay]][[]].\n\n\n\n\nlog.scaled\n\n\nLog scaled the coverage depth per group. Only used if the depth is super high. Disabled in default.\n\n\n\n\nupstream\n\n\nFlank the target region with upstream to plot. Default is 1000.\n\n\n\n\ndownstream\n\n\nFlank the target region with downstream to plot. Default is 1000.\n\n\n\n\nfragfile\n\n\nFragment file for ATAC data.\n\n\n\n\natac.log.scaled\n\n\nLog scaled the coverage depth per group for ATAC tracks.\n\n\n\n\natac.max.depth\n\n\nCapped depth to plot for ATAC tracks.\n\n\n\n\ncol.by\n\n\nColor bed regions by value. The specified name should be a colname in meta table. Only support discrete value.\n\n\n\n\nlayout.heights\n\n\nLayout for track plots. Default is c(10,2) or c(1,10,2) if meta.features specified or c(1,10,10,2) if fragment file also specified.\n\n\n\n\nhighlights\n\n\nA region of a list of regions to hightlight. The region is format as c(start,end).\n\n\n\n\njunc\n\n\nAlso plot the junction reads.\n\n\n\n\njunc.min.depth\n\n\nFilter out junctions if low than this cutoff. This parameter used to remove noise background. Default is 5."
  },
  {
    "objectID": "Yano/varanno.html",
    "href": "Yano/varanno.html",
    "title": "varanno",
    "section": "",
    "text": "Source code\n\n\nAnnotate genetic variants with VCF databases.\n\n\n\nvaranno(\n  chr = NULL,\n  start = NULL,\n  end = NULL,\n  ref = NULL,\n  alt = NULL,\n  strand = NULL,\n  vcf = NULL,\n  tags = NULL,\n  check.alt.only = FALSE\n)\n\n\n\n\n\n\n\nchr\n\n\nVector of chromosome names.\n\n\n\n\nstart\n\n\nVector of start positions.\n\n\n\n\nend\n\n\nVector of end positions.\n\n\n\n\nref\n\n\nVector of reference alleles.\n\n\n\n\nalt\n\n\nVector of alternative alleles.\n\n\n\n\nstrand\n\n\nVector of strands.\n\n\n\n\nvcf\n\n\nVCF database. Should be indexed with ‘bcftools index’ at first.\n\n\n\n\ntags\n\n\nVector of tags to annotate. Require VCF database specified, and tags should be well formated in the VCF header.\n\n\n\n\ncheck.alt.only\n\n\nOnly annotate records for alternative allele (non-ref allele). Default is FASLE."
  },
  {
    "objectID": "Yano/varanno.html#description",
    "href": "Yano/varanno.html#description",
    "title": "varanno",
    "section": "",
    "text": "Annotate genetic variants with VCF databases."
  },
  {
    "objectID": "Yano/varanno.html#usage",
    "href": "Yano/varanno.html#usage",
    "title": "varanno",
    "section": "",
    "text": "varanno(\n  chr = NULL,\n  start = NULL,\n  end = NULL,\n  ref = NULL,\n  alt = NULL,\n  strand = NULL,\n  vcf = NULL,\n  tags = NULL,\n  check.alt.only = FALSE\n)"
  },
  {
    "objectID": "Yano/varanno.html#arguments",
    "href": "Yano/varanno.html#arguments",
    "title": "varanno",
    "section": "",
    "text": "chr\n\n\nVector of chromosome names.\n\n\n\n\nstart\n\n\nVector of start positions.\n\n\n\n\nend\n\n\nVector of end positions.\n\n\n\n\nref\n\n\nVector of reference alleles.\n\n\n\n\nalt\n\n\nVector of alternative alleles.\n\n\n\n\nstrand\n\n\nVector of strands.\n\n\n\n\nvcf\n\n\nVCF database. Should be indexed with ‘bcftools index’ at first.\n\n\n\n\ntags\n\n\nVector of tags to annotate. Require VCF database specified, and tags should be well formated in the VCF header.\n\n\n\n\ncheck.alt.only\n\n\nOnly annotate records for alternative allele (non-ref allele). Default is FASLE."
  },
  {
    "objectID": "Yano/RunBlockCorr.html",
    "href": "Yano/RunBlockCorr.html",
    "title": "RunBlockCorr",
    "section": "",
    "text": "Source code\n\n\nRun spatial dissimilarity test for features and their binding features in parallel.\n\n\n\nRunBlockCorr(\n  object = NULL,\n  bind.name = \"gene_name\",\n  features = NULL,\n  assay = NULL,\n  min.cells = 10,\n  bind.assay = NULL,\n  bind.features = NULL,\n  min.cells.bind = 10,\n  prefix = NULL,\n  subset = NULL,\n  min.features.per.block = 1,\n  scale.factor = 10000,\n  mode = c(1, 2, 3),\n  method = c(\"D\", \"D2\", \"Lee\"),\n  library.size = NULL,\n  wm.name = NULL,\n  perm = 100,\n  seed = 999,\n  threads = 0,\n  verbose = TRUE,\n  debug = FALSE,\n  cells = NULL,\n  idents = NULL,\n  node = NULL,\n  reduction = \"pca\",\n  dims = 1:10,\n  k.param = 20,\n  prune.SNN = 1/50,\n  n.trees = 50,\n  nn.eps = 0,\n  nn.method = \"annoy\",\n  annoy.metric = \"euclidean\"\n)\n\n\n\n\n\n\n\nobject\n\n\nSeurat object\n\n\n\n\nbind.name\n\n\nTitle name for binding features in the meta table. Consider most users start Yano to perform alternative splicing analysis, the default bind.name set to “gene_name”.\n\n\n\n\nfeatures\n\n\nVector of features to calculate. Default is AutoCorrFeatures(object).\n\n\n\n\nassay\n\n\nWork assay.\n\n\n\n\nmin.cells\n\n\nFeatures detected in few than minimal number of cells will be skipped. Default is 10.\n\n\n\n\nbind.assay\n\n\nName of binding assay.\n\n\n\n\nbind.features\n\n\nList of bind features. Default use all.\n\n\n\n\nmin.cells.bind\n\n\nBinding features detected in few than minimal number of cells will be skipped. Default is 10.\n\n\n\n\nprefix\n\n\nPrefix name for output scores and values. Default is same with bind.name.\n\n\n\n\nscale.factor\n\n\nScale factor to normalise counts. Default is 1e4. For mode 1, this function will use data from Layer ‘data’. For mode 2 and 3, will use data from Layer ‘counts’. The counts will further be normalised with sample size and scale factor for spatial dissimilarity test.\n\n\n\n\nmode\n\n\nTest mode. For mode 1, X (test feature) vs Y (binding feature). For mode 2, X vs (Y-X). For mode 3, X vs (Y+X). Please note, when set to mode 2 or 3, will use raw counts to update expression value of binding features. Then normalise the counts before testing. For mode 1, will use Layer ‘data’. Default is mode 1.\n\n\n\n\nmethod\n\n\nMethod to use. Support D, D2 and Lee. D = sqrt(Lx)(1 − rxy). D2 = sqrt(Lx)*sqr**t(Ly)(1 − rxy*). Lee for Lee’s Score. In default use D method, see the manual for details.\n\n\n\n\nlibrary.size\n\n\nLibrary size for each cell, used for normalise counts when mode is 2 or 3. If not set, use colSum(counts) instead.\n\n\n\n\nwm.name\n\n\nWeight matrix name, this matrix (graph) generated by RunAutoCorr.\n\n\n\n\nperm\n\n\nPermutations for evaluating mean and sd of D/L scores. Default is 100.\n\n\n\n\nseed\n\n\nSeed for generate random number. Default is 999.\n\n\n\n\nthreads\n\n\nThreads. If set to 0 (default), will auto check the CPU cores and set threads = number of CPU cores -1.\n\n\n\n\ndebug\n\n\nPrint debug message. Will auto set thread to 1. Default is FALSE.\n\n\n\n\ncells\n\n\nCalculate scores for predefined cells. Will reconstruct the SNN graph and weight matrix for these cells with ‘reduction’ space (usually be pca or harmony). Only weight matrix that calculated by SNN is supported if cells/idents/node is defined.\n\n\n\n\nidents\n\n\nCalculate scores for these cell groups. The idents should be a vector of group names in Idnets(object).\n\n\n\n\nnode\n\n\nA node to find markers for and all its children; requires BuildClusterTree to have been run previously. Only can be used if test all groups.\n\n\n\n\nreduction\n\n\nDimension reduction name for constructing SNN graph and weight matrix. Default is ‘pca’. This and following parameters only actived when cells is set, because need to recalculate the SNN graph for the defined cells.\n\n\n\n\ndims\n\n\nDimensions of reduction used to construct SNN graph.\n\n\n\n\nk.param\n\n\nDefines k for the k-nearest neighbor algorithm.\n\n\n\n\nprune.SNN\n\n\nSets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the SNN construction. Any edges with values less than or equal to this will be set to 0 and removed from the SNN graph. Essentially sets the stringency of pruning (0 — no pruning, 1 — prune everything). Default is 1/50.\n\n\n\n\nn.trees\n\n\nMore trees gives higher precision when using annoy approximate nearest neighbor search. Default is 50.\n\n\n\n\nnn.eps\n\n\nError bound when performing nearest neighbor seach using RANN; default of 0.0 implies exact nearest neighbor search\n\n\n\n\nnn.method\n\n\nMethod for nearest neighbor finding. Options include: rann, annoy(default).\n\n\n\n\nannoy.metric\n\n\nDistance metric for annoy. Options include: euclidean (default), cosine, manhattan, and hamming\n\n\n\n\nversbose\n\n\nPrint log message. Default is TRUE."
  },
  {
    "objectID": "Yano/RunBlockCorr.html#description",
    "href": "Yano/RunBlockCorr.html#description",
    "title": "RunBlockCorr",
    "section": "",
    "text": "Run spatial dissimilarity test for features and their binding features in parallel."
  },
  {
    "objectID": "Yano/RunBlockCorr.html#usage",
    "href": "Yano/RunBlockCorr.html#usage",
    "title": "RunBlockCorr",
    "section": "",
    "text": "RunBlockCorr(\n  object = NULL,\n  bind.name = \"gene_name\",\n  features = NULL,\n  assay = NULL,\n  min.cells = 10,\n  bind.assay = NULL,\n  bind.features = NULL,\n  min.cells.bind = 10,\n  prefix = NULL,\n  subset = NULL,\n  min.features.per.block = 1,\n  scale.factor = 10000,\n  mode = c(1, 2, 3),\n  method = c(\"D\", \"D2\", \"Lee\"),\n  library.size = NULL,\n  wm.name = NULL,\n  perm = 100,\n  seed = 999,\n  threads = 0,\n  verbose = TRUE,\n  debug = FALSE,\n  cells = NULL,\n  idents = NULL,\n  node = NULL,\n  reduction = \"pca\",\n  dims = 1:10,\n  k.param = 20,\n  prune.SNN = 1/50,\n  n.trees = 50,\n  nn.eps = 0,\n  nn.method = \"annoy\",\n  annoy.metric = \"euclidean\"\n)"
  },
  {
    "objectID": "Yano/RunBlockCorr.html#arguments",
    "href": "Yano/RunBlockCorr.html#arguments",
    "title": "RunBlockCorr",
    "section": "",
    "text": "object\n\n\nSeurat object\n\n\n\n\nbind.name\n\n\nTitle name for binding features in the meta table. Consider most users start Yano to perform alternative splicing analysis, the default bind.name set to “gene_name”.\n\n\n\n\nfeatures\n\n\nVector of features to calculate. Default is AutoCorrFeatures(object).\n\n\n\n\nassay\n\n\nWork assay.\n\n\n\n\nmin.cells\n\n\nFeatures detected in few than minimal number of cells will be skipped. Default is 10.\n\n\n\n\nbind.assay\n\n\nName of binding assay.\n\n\n\n\nbind.features\n\n\nList of bind features. Default use all.\n\n\n\n\nmin.cells.bind\n\n\nBinding features detected in few than minimal number of cells will be skipped. Default is 10.\n\n\n\n\nprefix\n\n\nPrefix name for output scores and values. Default is same with bind.name.\n\n\n\n\nscale.factor\n\n\nScale factor to normalise counts. Default is 1e4. For mode 1, this function will use data from Layer ‘data’. For mode 2 and 3, will use data from Layer ‘counts’. The counts will further be normalised with sample size and scale factor for spatial dissimilarity test.\n\n\n\n\nmode\n\n\nTest mode. For mode 1, X (test feature) vs Y (binding feature). For mode 2, X vs (Y-X). For mode 3, X vs (Y+X). Please note, when set to mode 2 or 3, will use raw counts to update expression value of binding features. Then normalise the counts before testing. For mode 1, will use Layer ‘data’. Default is mode 1.\n\n\n\n\nmethod\n\n\nMethod to use. Support D, D2 and Lee. D = sqrt(Lx)(1 − rxy). D2 = sqrt(Lx)*sqr**t(Ly)(1 − rxy*). Lee for Lee’s Score. In default use D method, see the manual for details.\n\n\n\n\nlibrary.size\n\n\nLibrary size for each cell, used for normalise counts when mode is 2 or 3. If not set, use colSum(counts) instead.\n\n\n\n\nwm.name\n\n\nWeight matrix name, this matrix (graph) generated by RunAutoCorr.\n\n\n\n\nperm\n\n\nPermutations for evaluating mean and sd of D/L scores. Default is 100.\n\n\n\n\nseed\n\n\nSeed for generate random number. Default is 999.\n\n\n\n\nthreads\n\n\nThreads. If set to 0 (default), will auto check the CPU cores and set threads = number of CPU cores -1.\n\n\n\n\ndebug\n\n\nPrint debug message. Will auto set thread to 1. Default is FALSE.\n\n\n\n\ncells\n\n\nCalculate scores for predefined cells. Will reconstruct the SNN graph and weight matrix for these cells with ‘reduction’ space (usually be pca or harmony). Only weight matrix that calculated by SNN is supported if cells/idents/node is defined.\n\n\n\n\nidents\n\n\nCalculate scores for these cell groups. The idents should be a vector of group names in Idnets(object).\n\n\n\n\nnode\n\n\nA node to find markers for and all its children; requires BuildClusterTree to have been run previously. Only can be used if test all groups.\n\n\n\n\nreduction\n\n\nDimension reduction name for constructing SNN graph and weight matrix. Default is ‘pca’. This and following parameters only actived when cells is set, because need to recalculate the SNN graph for the defined cells.\n\n\n\n\ndims\n\n\nDimensions of reduction used to construct SNN graph.\n\n\n\n\nk.param\n\n\nDefines k for the k-nearest neighbor algorithm.\n\n\n\n\nprune.SNN\n\n\nSets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the SNN construction. Any edges with values less than or equal to this will be set to 0 and removed from the SNN graph. Essentially sets the stringency of pruning (0 — no pruning, 1 — prune everything). Default is 1/50.\n\n\n\n\nn.trees\n\n\nMore trees gives higher precision when using annoy approximate nearest neighbor search. Default is 50.\n\n\n\n\nnn.eps\n\n\nError bound when performing nearest neighbor seach using RANN; default of 0.0 implies exact nearest neighbor search\n\n\n\n\nnn.method\n\n\nMethod for nearest neighbor finding. Options include: rann, annoy(default).\n\n\n\n\nannoy.metric\n\n\nDistance metric for annoy. Options include: euclidean (default), cosine, manhattan, and hamming\n\n\n\n\nversbose\n\n\nPrint log message. Default is TRUE."
  },
  {
    "objectID": "workflow1.html",
    "href": "workflow1.html",
    "title": "From fastq to feature counts with PISA",
    "section": "",
    "text": "The following vignette demonstrates how to parse raw FASTQ files to FASTQ+ format and perform alignment, feature annotation, and counting using PISA. For simplification, we use minimap2 to align reads in this example, but other tools such as STAR can also be used.",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "From FASTQ to counts"
    ]
  },
  {
    "objectID": "workflow1.html#prepare-the-raw-data-and-reference",
    "href": "workflow1.html#prepare-the-raw-data-and-reference",
    "title": "From fastq to feature counts with PISA",
    "section": "Prepare the raw data and reference",
    "text": "Prepare the raw data and reference\n\nDownload raw data: http://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_v3/pbmc_1k_v3_fastqs.tar (5.2G)\nDownload the human reference databases and gene annotation files:\n\nhttps://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_32/GRCh38.p13.genome.fa.gz\nhttps://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_32/gencode.v32.annotation.gtf.gz",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "From FASTQ to counts"
    ]
  },
  {
    "objectID": "workflow1.html#the-third-party-programs-we-will-use",
    "href": "workflow1.html#the-third-party-programs-we-will-use",
    "title": "From fastq to feature counts with PISA",
    "section": "The third-party programs we will use",
    "text": "The third-party programs we will use\n\nminimap2 (https://github.com/lh3/minimap2)\nsamtools (https://github.com/samtools/samtools)",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "From FASTQ to counts"
    ]
  },
  {
    "objectID": "workflow1.html#step-by-step-tutorial",
    "href": "workflow1.html#step-by-step-tutorial",
    "title": "From fastq to feature counts with PISA",
    "section": "Step by step tutorial",
    "text": "Step by step tutorial\n\n1. Parse cell barcode and UMI\n# Unpack the raw fastq\ntar xvf pbmc_1k_v3_fastqs.tar \ngzip -d GRCh38.p13.genome.fa.gz\n\n# Convert raw fastq to fastq+\nPISA parse -rule 'CB,R1:1-16;UR,R1:17-28;R1,R2' pbmc_1k_v3_fastqs/pbmc_1k_v3_S1_L001_R1_001.fastq.gz,pbmc_1k_v3_fastqs/pbmc_1k_v3_S1_L002_R1_001.fastq.gz pbmc_1k_v3_fastqs/pbmc_1k_v3_S1_L001_R2_001.fastq.gz,pbmc_1k_v3_fastqs/pbmc_1k_v3_S1_L002_R2_001.fastq.gz -nw -report fastq_qc.csv -1 reads.fq \n\n# Check the fastq+ records\nhead reads.fq\n\n@A00228:279:HFWFVDMXX:1:1101:8486:1000|||CB:Z:NGTGATTAGCTGTACT|||UR:Z:CGTATGTAAGGT\nNACAAAGTCCCCCCCATAATACAGGGGGAGCCACTTGGGCAGGAGGCAGGGAGGGGTCCATTCCCCCTGGTGGGGCTGGTGGGGAGCTGTA\n+\n#FFFFFFFFFFFFFFF:FFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFF\n@A00228:279:HFWFVDMXX:1:1101:10782:1000|||CB:Z:NTCATGAAGTTTGGCT|||UR:Z:AGTTATGTTCAT\nNTTGCAGCTGAACTGGTAAACTTGTCCCTAAAGAGACATAAGAATGGTCAACTGGAATGTGGATTCATCTGTAACATTACTCAGTGGGCCT\n+\n#FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n@A00228:279:HFWFVDMXX:1:1101:12626:1000|||CB:Z:NACCAAAAGGACATCG|||UR:Z:CGGTAGAGGCTT\nGCTCCGTAGCCCTGACTGCCTTGGTGACTGTATCCTCAGAAGAATTTGAAGACAAGTGGTTCAGAAAGATCAAAGACCATTTCTGTCCATT\n\n\n\n# Check the report\ncat fastq_qc.csv\n\nNumber of Fragments,66601887\nFragments pass QC,66601887\nFragments with Exactly Matched Barcodes,0\nFragments with Failed Barcodes,0\n\n\n\n\n2. Align reads with minimap2\nTo get identical results with 10X’s Cell Ranger, you need use 10X’s gtf to index genome and annotate BAM as they modified it from original ENSEMBL gtf.\nminimap2 -t 8 -ax splice GRCh38.p13.genome.fa reads.fq &gt; aln.sam\nNotice : Please do NOT use samtools view to convert the SAM to BAM. Because the barcode information still store in the read name. Using PISA sam2bam instead.\nFASTQ+ aligned SAM records can be look like this.\n\nsamtools view aln.sam|head -n 1\n\nA00228:279:HFWFVDMXX:1:1101:8486:1000|||CB:Z:NGTGATTAGCTGTACT|||UR:Z:CGTATGTAAGGT   0   chr19   12748180    60  1S90M   *   0   0   NACAAAGTCCCCCCCATAATACAGGGGGAGCCACTTGGGCAGGAGGCAGGGAGGGGTCCATTCCCCCTGGTGGGGCTGGTGGGGAGCTGTA #FFFFFFFFFFFFFFF:FFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFF NM:i:0  ms:i:90 AS:i:90 nn:i:0  tp:A:P  cm:i:25 s1:i:85 s2:i:0  de:f:0  rl:i:0\n\n\n\n\n3. Convert SAM to BAM\nThis step will convert the SAM to BAM, while generating the summary of alignments and parse the tags from the read id to SAM optional field. If -adjust-mapq and -gtf parameters set, mapping quality of multi-reads (reads mapped to one gene region and more than one integenic region) will be adjusted.\nPISA sam2bam -report alignment_report.csv -@ 5 -adjust-mapq -gtf gencode.v32.annotation.gtf.gz -o aln.bam aln.sam\nConverted records can be look like this.\n\nsamtools view aln.bam|head -n 1\n\nA00228:279:HFWFVDMXX:1:1101:8486:1000   0   chr19   12748180    60  1S90M   *   0   0   NACAAAGTCCCCCCCATAATACAGGGGGAGCCACTTGGGCAGGAGGCAGGGAGGGGTCCATTCCCCCTGGTGGGGCTGGTGGGGAGCTGTA #FFFFFFFFFFFFFFF:FFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFF NM:i:0  ms:i:90 AS:i:90 nn:i:0  tp:A:P  cm:i:25 s1:i:85 s2:i:0  de:f:0  rl:i:0  CB:Z:NGTGATTAGCTGTACT   UR:Z:CGTATGTAAGGT\n\n\nAnd the summary.\n\ncat alignment_report.csv\n\nRaw reads,66601887\nMapped reads,52582556 (78.95%)\nPlus strand,29549905\nMinus strand,23032651\nMitochondria ratio,7.66%\nMapping quality corrected reads,427081\n\n\n\n\n4. Gene annotations\nPISA anno -gtf gencode.v32.annotation.gtf.gz -o anno.bam aln.bam -t 5 -report anno.csv\n\ncat anno.csv\n\nReads Mapped to Genome (Map Quality &gt;= 0),79.0%\nReads Mapped to Exonic Regions,62.4%\nReads Mapped to Intronic Regions,24.5%\nReads Mapped to both Exonic and Intronic Regions,1.8%\nReads Mapped Antisense to Exon,0.8%\nReads Mapped Antisense to Intron,6.7%\nReads Mapped to Intergenic Regions,3.7%\nReads Mapped to Gene but Failed to Interpret Type,0.1%\nReads Mapped to Overlapped genes,1.5%\n\n\n\n\n5. Sort BAM by genomics coordinate (Optional)\nA sorted and indexed BAM file can be useful for many secondary analyses, but it is not mandatory if you only need the gene expression count matrix. The annotation and expression count steps do not require a sorted BAM. However, if two similar UMIs have the same supporting reads, the first one will always be selected, and the second will be corrected during the corr step. If the records are not sorted, this may lead to non-robust results.\n## sambamba can also be used to sort bam for better performance. For simplication, we use samtools here.\nsamtools sort -@ 5 -o sorted.bam anno.bam\n\n\n6. UMIs correction for one cell in one gene\nPISA corr -tag UR -new-tag UB -tags-block CB,GN -cr -o final.bam -@ 5 sorted.bam\n\n\n7. Generate Cell X Gene expression matrix\nmkdir raw_gene_expression\nPISA count -tags CB -anno-tag GN -umi UB -outdir raw_gene_expression -@ 5 final.bam\nPISA count will write the feature counts in MEX format.\n\nls raw_gene_expression\n\nbarcodes.tsv.gz\nfeatures.tsv.gz\nmatrix.mtx.gz\n\n\n\n\n8. Cell selection with DropletUtils\nIn the last step, we generate a raw gene expression matrix. By using R package DropletUtils, we select “valid’ cell barcodes from this raw matrix and generate a filtered gene expression matrix in the end.\n# load required packages\nrequire(DropletUtils)\nrequire(Yano)\n\n# Read raw MEX file into a sparse matrix\ncounts &lt;- ReadPISA(\"raw_gene_expression/\")\n\n# Read sparse matrix as a SingleCellExperiment object\nsce &lt;- SingleCellExperiment(list('counts' = counts))\n\n# Run barcodeRanks function from DropletUtils, see ref for details\nbr.out &lt;- barcodeRanks(sce)\n\n# Get all barcodes above the inflection point\nfilter_bcs &lt;- rownames(br.out)[br.out$total &gt;metadata(br.out)$inflection]\n\n# the filer matrix\nfilter_counts &lt;- counts[,filter_bcs]\n\n# write file to new folder in 10X format for further use\nwrite10xCounts(\"filtered_gene_expression\", filter_counts)",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "From FASTQ to counts"
    ]
  },
  {
    "objectID": "workflow1.html#useful-resorces",
    "href": "workflow1.html#useful-resorces",
    "title": "From fastq to feature counts with PISA",
    "section": "Useful resorces",
    "text": "Useful resorces\n\nhttps://bioconductor.org/packages/release/bioc/vignettes/DropletUtils/inst/doc/DropletUtils.html\nhttps://support.10xgenomics.com/single-cell-gene-expression/datasets/3.0.0/pbmc_1k_v3",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "From FASTQ to counts"
    ]
  },
  {
    "objectID": "Yano.html",
    "href": "Yano.html",
    "title": "Yano",
    "section": "",
    "text": "Yano represents an R/C toolkit designed for conducting spatial dissimilarity analysis on single-cell RNA sequencing data. This method revolves around the core concept of examining the distinct expression patterns of a given feature (e.g. exon, snp allele) in relation to its associated binding feature (typically a gene or another allele at the same genomic locus) within the context of cell lineage (1D), spatial position (2D), or the multi-dimensional PCA space. The discernible differences in feature expression patterns and their binding features provide insights into a range of biological phenomena, including alternative splicing, cis-antisense RNA regulation, allele-specific gene expression, and more.\nYano is seamlessly integrated with Seurat, building upon the Seurat object’s framework. Users can perform conventional cell clustering analyses using the state-of-the-art Seurat pipeline and then incorporate exon, SNP counts as new “assays” within the Seurat objects. Subsequently, Yano facilitates the assessment of spatial dissimilarity between these two assays. For more details about the method, please refer to our manuscript."
  },
  {
    "objectID": "Yano.html#introduction",
    "href": "Yano.html#introduction",
    "title": "Yano",
    "section": "",
    "text": "Yano represents an R/C toolkit designed for conducting spatial dissimilarity analysis on single-cell RNA sequencing data. This method revolves around the core concept of examining the distinct expression patterns of a given feature (e.g. exon, snp allele) in relation to its associated binding feature (typically a gene or another allele at the same genomic locus) within the context of cell lineage (1D), spatial position (2D), or the multi-dimensional PCA space. The discernible differences in feature expression patterns and their binding features provide insights into a range of biological phenomena, including alternative splicing, cis-antisense RNA regulation, allele-specific gene expression, and more.\nYano is seamlessly integrated with Seurat, building upon the Seurat object’s framework. Users can perform conventional cell clustering analyses using the state-of-the-art Seurat pipeline and then incorporate exon, SNP counts as new “assays” within the Seurat objects. Subsequently, Yano facilitates the assessment of spatial dissimilarity between these two assays. For more details about the method, please refer to our manuscript."
  },
  {
    "objectID": "Yano.html#install",
    "href": "Yano.html#install",
    "title": "Yano",
    "section": "INSTALL",
    "text": "INSTALL\n# Dependencies\ninstall.packages(c(\"Seurat\", \"R.utils\", \"viridis\", \"devtools\"), repos = \"https://cloud.r-project.org\")\n# Install Yano \ndevtools::install_github(\"shiquan/Yano\")\nNotice: Multithread mode is disabled on macOS by default due to the lack of OpenMP support. However, data.table provides a useful tutorial on how to enable OpenMP on macOS. For more information, please refer to this guide: https://github.com/Rdatatable/data.table/wiki/Installation#enable-openmp-for-macos."
  },
  {
    "objectID": "Yano.html#get-started",
    "href": "Yano.html#get-started",
    "title": "Yano",
    "section": "Get started",
    "text": "Get started\nA typical workflow with Yano starts by using a built-in dataset.\n\nrequire(Yano)\ndata(\"glbt_small\")\nDefaultAssay(glbt_small) &lt;- \"RNA\"\nglbt_small &lt;- NormalizeData(glbt_small) %&gt;% RunUMAP(dim = 1:20)\n\nDimPlot(glbt_small, label = TRUE, label.size = 5)\n\n\n\n\n\n\n\nDefaultAssay(glbt_small) &lt;- \"exon\"\nglbt_small &lt;- NormalizeData(glbt_small)\nglbt_small &lt;- ParseExonName(glbt_small)\ngrep(\"_wm$\",names(glbt_small), value=TRUE)\n\ncharacter(0)\n\nglbt_small &lt;- RunAutoCorr(glbt_small)\ngrep(\"_wm$\",names(glbt_small), value=TRUE)\n\n[1] \"pca_wm\"\n\nglbt_small &lt;- SetAutoCorrFeatures(glbt_small)\nglbt_small &lt;- RunBlockCorr(glbt_small, bind.name = \"gene_name\", bind.assay = \"RNA\")\n\n# Manhattan plot for spatial dissimilarity test result\nFbtPlot(glbt_small, val = \"gene_name.padj\")\n\n\n\n\n\n\n\nFeaturePlot(glbt_small, features = c(\"chr19:16095264-16095454/+/TPM4\", \"TPM4\"), order=TRUE)\n\n\n\n\n\n\n\n# Track plot for gene coverage at different cell types\ndb &lt;- gtf2db(\"./gencode.v44.annotation.gtf.gz\")\n\n[2024-10-21 14:13:04] \u001b[32mGTF loading..\u001b[0m\n[2024-10-21 14:13:38] \u001b[32mLoad 62700 genes.\u001b[0m\n[2024-10-21 14:13:38] \u001b[32mLoad time : 33.330 sec\u001b[0m\n\nTrackPlot(bamfile=\"./Parent_SC3v3_Human_Glioblastoma_possorted_genome_bam.bam\", gtf =db, gene = \"TPM4\", junc = TRUE, cell.group = Idents(glbt_small), highlights = c(16095264,16095454))\n\n\n\n\n\n\n\n\nSee short cases for more details."
  },
  {
    "objectID": "Yano.html#short-cases",
    "href": "Yano.html#short-cases",
    "title": "Yano",
    "section": "Short cases",
    "text": "Short cases\n\nAlternative splicing analysis for scRNA-seq\nAllele-specific gene expression analysis for scRNA-seq\nAnnotating and prioritizing genetic variants for scRNA-seq"
  },
  {
    "objectID": "Yano.html#changelog",
    "href": "Yano.html#changelog",
    "title": "Yano",
    "section": "Changelog",
    "text": "Changelog\n\n\n0.0.0.9999 2023/03/22\n\nInit version."
  },
  {
    "objectID": "Yano.html#issues-or-questions",
    "href": "Yano.html#issues-or-questions",
    "title": "Yano",
    "section": "Issues or questions",
    "text": "Issues or questions\n\nhttps://github.com/shiquan/Yano/issues\nhttps://github.com/shiquan/Yano/discussions"
  },
  {
    "objectID": "Yano.html#functions",
    "href": "Yano.html#functions",
    "title": "Yano",
    "section": "Functions",
    "text": "Functions\n\n\n\nFunction(s)\nDescription\n\n\n\n\nannoBED\nAnnotate BED with preload GTF.\n\n\nannoVAR\nAnnotate genetic variants with preload GTF and/or VCF databases.\n\n\nAutoCorrFeatures\nSelect spatial autocorrelated features.\n\n\nFbtPlot\nGenerate a mahattan plot for features.\n\n\nFindAltExp\nFind group specific alternative expressed features.\n\n\nFindAllAltExp\nFind alternative expressed features for all groups.\n\n\nGetWeights\nGet weight matrix.\n\n\ngtf2db\nLoad GTF database into memory.\n\n\nmergeMatrix\nMerge two or more count matrix into one.\n\n\nParseBED\nParse chromsome name, locations and strand from BED names.\n\n\nParseExonName\nParse chromsome name, locations, strand and gene name from Exon/Junction names.\n\n\nParseVarName\nParse chromsome name, locations and strand from genetic variant names.\n\n\nPSIPlot\nPlot Percent Spliced-IN value on a reduction map.\n\n\nRatioPlot\nPlot ratio of feature and binding feature expression on a reduction map.\n\n\nReadPISA\nLoad raw matrix which generated by PISA.\n\n\nRunAutoCorr\nPerform spatial autocorrelation test for features.\n\n\nRunBlockCorr\nPerform spatial dissimilarity test for features.\n\n\nRunDEXSeq\nRun alternative expression analysis with DEXSeq.\n\n\nQuickRecipe\nRun Seurat pipeline.\n\n\nSetAutoCorrFeatures\nSetup spatial autocorrelated features.\n\n\nTrackPlot\nGenerate tracks plot from BAM(s).\n\n\nvaranno\nLow level version of annoVAR, need specify chr, position manually."
  },
  {
    "objectID": "PISA.html",
    "href": "PISA.html",
    "title": "PISA User Guide",
    "section": "",
    "text": "PISA [tool] [options] [input-file]"
  },
  {
    "objectID": "PISA.html#synopsis",
    "href": "PISA.html#synopsis",
    "title": "PISA User Guide",
    "section": "",
    "text": "PISA [tool] [options] [input-file]"
  },
  {
    "objectID": "PISA.html#install",
    "href": "PISA.html#install",
    "title": "PISA User Guide",
    "section": "Install",
    "text": "Install\nPISA source code can be downloaded at https://github.com/shiquan/PISA/releases, or the development version from https://github.com/shiquan/PISA/. To compile PISA from sources run make in the source directory.\n$ git clone https://github.com/shiquan/PISA\n$ cd PISA\n$ make"
  },
  {
    "objectID": "PISA.html#get-started",
    "href": "PISA.html#get-started",
    "title": "PISA User Guide",
    "section": "Get Started",
    "text": "Get Started\nThe code snippet below demonstrates how to use the PISA tools to process test data and generate various feature counts. You can find the test data in the PISA/demo directory. This example provides a practical approach to familiarize yourself with the functionality of PISA and to validate its operations with provided sample data.\n$ cd demo\n\n$ ls\naln.sam.gz  barcodes.txt  demo_1.fq.gz  demo_2.fq.gz  demo.gtf.gz  peaks.bed  README.md  var.vcf.gz\n\n$ zcat demo_1.fq.gz|head -n 4\n@A00984:220:HNJ7KDRXX:1:1118:2510:4586\nAAGCATCCACACAGAGCACCCCGTTCTT\n+\nFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n\n$ zcat demo_2.fq.gz|head -n 4\n@A00984:220:HNJ7KDRXX:1:1118:2510:4586\nGCAGTGGTATCAACGCAGAGTACATGGGGAGCCTCATTGCCCAGCGGACCCCAGCCTCTGCCAGGTTCGGTCCGCCATCCTCGTCCCGTCC\n+\nFFFFF:FFFFFF:FFFFFFFFFF,FFFFFFFFF:FFFFFFFFF,FFFF:FFF,FFFFF:FFF:FFFFFFFFFFFFFFFFFFFF:FFFFFFF\n\n# Convert raw FASTQ to FASTQ+ format\n$ PISA parse -rule 'CR,R1:1-16,barcodes.txt,CB,1;UR,R1:17-28;R1,R2' demo_1.fq.gz demo_2.fq.gz -1 demo.fq\nNumber of Fragments,825\nFragments pass QC,825\nFragments with Exactly Matched Barcodes,805\nFragments with Failed Barcodes,0\n[2022-04-22 12:21:35] Real time: 0.003 sec; CPU: 0.009 sec; Peak RSS: 0.010 GB.\n\n$ head -n 4 demo.fq\n@A00984:220:HNJ7KDRXX:1:1118:2510:4586|||CR:Z:AAGCATCCACACAGAG|||CB:Z:AAGCATCCACACAGAG|||UR:Z:CACCCCGTTCTT\nGCAGTGGTATCAACGCAGAGTACATGGGGAGCCTCATTGCCCAGCGGACCCCAGCCTCTGCCAGGTTCGGTCCGCCATCCTCGTCCCGTCC\n+\nFFFFF:FFFFFF:FFFFFFFFFF,FFFFFFFFF:FFFFFFFFF,FFFF:FFF,FFFFF:FFF:FFFFFFFFFFFFFFFFFFFF:FFFFFFF\n\n# Alignment results of FASTQ+ \n$ samtools view aln.sam.gz|head -n 1\nA00984:220:HNJ7KDRXX:1:1118:2510:4586|||CR:Z:AAGCATCCACACAGAG|||CB:Z:AAGCATCCACACAGAG|||UR:Z:CACCCCGTTCTT   0   chr11   35139165    255 26S65M  *   0   0   GCAGTGGTATCAACGCAGAGTACATGGGGAGCCTCATTGCCCAGCGGACCCCAGCCTCTGCCAGGTTCGGTCCGCCATCCTCGTCCCGTCC FFFFF:FFFFFF:FFFFFFFFFF,FFFFFFFFF:FFFFFFFFF,FFFF:FFF,FFFFF:FFF:FFFFFFFFFFFFFFFFFFFF:FFFFFFF NH:i:1  HI:i:1  AS:i:61 nM:i:1\n\n# Convert format alignment records from SAM to BAM\n$ PISA sam2bam aln.sam.gz -o aln.bam\nRaw reads,825\nMapped reads,820 (99.39%)\nPlus strand,820\nMinus strand,0\nMitochondria ratio,0.00%\n[2022-04-22 12:26:31] Real time: 0.005 sec; CPU: 0.009 sec; Peak RSS: 0.010 GB.\n\n$ samtools view aln.bam|head -n 1\nA00984:220:HNJ7KDRXX:1:1118:2510:4586   0   chr11   35139165    255 26S65M  *   0   0   GCAGTGGTATCAACGCAGAGTACATGGGGAGCCTCATTGCCCAGCGGACCCCAGCCTCTGCCAGGTTCGGTCCGCCATCCTCGTCCCGTCC FFFFF:FFFFFF:FFFFFFFFFF,FFFFFFFFF:FFFFFFFFF,FFFF:FFF,FFFFF:FFF:FFFFFFFFFFFFFFFFFFFF:FFFFFFF NH:i:1  HI:i:1  AS:i:61 nM:i:1  CR:Z:AAGCATCCACACAGAG   CB:Z:AAGCATCCACACAGAG   UR:Z:CACCCCGTTCTT\n\n# Annotate gene names for BAM\n$ PISA anno -gtf ./demo.gtf.gz aln.bam -o anno_gtf.bam\n[2022-04-22 12:28:38] GTF loading..\n[2022-04-22 12:28:38] Load 2 genes.\n[2022-04-22 12:28:38] Load time : 0.003 sec\nReads Mapped to Genome (Map Quality &gt;= 0),99.4%\nReads Mapped to Exonic Regions,99.3%\nReads Mapped to Intronic Regions,0.0%\nReads Mapped to both Exonic and Intronic Regions,0.7%\nReads Mapped Antisense to Gene,0.0%\nReads Mapped to Intergenic Regions,0.0%\nReads Mapped to Gene but Failed to Interpret Type,0.0%\n[2022-04-22 12:28:38] Real time: 0.026 sec; CPU: 0.086 sec; Speed : 9528 records/sec; Peak RSS: 0.034 GB.\n\n# Correct UMIs amongst other UMIs from the same cell and mapped to the same gene, and create new tag UB for corrected UMIs\n$ PISA corr -tag UR -new-tag UB -tags-block CB,GN anno_gtf.bam -o corr.bam\n[2022-04-22 12:36:21] Building index ..\n[2022-04-22 12:36:21] Build time : 0.002 sec\n[2022-04-22 12:36:21] Real time: 0.077 sec; CPU: 0.085 sec\n\n$ samtools view corr.bam|head -n 1\nA00984:220:HNJ7KDRXX:1:1118:2510:4586   0   chr11   35139165    255 26S65M  *   0   0   GCAGTGGTATCAACGCAGAGTACATGGGGAGCCTCATTGCCCAGCGGACCCCAGCCTCTGCCAGGTTCGGTCCGCCATCCTCGTCCCGTCC FFFFF:FFFFFF:FFFFFFFFFF,FFFFFFFFF:FFFFFFFFF,FFFF:FFF,FFFFF:FFF:FFFFFFFFFFFFFFFFFFFF:FFFFFFF NH:i:1  HI:i:1  AS:i:61 nM:i:1  CR:Z:AAGCATCCACACAGAG   CB:Z:AAGCATCCACACAGAG   UR:Z:CACCCCGTTCTT   RE:A:E  GX:Z:ENSG00000026508.18 GN:Z:CD44   TX:Z:ENST00000263398.10,ENST00000428726.7,ENST00000526025.2 UB:Z:CACCCCGTTCTT\n\n# Count gene X cell features\n$ mkdir exp\n\n$ PISA count  -cb CB -anno-tag GN -outdir exp -umi UB corr.bam \n[2022-04-22 12:38:44] Real time: 0.033 sec; CPU: 0.013 sec; Peak RSS: 0.010 GB.\n\n# Gene expression matrix generated in the Market Exchange format \n$ ls exp/\nbarcodes.tsv.gz  features.tsv.gz  matrix.mtx.gz\n\n# Not just gene features, we can also annotate variants and functional regions to reads\n$ PISA anno -bed peaks.bed -tag PK -vcf var.vcf.gz -vtag VR  corr.bam -o anno_vcf_bed.bam    \nReads Mapped to Genome (Map Quality &gt;= 0),99.4%\nReads Mapped to BED regions / Peaks,0.0%\n[2022-04-22 12:43:01] Real time: 0.027 sec; CPU: 0.090 sec; Speed : 9085 records/sec; Peak RSS: 0.034 GB.\n\n$ samtools view anno_vcf_bed.bam|grep \"VR:Z\"|grep \"PK:Z\"|head -n 1\nA00984:220:HNJ7KDRXX:1:2266:27597:30843 0   chr11   35229688    255 91M *   0   0   CCCAGGGTTAATAGGGCCTGGTCCCTGGGAGGAAATTTGAATGGGTCCATTTTGCCCTTCCATAGCCTAATCCCGGGGCATTGTTTTCCAC\nFFFF,FFFFFFFFFF,FFFFFFF:,:FFFFFF,FF:FFFFFFFFFFF:,,:F:F:F,F:F:F,FFFF,F:FFFF,FF,FF:FFFFFFF:F: NH:i:1  HI:i:1  AS:i:85 nM:i:2  CR:Z:ATTGTTCCAAGTCCCG   CB:Z:ATTGTTCCAAGTCCCG   UR:Z:TCTTTAAGTCAG   RE:A:E  GX:Z:ENSG00000026508.18 GN:Z:CD44   TX:Z:ENST00000263398.10,ENST00000428726.7,ENST00000425428.6,ENST00000433892.6,ENST00000525469.1 UB:Z:TCTTTAAGTCAG   PK:Z:demo_peak_14a;demo_peak_14b    VR:Z:chr11:35229771C&gt;T\n\n# Summarize the reads, UMIs, genes, peaks, and variants per cell\n$ PISA attrcnt -cb CB -tags UB,GN,PK,VR anno_vcf_bed.bam -dedup |head -n 5\nBARCODE Raw UB  GN  PK  VR\nAAGCATCCACACAGAG    503 132 1   15  1\nATTGTTCCAAGTCCCG    533 124 1   13  1\nAAGCATCCACACNGAG    3   1   1   1   0\nAAGCNTCCACACAGAG    3   1   1   1   0\n\n# Deduplicate BAM file for each cell\n$ PISA rmdup -tags CB corr.bam -o rmdup.bam -nw \n[2022-04-22 12:59:39] Deduplicating chr11\n[2022-04-22 12:59:39] All reads,820\n[2022-04-22 12:59:39] Duplicate reads,125\n[2022-04-22 12:59:39] Duplicate ratio,0.1524\n[2022-04-22 12:59:39] Real time: 0.008 sec; CPU: 0.015 sec; Peak RSS: 0.010 GB.\n\n# Deduplicate BAM file for each molecular\n$ PISA rmdup -tags CB,UR corr.bam -o rmdup1.bam -nw\n[2022-04-22 13:00:35] Deduplicating chr11\n[2022-04-22 13:00:35] All reads,820\n[2022-04-22 13:00:35] Duplicate reads,0\n[2022-04-22 13:00:35] Duplicate ratio,0.0000\n[2022-04-22 13:00:35] Real time: 0.009 sec; CPU: 0.015 sec; Peak RSS: 0.011 GB.\n\n# Select all reads annotated to gene CD44\n# Generate a gene candidate list\n$  echo \"CD44\" &gt; gene.txt\n\n$ PISA pick -tags GN -list gene.txt anno_vcf_bed.bam  -o picked.bam\n[2022-04-22 13:03:01] Real time: 0.009 sec; CPU: 0.016 sec\n\n# Select reads with more features\n$ awk '{printf(\"%s\\tCD44\\n\", $1)}' barcodes.txt &gt; candidates.txt\n\n$ cat candidates.txt \nAAGCATCCACACAGAG    CD44\nATTGTTCCAAGTCCCG    CD44\nGCACATAGTCAGTTTG    CD44\n\n$ PISA pick -tags CB,GN -list candidates.txt anno_vcf_bed.bam -o picked.bam \n[2022-04-22 13:09:28] Real time: 0.007 sec; CPU: 0.013 sec\n\n# Convert BAM to FASTQ+\n$ PISA bam2fq -tags CB,GN picked.bam -o pick.fq\n\n$ head -n 4 pick.fq \n@A00984:220:HNJ7KDRXX:1:1118:2510:4586|||CB:Z:AAGCATCCACACAGAG|||GN:Z:CD44\nGCAGTGGTATCAACGCAGAGTACATGGGGAGCCTCATTGCCCAGCGGACCCCAGCCTCTGCCAGGTTCGGTCCGCCATCCTCGTCCCGTCC\n+\nFFFFF:FFFFFF:FFFFFFFFFF,FFFFFFFFF:FFFFFFFFF,FFFF:FFF,FFFFF:FFF:FFFFFFFFFFFFFFFFFFFF:FFFFFFF\n\n# Sort FASTQ+ reads by CB and GN\n$ PISA fsort -tags CB,GN pick.fq -o fsort.fq.gz\n[2022-04-22 13:22:50] Write 795 records to fsort.fq.gz.0000.bgz.\n[2022-04-22 13:22:50] Unlink fsort.fq.gz.0000.bgz\n[2022-04-22 13:22:50] Create fsort.fq.gz from 1 files.\n[2022-04-22 13:22:50] Real time: 0.021 sec; CPU: 0.020 sec\n\n$ zcat fsort.fq.gz|head -n 8\n@A00984:220:HNJ7KDRXX:1:1118:2510:4586|||CB:Z:AAGCATCCACACAGAG|||GN:Z:CD44\nGCAGTGGTATCAACGCAGAGTACATGGGGAGCCTCATTGCCCAGCGGACCCCAGCCTCTGCCAGGTTCGGTCCGCCATCCTCGTCCCGTCC\n+\nFFFFF:FFFFFF:FFFFFFFFFF,FFFFFFFFF:FFFFFFFFF,FFFF:FFF,FFFFF:FFF:FFFFFFFFFFFFFFFFFFFF:FFFFFFF\n@A00984:220:HNJ7KDRXX:1:2143:21640:21496|||CB:Z:AAGCATCCACACAGAG|||GN:Z:CD44\nCCTGCCCCGCGCCCAGAGATCCTCCAGCTCCTTTCGCCCGCGCCCTACGTTCGCTCCGGACACCATGGACAAGTATTGGTGGAACACAGCC\n+\n,,FFFFFFFF,F,,:F,F,F:FFF,FFFFFF,F::F,FF,F:FF:,,FF:FFF,:FFFF:FFF,::FFFF,F:F,FFFF,,F,FFF,F,::\n\n# Assembly reads mapped to CD44 of the same cell into contigs\n# This step requires Trinity software and seqtk already installed in your environment\n$ PISA stream -tags CB,GN -script 'Trinity --seqType fq --SS_lib_type F --single ${FQ} --max_memory 1G 2&gt;/dev/null 1&gt;/dev/null; seqtk rename trinity_out_dir.Trinity.fasta ${UBI}_ 2&gt;/dev/null' -t 10 -fa  -nw ./fsort.fq.gz -o assem.fa\n[2022-04-22 13:24:21] Real time: 5.607 sec; CPU: 0.010 sec; Peak RSS: 0.010 GB.\n\n$ seqtk seq assem.fa -l 100 |head \n&gt;Z_AAGCATCCACACAGAG_Z_CD44_1|||CB:Z:AAGCATCCACACAGAG|||GN:Z:CD44 len=439 path=[0:0-438]\nGAAATTAGGGCCCAATTAATAATCAGCAAGAATTTGATCGTTCCAGTTCCCACTTGGAGGCCTTTCATCCCTCGGGTGTGCTATGGATGGCTTCTAACAA\nAAACTACACATATGTATTCCTGATCGCCAACCTTTCCCCCACCAGCTAAGGACATTTCCCAGGGTTAATAGGGCCTGGTCCCTGGGAGGAAATTTGAATG\nGGTCCATTTTGCCCTTCCATAGCCTAATCCCTGGGCATTGTTTTCCACTGAGGTTGGGGGTTGGGGTGTACTAGTTACACATCTTCAACAGACCCCCTCT\nAGAAATTTTTCAGATGCTTCTGGGAGACACCCAAAGGGTGAAGCTATTTATCTGTAGTAAACTATTTATCTGTGTTTTTGAAATATTAAACCCTGGATCA\nGTCCTTTGATCAGTATAATTTTTTAAAGTTACTTTGTCA\n&gt;Z_AAGCATCCACACAGAG_Z_CD44_2|||CB:Z:AAGCATCCACACAGAG|||GN:Z:CD44 len=384 path=[0:0-383]\nCCTGGTAGAATTGGCTTTTCTAGCAGAACCTTTCCAAAAGTTTTATATTGAGATTCATAACAACACCAAGAATTGATTTTGTAGCCAACATTCATTCAAT\nACTGTTATATCAGAGGAGTAGGAGAGAGGAAACATTTGACTTATCTGGAAAAGCAAAATGTACTTAAGAATAAGAATAACATGGTCCATTCACCTTTATG\nTTATAGATATGTCTTTGTGTAAATCATTTGTTTTGAGTTTTCAAAGAATAGCCCATTGTTCATTCTTGTGCTGTACAATGACCACTGTTATTGTTACTTT\n\n# Align assembled reads to reference and convert to BAM file\n# Here I use minimap2 for simplicity\n$ minimap2 -x splice -a ~/Documents/datasets/GRCh38/fasta/genome.fasta assem.fa 1&gt; asm_aln.sam\n[M::mm_idx_gen::50.495*1.81] collected minimizers\n[M::mm_idx_gen::71.980*2.16] sorted minimizers\n[M::main::71.980*2.16] loaded/built the index for 194 target sequence(s)\n[M::mm_mapopt_update::75.057*2.11] mid_occ = 767\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 194\n[M::mm_idx_stat::77.004*2.09] distinct minimizers: 167225302 (35.42% are singletons); average occurrences: 6.036; average spacing: 3.071; total length: 3099750718\n[M::worker_pipeline::77.010*2.09] mapped 13 sequences\n[M::main] Version: 2.21-r1071\n[M::main] CMD: minimap2 -x splice -a /home/shiquan/Documents/datasets/GRCh38/fasta/genome.fasta assem.fa\n[M::main] Real time: 77.358 sec; CPU: 161.000 sec; Peak RSS: 18.519 GB\n\n$ PISA sam2bam asm_aln.sam -o asm_aln.bam\nRaw reads,13\nMapped reads,13 (100.00%)\nPlus strand,13\nMinus strand,0\nMitochondria ratio,0.00%\n[2022-04-22 13:30:20] Real time: 0.001 sec; CPU: 0.006 sec; Peak RSS: 0.010 GB.\n\n$ samtools view asm_aln.bam|head -n 1\nZ_AAGCATCCACACAGAG_Z_CD44_1 0   chr11   35229531    60  439M    *   0   0   GAAATTAGGGCCCAATTAATAATCAGCAAGAATTTGATCGTTCCAGTTCCCACTTGGAGGCCTTTCATCCCTCGGGTGTGCTATGGATGGCTTCTAACAA\nAAACTACACATATGTATTCCTGATCGCCAACCTTTCCCCCACCAGCTAAGGACATTTCCCAGGGTTAATAGGGCCTGGTCCCTGGGAGGAAATTTGAATG\nGGTCCATTTTGCCCTTCCATAGCCTAATCCCTGGGCATTGTTTTCCACTGAGGTTGGGGGTTGGGGTGTACTAGTTACACATCTTCAACAGACCCCCTCT\nAGAAATTTTTCAGATGCTTCTGGGAGACACCCAAAGGGTGAAGCTATTTATCTGTAGTAAACTATTTATCTGTGTTTTTGAAATATTAAACCCTGGATCA\nGTCCTTTGATCAGTATAATTTTTTAAAGTTACTTTGTCA *   NM:i:1  ms:i:436    AS:i:436    nn:i:0  tp:A:P  cm:i:137    s1:i:430    s2:i:0  de:f:0.0023 rl:i:0  CB:Z:AAGCATCCACACAGAG   GN:Z:CD44"
  },
  {
    "objectID": "PISA.html#list-of-commands",
    "href": "PISA.html#list-of-commands",
    "title": "PISA User Guide",
    "section": "List of commands",
    "text": "List of commands\n\n\n\n\n\n\n\nTool\nDescription\n\n\n\n\n\nThe following tools are used to process FASTQ/FASTQ+ files.\n\n\nparse\nParse barcodes from FASTQ reads to FASTQ+.\n\n\nfsort\nSort FASTQ+ records by barcodes.\n\n\nstream\nPerform user-defined process for each read block.\n\n\naddtags\nAdd tag string to FASTQ reads.\n\n\n\nThe following tools are used to process BAM files.\n\n\nsam2bam\nParse FASTQ+ read name and convert SAM to BAM.\n\n\nrmdup\nRemove PCR duplicates per molecular.\n\n\npick\nPick alignments with tags.\n\n\nanno\nAnnotate functional regions or gene names.\n\n\ncorr\nCorrect error prone UMIs. 1 mismatch considered.\n\n\nattrcnt\nCount raw reads and tag values per cell.\n\n\nextract\nExtract tag value from BAM.\n\n\ncount\nCount feature X cell matrix from BAMs.\n\n\nbam2fq\nConvert BAM to FASTQ+ file with selected tags.\n\n\nbam2frag\nGenerate fragment file.\n\n\ndepth\nCoverage depth/UMI for target regions.\n\n\naddtags\nAdd tag string to BAM alignments.\n\n\ncallept\nCall expressed peak tags (EPTs) for RNA library.\n\n\n\nThe following tool used to process fragment file.\n\n\ncount2\nCount peak X cell matrix from fragment file.\n\n\n\nThe following tools used to process BED files.\n\n\nmergebed\nMerge BED files.\n\n\nannobed\nAnnotate BED files with genes and functional elements.\n\n\nflatten\nFlatten overlapped regions to nonoverlaps.\n\n\n\nThe following tools used to process GTF files.\n\n\ngtffmt\nFormat and reorder GTF file.\n\n\ngtf2bed\nConvert GTF to BED."
  },
  {
    "objectID": "PISA.html#commands-and-options",
    "href": "PISA.html#commands-and-options",
    "title": "PISA User Guide",
    "section": "Commands and options",
    "text": "Commands and options\n\nCommon options for all tools\n\n\n-h\n\n\nHelp information\n\n\n-o FILE\n\n\nOutput file.\n\n\n-tags tag(s)\n\n\nBarcode tags to group reads, usually be cell barcode tag.\n\n\n-umi tag\n\n\nUMI tag.\n\n\n-t/-@ number\n\n\nMultithreads to process data.\n\n\n-report FILE.csv\n\n\nSummary report in csv format.\n\n\n\n\nparse\nThe parse tool is specifically designed to convert FASTQ files into the extended FASTQ+ format. It utilizes the -rule option to define the library structure, accommodating various sequencing setups. For ease of use, this tool has included predefined common library structures in the release; these can be applied using the -x option. This tool is optimized for speed and supports the correction of barcodes that have up to one mismatch.\n# Parse cell barcode and UMI string from raw FASTQ.\n\n$ PISA parse -rule CB,R1:1-10,whitelist.txt,CB,1;R1,R1:11-60;R2,R2 -report fastq.csv lane1_1.fq.gz,lane02_1.fq.gz lane1_2.fq.gz,lane2_2.fq.gz\n\nOptions :\n -1       [fastq]   Read 1 output.\n -2       [fastq]   Read 2 output.\n -rule    [STRING]  Read structure in line. See Notice.\n -p                 Read 1 and read 2 interleaved in the input file.\n -q       [INT]     Drop reads if average sequencing quality below this value.\n -dropN             Drop reads if N base in sequence or barcode.\n -report  [csv]     Summary report.\n -t       [INT]     Threads. [4]\n -order             Keep input order.\n -x                 Predefined code for specific library.\n          * C4      Library structure for DNBelab C4 RNA kit v1.\nNotice :\n * -rule accept tag rule STRING to parse input fastq following format \"TAG,location,whitelist,corrected TAG,allow mismatch\".\n   For each tag rule, location part should be format like R[12]:start-end. Both start and end location start from 1.\n   TAG and locaion parts are mandatory, and whitelist, corrected TAG and mismatch are optional.\n   Futhermore, multiply tags seperated by ';'. In location part, R1 stands for raw read 1, R2 stands for raw read 2.\n   In tag part, R1 stands for output read 1 while R2 stands for output read 2. Here are some examples.\n\n$ PISA parse -rule 'CR,R1:1-18,barcodes.txt,CB,1;UR,R1:19-30;R1,R2:1-100' -1 read_1.fq raw_read_1.fq raw_read_2.fq\n\n# CR,R1:1-18,barcodes.txt,CB,1  - CR tag start from 1 to 18 in read 1, and barcodes.txt are barcode whitelist,\n#   each barcode per line. Cell barcode will be corrected while hamming distance &lt;= 1.\n#   Corrected cell barcode tag is CB. \n# UR,R1:19-30 - UR tag start from 19-30 in read 1.\n# R1,R2:1-100 - Sequence from 1 to 100 in read 2 output to read 1 file. \n\n$ PISA parse -rule 'CR,R1:1-10,bc1.txt,CB,1;CR,R1:11-20,bc2.txt,CB,1;R1,R2:1-100' -1 read_1.fq raw_read_1.fq raw_read_2.fq\n\n# CR,R1:1-10,bc1.txt,CB,1;CR,R1:11-20,bc2.txt,CB,1 - This cell barcode consist of two segments, first segment start\n#   from 1 to 10 in read 1, and whitelist is bc1.txt, and second segment start from 11 to 20, and whitelist is bc2.txt.\n#   These two segments will be combined after correction, because the corrected tag are the same.\nOption -report can specify a quality control report in CSV format. Here is the explanation of each term in this file.\n\n\n\n\n\n\n\n\nTerms\nDescription\n\n\n\n\nNumber of Fragments\nThe number of records in the FASTQ(s). For paired reads, each pair only count once.\n\n\nFragments pass QC\nReads or paired reads pass QC.\n\n\nFragments with Exactly Matched Barcodes\nBarcodes exactly matched with any barcode in the candidate list.\n\n\nFragments with Failed Barcodes\nNo barcode found in the candidate list with similar search.\n\n\n\n\n\n\nfsort\nThe fsort tool is engineered to order FASTQ+ records based on specified tags, which can be defined using the -tags option. This tool efficiently handles file sorting: for files smaller than 1 gigabyte, it performs the sort directly. However, for larger FASTQ files, where caching the entire file in memory is impractical, fsort employs a different strategy. It splits the large file into smaller segments, sorts each segment individually, and then merges the sorted segments. This method ensures efficient handling of large datasets while maintaining the integrity and order of the FASTQ+ records.\n# Sort reads by tags.\n\n$ PISA fsort -tags CB,UR -list cell_barcodes_top10K.txt -@ 5 -o sorted.fq.gz in.fq\n\nOptions:\n -tags    [TAGS]     Tags, such as CB,UR. Order of these tags is sensitive.\n -@       [INT]      Threads to compress file.\n -o       [fq.gz]    bgzipped output fastq file.\n -m       [mem]      Memory per thread. [1G]\n -p                  Input fastq is smart pairing.\n -T       [prefix]   Write temporary files to PREFIX.nnnn.tmp\n\n\nstream\nThe stream tool is designed as a framework to process FASTQ+ files, where each FASTQ+ block—defined by having identical tags and grouped together in the file—is handled individually. The -script option allows users to specify a custom bash script that processes each block. This user-defined script reads a ‘small’ FASTQ+ file, generating FASTQ or FASTA output that is then sent to stdout. The stream tool captures this output via a pipe and updates the tags to ensure that each block of reads retains its original tags. Finally, it consolidates all outputs into a single file. In essence, this tool efficiently divides and processes each FASTQ+ block through a user-defined method, then seamlessly merges the results.\n# Perform user-defined script for each FASTQ+ block.\n\n$ PISA stream -script run.sh reads.fq.gz\n\nOptions :\n -tags    [TAGS]     Tags to define read blocks.\n -script  [FILE]     User defined bash script, process $FQ and generate results to stdout.\n -min     [INT]      Mininal reads per block to process.  [2]\n -keep               Output unprocessed FASTQ+ records.\n -fa                 Stream FASTQ output instead of FASTQ.\n -tmpdir\n -t                  Threads.\n -o       [FILE]     Path to output file.\n -nw                 Disable warning messages.\n\nWrite a script for PISA stream\nThe PISA stream tool generates a temporary file named _block.fq for each block of reads, storing this file in a designated temporary directory. The path to this file is set in the environment variable ${FQ} for accessibility by subprocesses. Additionally, to ensure the uniqueness of each block, an alias named the ‘unique block index’ is exported to the environment as ${UBI}.\nThe following example script demonstrates how to convert FASTQ+ to FASTA and rename the sequence ID. It is crucial for users to ensure that the script’s final output (either FASTQ+ or FASTA) is directed to stdout. All other script steps should avoid producing output to stdout or stderr, except for the last step. This precaution is necessary because PISA captures the script’s output through a pipe, and any unintended characters could disrupt the data format. Scripts can be written in a bash file or specified inline within the command.\n\n$ cat run.sh\nseqtk rename ${FQ} &gt; test.fa; seqtk rename test.fa ${UBI}\n\n\n\n\naddtags\nThe addtags tool is designed to put the new tags or update tags for FASTQ+ or BAM files.\n# Just add tags to reads.\n\n$ PISA addtags -str CB:Z:CELL1,LB:Z:PoII2 -o out.bam in.bam\n$ PISA addtags -str CB:Z:CELL1,LB:Z:PoII2 -o out.fastq in.fastq\n\nOptions:\n-o    [FILE]    Output file, bam or fastq, depends on input format\n-str  [string]  TAGs.\n-@    [INT]     Threads to pack file.\n-mapq [INT]     Mapping quality score to filter mapped reads.\n\n\nsam2bam\nAfter alignment, the sequence ID from the FASTQ+ records is retained in the RNAME field of the SAM file. Given that the RNAME field is limited to 254 characters, we also restrict the sequence ID and any optional tag fields in FASTQ+ to this length to ensure compatibility. The sam2bam tool processes these details by parsing the tags from the RNAME and appending them to the end of the SAM optional fields.\n# Parse FASTQ+ read name and convert SAM to BAM.\n\n$ PISA sam2bam -report alignment.csv -@ 5 -adjust-mapq -gtf genes.gtf -o aln.bam in.sam[.gz]\n\nOptions :\n -o       [BAM]       Output file [stdout].\n -t       [INT]       Work threads.\n -mito    [string]    Mitochondria name. Used to stat ratio of mitochondria reads.\n -maln    [BAM]       Export mitochondria reads into this file instead of standard output file.\n -@       [INT]       Threads to compress bam file.\n -report  [csv]       Alignment report.\n\nNote :\n* Reads map to multiple loci usually be marked as low quality and filtered at downstream analysis.\n  But for RNAseq library, if reads map to an exonic locus but also align to 1 or more non-exonic loci,\n  the exonic locus can be prioritized as primary alignments, and mapping quality adjusts to 255. Tag\n  MM:i:1 will also be added for this record. Following options used to adjust mapping quality.\n* Input SAM need be sorted by read name, and aligner should output all hits of a read in this SAM.\n -adjust-mapq         Enable adjusts mapping quality score.\n -gtf     [GTF]       GTF annotation file. This file is required to check the exonic regions.\n -qual    [255]       Updated quality score.\nOption -t is to set the threads to parse the SAM records. The -@ option is to set the threads to compress alignments in BGZF format. The default compress level of BGZF is 6 in the htslib, but here PISA has reset this value to 2 to decrease the CPU times. It’s not a good design to have both -t and -@, but will require a lot work to redesign the multithreads strategy, I have put this work in my todo list.\nOption -report can specify a quality control report in CSV format. Here is the explanation of each term in this file.\n\n\n\n\n\n\n\n\nTerms\nDescription\n\n\n\n\nRaw reads\nRaw reads in the BAM files, secondary alignment will be skipped.\n\n\nMapped reads\nReads mapped to reference, and the ratio of raw reads.\n\n\nPlus strand\nReads mapped to forward strand of reference.\n\n\nMinus strand\nReads mapped to backward strand of reference.\n\n\nMitochondria ratio\nRatio of reads mapped to chromosome mitochondria. The default mito name is “chrM”, user should change it by -mito option if reference is different. Otherwise this value will always be 0.\n\n\n\n\n\nMapQ adjust method\nFor RNA libraries, if a read from cDNA maps to an exonic locus but also maps to one or more non-exonic regions, the exonic locus can be prioritized as primary alignments, and mapping quality adjusts to 255. In the below records below, read DP8400008965TLL1C001R0102043364 mapped to three loci, and the aligner random pick one as the primary alignment and others as secondary. Each of these alignments has low mapping quality (MAPQ == 2, is usually filtered at downstream analysis). Our adjustment method will check if only one of these alignments overlaps with exonic regions. In our example, the last alignment overlapped with gene EEF1A1, and the other two hit intergenic regions. After adjustment, the last record has been flagged as a primary hit, and the mapping quality adjusted to 255, and other alignments of the same read are updated as secondary, MAPQ adjust to 0. MM:i:1 tag also is added to the primary record after adjustment. Option -adjust-mapq is reimplemented to mirror the 10X CellRanger’s MAPQ adjustment method (https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/algorithms/overview#alignment).\n#  Output by aligner:\n \nDP8400008965TLL1C001R0102043364 0   9   133020979   2   100M    *   0   0   GTTAATGATAACAATGCATCGTAAAACCTTCAGAAGGAAAGGAGAATGTTTTGTGGACCACTTTGGTTTTCTTGTTTGCGTGTGGCAGTTTTAAGTTTTT    ...\nDP8400008965TLL1C001R0102043364 272 7   22510408    2   100M    *   0   0   AAAAACTTAAAACTGCCACACGCAAACAAGAAAACCAAAGTGGTCCACAAAACATTCTCCTTTCCTTCTGAAGGTTTTACGATGCATTGTTATCATTAAC    ...\nDP8400008965TLL1C001R0102043364 272 6   73517606    2   100M    *   0   0   AAAAACTTAAAACTGCCACACGCAAACAAGAAAACCAAAGTGGTCCACAAAACATTCTCCTTTCCTTCTGAAGGTTTTACGATGCATTGTTATCATTAAC    ...\n\n# After adjustment (Seq and Qual in secondary alignments masked as *):\n\nDP8400008965TLL1C001R0102043364 256 9   133020979   0   100M    *   0   0   *   ...\nDP8400008965TLL1C001R0102043364 272 7   22510408    0   100M    *   0   0   *   ...\nDP8400008965TLL1C001R0102043364 16  6   73517606    255 100M    *   0   0   AAAAACTTAAAACTGCCACACGCAAACAAGAAAACCAAAGTGGTCCACAAAACATTCTCCTTTCCTTCTGAAGGTTTTACGATGCATTGTTATCATTAAC    ... MM:i:1\nAn example list here to show how to enable mapq adjuestment.\nPISA sam2bam -report alignment.csv -o out.bam -adjust-mapq -gtf hg38.gtf in.sam\n\n\n\nrmdup\nTo effectively manage PCR duplication in single-cell experiments, it is essential to consider both cell and molecular barcodes. During the feature counting stage facilitated by PISA count, deduplication is efficiently handled by relying solely on unique UMIs. This reliance makes traditional PCR deduplication unnecessary for libraries that use UMIs. Nonetheless, producing a deduplicated BAM file remains beneficial for other analytical processes, such as variant calling, or simply to reduce file size.\nThe rmdup tool is specifically designed to remove duplicate reads that share identical barcodes, such as UMIs and cell barcodes. This selective deduplication approach ensures that only truly redundant data is removed, thus preserving the integrity and completeness of the dataset for comprehensive downstream analyses.\n# Deduplicate PCR reads with same barcodes.\n\n$ PISA rmdup -tags CB,UR -o rmdup.bam in.bam\n\nOptions :\n   -tags  [TAGS]       Barcode tags to group reads.\n   -@     [INT]        Threads to unpack BAM.\n   -o     [BAM]        Output bam.\n   -q     [INT]        Map Quality Score cutoff.\n   -k                  Keep duplicates, make flag instead of remove them.\n   -nw                 Disable warnings.\nIn this version, PISA rmdup only supports single-end reads. For paired-end reads, such as scATAC data, PCR deduplication can be performed by the PISA bam2frag tool.\n\n\npick\nThe PISA pick tool is designed to select alignments with predefined tags and candidate values.\n$ PISA pick -tags CB,GN -list cell_barcodes.txt in.bam\n\nOptions :\n -tags    [TAGS]       Barcode tags.\n -list    [FILE]       Barcode white list, tag values in related column will be apply.\n -o       [BAM]        Output file.\n -q       [INT]        Map Quality Score cutoff.\n -@       [INT]        Threads to unpack BAM.\nDepending on the number of tags specified by the user, the candidate list for tags can consist of either a single column or multiple columns. If multiple tags are specified but only one column is present in the list, the program will primarily compare the value of the first tag in the alignments with the list.\n\n\nanno\nConnecting alignment results with genomic features is essential in single-cell data analysis. PISA categorizes features into three main types: gene annotation, functional regions, and genetic or sequence variations. For gene annotation, the PISA anno tool efficiently organizes all exons, transcripts, and genes from a GTF database into a sorted hierarchical tree structure.\nBased on their alignment status, reads are then classified into one of nine distinct types, see illustrate below Figure 1. This detailed categorization helps in accurately assessing the transcriptional landscape and understanding the complex genomic architecture within single-cell datasets.\n\n\n\nFigure 1: Read types.\n\n\n\n# annotate strand-specific reads\n$ PISA anno -gtf genes.gtf -o anno.bam in.bam\n\n# annotate non-strand-specific reads, for Smartseq or bulk RNAseq\n$ PISA anno -is -gtf genes.gtf -o anno.bam in.bam\n\n# also label gene name for intronic reads, i.e. RNA velocity analysis\n$ PISA anno -velo -gtf genes.gtf -o anno.bam in.bam\n\n\n# annotate exon, junction, and exon skipped reads\n$ PISA anno -exon -psi -gtf genes.gtf -o anno.bam in.bam\n\n# annotate expressed peaks\n$ PISA anno -bed peak.bed -o anno.bam in.bam\n\n# annotate genetic variants (both reference allele and alternative allele) \n$ PISA anno  -vcf in.vcf.gz -ref-alt -o anno.bam in.bam\nBesides these annotation methods, PISA anno also supports a -chr-species method. This method requires a binding list for chromosome and related label relationships. The software will check the chromosome and add the related tag for each chromosome. This method, combined with PISA attrcnt can help to summarize the mixed two cell lines from different species.\n# A binding list is tab-separated two columns txt file.\n$ cat binding_list.txt\nGRCh38_chr1    Human\nGRCh38_chr21   Human\nmm10_chr21     Mouse\n\n$ PISA anno -chr-species binding.txt -btag SP -o anno_species.bam sorted.bam\nThe full options and descriptions list below.\n# Annotate SAM/BAM records with overlapped function regions. Such as gene, transcript etc.\n\n$ PISA anno -bed peak.bed -tag PK -vcf in.vcf.gz -vtag VF -vcf-ss -ref-alt -o anno.bam in.bam\n$ PISA anno -gtf genes.gtf -o anno.bam in.bam\n$ PISA anno -gtf genes.gtf -o anno.bam -sam in.sam\n\nOptions :\n -o        [BAM]       Output bam file.\n -report   [csv]       Summary report.\n -@        [INT]       Threads to compress bam file.\n -q        [0]         Map Quality Score cutoff. MapQ smaller than this value will not be annotated.\n -t        [INT]       Threads to annotate.\n -chunk    [INT]       Chunk size per thread.\n -anno-only            Export annotated reads only.\n -sam                  Input is SAM file, parse tags from read name.\n -rev                  Annotation in reverse strand; Some probe ligation library for FFPE samples create reverse fragments.\n -is                   Disable strand sensitive annotation of gene, genomic region and genetic variants.\n\nOptions for BED file :\n -bed      [BED]       Function regions. Three or four columns bed file. Col 4 could be empty or names of this region.\n -tag      [TAG]       Attribute tag name. Set with -bed. Default is PK.\n\nOptions for mixed samples.\n -chr-species  [FILE]  Chromosome name and related species binding list.\n -btag     [TAG]       Species tag name. Set with -chr-species. Default is SP.\n\nOptions for GTF file :\n -gtf      [GTF]       GTF annotation file. gene_id,transcript_id is required for each record.\n -tags     [TAGs]      Attribute names, more details see `Notice` below. [TX,GN,GX,RE,EX,JC]\n -splice               Reads covered exon-intron edge (ExonIntron type) will also be annotated with all tags.\n -intron/-velo         Reads covered intron regions will also be annotated with all tags.\n -exon                 Generate exon level and junction annotation. Put exon name (chr:start-end/[[+-]/Gene) in EX tag.\\ \n                       Also generate junction name (chr:exon1_end-exon2_start/[+-]/Gene) in JC tag.\n -flatten              Split overlapped exons into nonoverlapped bins.\n -psi                  Annotate exclude reads tag (ER) for each exon.\n\n -tss                  Annotate reads start from TSS, designed for capped library. **experiment**\n -ctag     [TAG]       Tag name for TSS annotation. Need set with -tss.\n\nOptions for VCF file :\n -vcf      [VCF/BCF]   Varaints file in vcf or bcf format. In default, only annotate alternative alleles.\n -vtag     [TAG]       Tag name for variants. Set with -vcf. Default is VR.\n -ref-alt              Annotate ref allele.\n\nNotice :\n * If input is SAM format, will try to parse the tags in the read name.\n * For GTF mode, this program will set tags in default, you could also reset them by -tags.\n   TX : Transcript id.\n   GN : Gene name.\n   GX : Gene ID.\n   RE : Region type, E (exon), N (intron), C (exon and intron), S (junction reads cover isoforms properly), V (ambiguous reads),\n        I (intergenic), A (antisense or antisense exon), B (antisense intron), X (one or more exons are excluded in transcrpit)\n * The following tags set with -exon.\n   EX : Exon name tag.\n   JC : Isoform junction name.\n   FL : Flatten exon name. Only generate it with -flatten.\n * The following tags set with -psi.\n   ER : Excluded exons.\n * PSI = EX/(EX+ER); EX is the exon tag, which indicate include reads in exon.\n\n\ncorr\nThe diversity of UMIs of each gene in one cell is used to evaluate the gene expression level, but the error of UMI comes from sequencing or PCR may introduce bias. PISA corr is designed to correct the UMI or barcode sequence based on Hamming distance. In default, two groups of UMI from the same gene of one cell with Hamming distance equal to 1, will be considered to originate from the same transcript. The group with high frequency will be selected as a real one, and another one will be corrected to the high one.\nBecause PISA corr does not require a sorted BAM, this tool will first build a correction list by caching all the raw UMIs and barcodes and then correct them in memory. After these steps, this tool will reread the file and update these records by order. This design can avoid potential bias for the same gene from different chromosomes (i.e., the HLA genes in alternative locus). However, this design also required a lot of memory for a big BAM.\nCellRanger also introduces an algorithm to correct reads with the same UMI of one cell but mapping to more than one gene (https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/algorithms/overview). PISA implements this method but does not enable it in default. The -cr option can be used by users to enable this function. The reason for not enable it by default is PISA corr not only is used to correct UMIs, but also can be used to correct any other types of barcodes. The following example shows how to use PISA corr to correct cell barcodes for reads in the same gene.\n// Reads with same gene tag (GN) and UMI (UB) will be grouped and calculate the Hamming distance between each other. \n// Only if Hamming distance == 1 will be corrected.\nPISA corr -tag CR -new-tag CB -tags-block GN,UB -o cell_barcode_corrected.bam in.bam\nFull options of PISA corr list below.\n# Correct similar barcodes (hamming distance == 1).\n\n$ PISA corr -tag UR -new-tag UB -tags-block CB,GN -@ 5 -o corr.bam in.bam\n\nOptions :\n -o        [BAM]       Output bam.\n -tag      [TAG]       Tag to correct.\n -new-tag  [TAG]       Create a new tag for corrected barcodes.\n -tags-block  [TAGS]   Tags to define read group. For example, if set to GN (gene), reads in the same gene will be grouped together.\n -cr                   Enable CellRanger like UMI correction method. See `Examples` for details.\n -e                    Maximal hamming distance to define similar barcode, default is 1.\n -@        [INT]       Thread to compress BAM file.\n\n\nExamples :\n // Two groups of reads have same cell barcode (CB) and gene (GN) but their raw UMIs (UR) differ by only one base. The UMI of less \n // supported is corrected to the UMI with higher support. UB save the checked or corrected UMI.\n$ PISA corr -tag UR -new-tag UB -tags-block CB,GN in.bam -o corr.bam \n\n // Same with above. Besides, if two or more groups of reads have same CB and UB but different GN, the GN with the most supporting reads\n // is kept for UMI counting, and the other read groups are discarded. In case of a tie for maximal read support, all read groups are\n // discarded, as the gene cannot be confidently assigned (Cell Ranger method).\n$ PISA corr -cr -tag UR -new-tag UB -tags-block CB,GN in.bam -o corr.bam \n\n\nattrcnt\nPISA attrcnt is used to summarize the meta information of the library. We start introduce this tool with few examples.\n# Count reads per cell, -cb option is required to specify cell barcode tag\n$ PISA attrcnt -cb CB in.bam\n\n// the summary information output in tsv format\nBARCODE Raw                           // the title\nAGCTATGCTTCTAGTGTAAC-1  38            // cell barcode and raw reads per cell, separated by a tab\nGCCGCTGATCGGCCTGCACA-1  12\nGTCGCGATTCTGCTCAGAAG-1  13\nGTCAGTACCATGCTCAGAAG-1  27\nCAACTCGTCGGTTGTCTGAC-1  23\n\n# Count raw reads and reads in the peaks per cell\n$ PISA attrcnt -cb CB -tags PK             // PK tag is annotated for reads in peak\n             -o summary.tsv              // Summary file\n             example/anno/demo_1.bam \n\n$ head summary.tsv \nBARCODE Raw PK\nGGCATTATCGGCTCGGTATG    2   2\nTGAGTTGTGTATACTCCTAC    2   2\nCCGCGGCACTACACACCAGA    1   1\nATTAGTGGTCTCCTGGTCGG    1   1\nTTATTGGACCACGTTGAATA    1   1\nGGAATGCCACAAGCGCCGTA    1   1\nAGTCTATCGTGGCCTGCACA    5   5\nAGGCACACCTCGCTGAATTC    3   3\nGTCAGGATCGATAACATACG    2   2\n\n# Count UMIs per cell\n$ PISA attrcnt -cb CB -tags UB      // UB is tag of corrected UMIs\n             -dedup               // -dedup option used to remove duplication of tag values, if not set, this \n                                  // command will export reads with UB tag but not the unique UMIs per cell\n             -o summary.tsv anno.bam\n\n# Count UMIs and Genes per cell\n$ PISA attrcnt -cb CB -tags UB,GN  // GN is tag for annotated gene; -tags can accept multiple tag names, and seperated by \",\"\n             -dedup -o summary.tsv anno.bam\n\n$ head summary.tsv\nBARCODE Raw UB  GN\nAGCTATGCTTCTAGTGTAAC-1  38  35  0\nGCCGCTGATCGGCCTGCACA-1  12  12  0\nGTCGCGATTCTGCTCAGAAG-1  13  11  0\nGTCAGTACCATGCTCAGAAG-1  27  26  0\nCAACTCGTCGGTTGTCTGAC-1  23  21  0\nGGTACACCACAGTAGTTACG-1  12  10  0\nGCGCGCCGAGGGACACTCTT-1  1   1   0\nCTCTAAGCATCGAGGTTAAC-1  162 138 50\nTTCGTAGCACCGATACTAGC-1  51  48  46\nFull list of options list below.\n# Count the frequency of tag values.\n\n$ PISA attrcnt -cb CB -tags UR,GN -dedup -all-tags in.bam\n\nOptions :\n -cb       [TAG]      Cell Barcode, or other tag used for grouping reads.\n -list     [FILE]     Cell barcode white list.\n -tags     [TAGS]     Tags to count.\n -dedup               Deduplicate the atrributes in each tag.\n -all-tags            Only records with all tags be count.\n -group    [TAG]      Group tag, count all tags for each group seperately.\n -o        [FILE]     Output count table.\n -q        [INT]      Map Quality to filter bam.\n -no-header           Ignore header in the output.\n -@        [INT]      Thread to unpack bam.\n -ttag     [TAG]      Region type tag. [RE]\n -ttype               Region type used to count. Set `E,S` to count exon enclosed reads. Set `N,C` to count intron overlapped reads.\n\n\nextract\nPISA extract is designed to extract the values of tags from BAM records and generate a tab-separated file.\n# Extract tag values from alignments.\n\n$ PISA extract -tags CB,UR,GN -o tags.tsv in.bam\n\nOptions :\n -tags     [TAGS]     Tags to be extracted.\n -o        [FILE]     Output file. tsv format\n -n                   Print read name.\n -q                   Map Quality Score threshold.\n -all                 Only export if all tags have value.\n\n\ncount\nThe PISA count tool is designed to generate a counts matrix for various features or tags, traditionally outputting a gene-by-cell digit matrix. Starting with version 0.4, this tool now supports the MEX format output, which is highly recommended for use in downstream analyses due to its superior performance. It’s important to note that MEX format consists of three files, so you should use the -outdir option to specify the directory where the output files will be saved.\n# Count reads or fragments matrix for single-cell datasets.\n\n$ PISA count -cb CB -anno-tag GN -umi UB -outdir exp aln.bam\n$ PISA count [options] aln1.bam,aln2.bam\n$ PISA count -cb RG -sample-list bam_files.txt -outdir exp\n$ PISA count -tags Cx,Cy -anno-tag GN -umi UB -outdir exp -velo aln.bam\n\nOptions :\n -tags/-cb [TAGs]     A cell barcode tag or two tags of spatial coordinates for spatial data.\n -anno-tag [TAG]      Annotation tag, gene or peak.\n -genome-bin [INT]    If genome bin size set, genome bin count matrix will be generated, conflict with -anno-tag and -chr.\n -is                  Ignore strand for bin counting.\n -chr                 Count chromosome expression level, conflict with -anno-tag and -genome-bin.\n -list     [FILE]     Barcode white list, used as column names at matrix. If not set, all barcodes will be count.\n -outdir   [DIR]      Output matrix in MEX format into this folder.\n -umi      [TAG]      UMI tag. Count once if more than one record has same UMI in one gene or peak.\n -one-hit             Skip if a read hits more than 1 gene or peak.\n -q        [INT]      Minimal map quality to filter. Default is 20.\n -t        [INT]      Threads.\n -ttag     [TAG]      Region type tag. [RE]\n -velo                Generate spliced and unspliced matrix files for RNA velocity analysis.\n -ttype    [TYPE]     Region type used to count. Set `E,S` to count exon enclosed reads. Set `N,C` to count intron overlapped reads.\n -sample-list [FILE]  A list of bam files. Each path per line.\n\nOptions for Stereoseq:\n -stereoseq           Stereoseq pipeline pack UMI to hex string. Need set this option to decode UMIs.\n -spatial-bin [INT]   Bin size for spatial coordiate. Can be set if -tags specify spatial coordinates.[1]\n -dup                 Do NOT skip duplicate reads.\n\nNotice :\n * Region type (RE), which label functional region reads mapped, is annotated by `PISA anno`. Optional -ttype can be set\n   to one of region types(E/S/C/N) or combination to count reads mapped to these functional regions only.\n * If you want count from more than one bam file, there are two ways to set the parameter. By seperating bam files with ',' or by\n   setting -sample-list option.\n * If -velo set, spliced and unspliced folders will be created at outdir.\n\nFor Smartseq user\nPISA count also support counting gene expression from multiple bam files.\n$ PISA count -file-barcode             // use alias name for each bam file as cell barcode. If this flag is not set -cb must be specified.\n-tags CB                   // Cell barcode\n-sample-list bam_list.txt // bam file path and alias name\n-outdir exp/ -anno-tag GN \n\n# The `-sample-list' specify multiply files, each BAM path per line.\n\n\nDescription of MEX file\nThe Market Exchange (MEX) format (https://math.nist.gov/MatrixMarket/formats.html) is designed for representing the sparse matrix. The -outdir option specifies the output directory for one MEX fold. The MEX format consists of three files, one is cell barcodes, one is feature names (genes or peak names), and the third one defines the expression or signal values.\n$ ls\nbarcodes.tsv.gz  features.tsv.gz  matrix.mtx.gz\n\n$ zcat barcodes.tsv.gz|head\nAACCTGGTGAAGTTGTCGAA\nAAGGAACTAAGCGCAGCACC\nCGATAGAATACTTCTTCGTA\nTACTATCCTCTAGCTGCTAC\nTGACCATCCTACAGTCCACC\nCAGATTCAACTACGAAGTGC\nTTCGTAGCACTCTTCATCTC\nGGCACCTTGCTTAACGTAGG\nACTTCGGATACGTATCGCCT\nGACTCGCTAGTAGTCGGAAT\n\n$ zcat features.tsv.gz|head\nRP11-34P13.7\nRP11-34P13.8\nRP11-34P13.9\nFO538757.3\nFO538757.2\nAP006222.2\nRP4-669L17.10\nRP5-857K21.4\nRP11-206L10.4\nRP11-206L10.9\n\n$ zcat matrix.mtx.gz|head\n%%MatrixMarket matrix coordinate integer general\n% Generated by PISA v0.4-alpha-72-g09c4ded\n23900   782761  11533380\n1   1   2\n1   2   2\n1   3   2\n1   4   1\n1   5   2\n1   6   1\n1   7   2\nThe MEX file can be read by R package Yano::ReadPISA.\n\n\n\nbam2fq\nPISA bam2fq is designed to convert alignment records to FATSQ+ records. Option -tags specify which tags will be kept in the FASTQ+. Full options list below.\n# Convert BAM into fastq.\n$ PISA bam2fq -tags CB,UB,GN -o out.fq aln.bam\n\nOptions :\n -tags     [TAGS]     Export tags in read name.\n -f                   Filter records if specified tags not all exist.\n -fa                  Output fasta instead of fastq.\n -o        [fastq]    Output file.\n -@        [INT]      Threads to unpack BAM.\n\n\nbam2frag\nThe fragment file is a five columns tab-separated flat file which is designed for scATAC-seq. The first column is the chromosome name, the second column is the start location of this fragment (0 based), and the third column is the end position in 1 based of this fragment. The fourth column is the cell barcode of this fragment and the last column is how many duplicates of this fragment.\nPISA bam2frag requires the input BAM file to be sorted by coordinate. This tool will check the cell barcode and the fragment position for each paired reads, duplicates in one cell will only keep one record, and the numeber of copies for this fragment will be updated in column four.\n# Convert sam record to fragment file.\n\n$ PISA bam2frag -cb CB -list cell_barcodes.txt -o out.tsv.gz in.bam\n\nOptions:\n -o       [FILE]    Output file. This file will be bgzipped and indexed.\n -cb      [TAG]     Cell barcode tag.\n -list    [FILE]    Cell barcode white list.\n -q       [20]      Mapping quality score to filter reads.\n -isize   [2000]    Skip if insert size greater than this. [2KB]\n -bed     [BED]     Only convert fragments overlapped with target regions.\n -black-region [BED] Skip convert fragments overlapped with black regions.\n -stat    [FILE]    Transposition events per cell.\n -@       [4]       Thread to unpack and pack files.[4]\n -disable-offset    Disable Tn5 offset for each fragment.\n\n\ndepth\nPISA depth generates coverage information for each position of the predefined region(s). The significant difference between PISA depth and samtools depth (http://www.htslib.org/doc/samtools-depth.html) is that PISA depth use UMI rather than reads. Besides, PISA depth is strand sensitive, and can produce results for target cells.\n# Count coverage depth or unique UMIs for genome locations.\n\nUsage : PISA depth [options] sorted.bam [region]\n\n$ PISA depth -cb CB -umi UB -tags GN -region in.bed -o depth.tsv sorted.bam\n$ PISA depth -cb CB -umi UB sorted.bam chr1:1-2:+\n\nOptions : \n -tag      [TAG]      Tag used for grouping reads.\n -list     [FILE]     Candidate list for -tag.\n -umi      [TAG]      UMI tag. If set, only count unique UMIs for each location.\n -bed      [BED]      Target BED region file. If the strand in column six set, only count reads with the same strand.\n -o        [FILE]     Output depth file. [stdout].\n -q        [INT]      Minimal map quality to filter. [20]\n -@        [INT]      Threads to unpack bam. [4]\n\nNotice :\n * Require sorted and indexed BAM as input.\n * Compare with `samtools depth', PISA depth considers UMIs and strand of reads.\n\n\ncallept\nThe term ‘EPT’ stands for Expressed Peak Tag. EPTs can be identified by PISA within aligned reads from RNA libraries. Once identified, the relationship between each EPT and its corresponding gene can be annotated and analyzed using the Yano package. This analysis helps in understanding the functional implications of EPTs in gene expression regulation.\nThe callept tool is designed to call expressed peak tags (EPTs) for indexed BAM files. The peaks are defined with UMI depth &gt;= cutoff.\n$ PISA cellept -o epts.bed sorted.bam\n$ PISA cellept -tag CB -list cells.txt -umi UB -o epts.bed sorted.bam\n\nOptions :\n -tag      [TAG]      Tag used for grouping reads.\n -list     [FILE]     Candidate list for -tag.\n -umi      [TAG]      UMI tag. If set, only count unique UMIs for each location.\n -is                  Ignore strand.\n -gap      [INT]      Maximum gap to merge nearby peaks. [50]\n -min-length  [INT]   Minimum peak length. [50]\n -cutoff   [INT]      Cutoff of depth. [10]\n -o        [FILE]     Output EPTs in bed format. [stdout].\n -q        [INT]      Minimal map quality to filter. [20]\n -t        [INT]      Threads. [4]\n\nNotice :\n * Requires sorted and indexed BAM as input.\n * Compares with `MACS2` and other peak callers, PISA callept considers UMIs and strand of reads.\n * For paired reads, strand of read 2 will be reversed to revert fragment strand.\n\n\ncount2\nPISA count generates the MEX format matrix for fragments per peak.\n# Count fragments per peak per cell matrix.\n\n$ PISA count2 -bed peaks.bed -t 10 -list barcodes.txt -outdir exp fragments.tsv.gz\n\nOptions :\n -list     [FILE]     Barcode white list, used as column names at matrix. If not set, all barcodes will be count.\n -outdir   [DIR]      Output matrix in MEX format into this fold.\n -prefix   [STR]      Prefix of output files.\n -t        [INT]      Threads.\n\n\nmergebed\nMerge overlapped regions by strand and name.\n$ PISA mergebed -o merged.bed sample1.bed sample2.bed\n$ PISA mergebed -up 500 -down 500 -o flank.bed peaks.bed\n\nOptions:\n-o    [FILE]    Output bed file.\n-s              Ignore strand.\n-up   [INT]     Enlarge regions upstream.\n-down [INT]     Enlarge regions downstream.\n-name           Merge regions by bed name.\n\nNotice :\n * This tool accepts 3 columns or 6 columns bed file(s), strand (+/-) is set in column 6.\n * By default, merging is done with respect to strandness unless -s is set.\n * -up/-down is set respect to strandness, so upstream of plus strand is downstream of minus strand.\n\n\nannobed\nAnnotate the type of region and output in a BED like file. The region type can be defined into.\n$ PISA annobed -gtf genes.gtf -o anno.bed in.bed\n\nOptions:\n-gtf    [GTF]     GTF database.\n-o      [FILE]    Output bed file.\n-report [FILE]    Summary report. Export in STDERR by default.\n-is               Ignore strand.\n-gene-name        Set annatated gene as bed name (column 4).\n-skip-chrs        Skip chromosomes if not exist in GTF. Defa\n-up  [1000]         Annotate intergenic regions at upstream of gene.\n-down  [1000]       Annotate intergenic regions at downstream of gene.\n\nOutput format :\nchromosome,start(0based),end(1based),name,score,strand,number of covered genes, cover gene name(s),type,nearest gene name,distance to nearby gene\n\nNotice :\n * This tool accepts 3 columns or 6 columns bed file(s), strand (+/-) is set in column 6.\n * By default, annotation is done with respect to strandness unless -s is set.\n\n\nflatten\nConvert overlapped into flatten records. If strand exist, the flatten records will be strand sensitive.\n$ PISA flatten -o flatten.bed overlapped.bed\n\nOptions:\n-o    [FILE]    Output bed file.\n\nFor example:\nreg1 ===========\nreg2       ===========\nflattening of regions:\nreg1 ======\nreg2       =====\nreg3            ======\n\n\ngtffmt\nFormat and reorder GTF records.\n$ PISA gtffmt in.gtf\n\nOptions:\n -o      [FILE]    Output GTF file\n -f                Only export gene, transcript, exon and CDS records.\n -key    [all]     Export selected keys in optional fields.\n -report [stderr]  Summary report file.\n\n\ngtf2bed\nConvert GTF file to BED format.\n$ PISA gtf2bed -o merged.bed in.gtf.gz\n\nOptions:\n  -o    [FILE]                          Output bed file.\n  -type [gene|transcript|exon]          Covert to bed.\n  -name [none|gene|transcript|exon]     Set name for bed."
  },
  {
    "objectID": "PISA.html#deprecated-commands",
    "href": "PISA.html#deprecated-commands",
    "title": "PISA User Guide",
    "section": "Deprecated commands",
    "text": "Deprecated commands\n\nparse0\nSince v1.0, the old parse tool has been replaced by parse2, and renamed to parse0 for backup purposes. Due to its lower performance compared to parse, parse0 will be deleted from v2 onwards. The parse0 tool requires a configuration file to describe the library structure, including cell barcode locations, UMI locations, and tag names. Additionally, it generates various quality control reports and outputs cell barcode distributions to stdout. Below is the complete options list and a general workflow for filtering and counting reads.\n$ PISA parse -config read_struct.json -report fastq.csv -cbdis cell_dist.tsv \\\n          -1 out.fq lane1_1.fq.gz,lane02_1.fq.gz  lane1_2.fq.gz,lane2_2.fq.gz\n\nOptions :\n -1       [fastq]   Read 1 output. Default is stdout.\n -2       [fastq]   Read 2 output.\n -config  [json]    Read structure configure file in JSON format. Required.\n -run     [string]  Run code, used for different library.\n -cbdis   [FILE]    Read count per cell barcode.\n -p                 Read 1 and read 2 interleaved in the input file.\n -q       [INT]     Drop reads if average sequencing quality below this value.\n -dropN             Drop reads if N base in sequence or barcode.\n -report  [csv]     Summary report.\n -t       [INT]     Threads. [4]\n-config requires a JSON file to tell software the locations of cell barcodes and/or UMIs. An example configured file can be found at demo/demo.json.\n\n{\n    \"cell barcode tag\":\"CB\",  \n    \"cell barcode\":[\n        {\n            \"location\":\"R1:1-16\" # the location is 1 based\n        }\n    ],\n    \"UMI tag\":\"UR\",\n    \"UMI\":{\n        \"location\":\"R1:17-28\",\n    },\n    \"read 1\":{\n        \"location\":\"R2:1-91\",\n    }\n}\n\nOption -report can specify a quality control report in CSV format. Here is the explanation of each term in this file.\n\n\n\n\n\n\n\n\nTerms\nDescription\n\n\n\n\nNumber of Fragments\nThe number of records in the FASTQ(s). For paired reads, each pair only count once.\n\n\nFragments pass QC\nReads or paired reads pass QC.\n\n\nFragments with Exactly Matched Barcodes\nCell barcode exactly matched with any barcode in the candidate list.\n\n\nFragments with Failed Barcodes\nNo cell barcode found in the candidate list with similar search.\n\n\nFragments Filtered on Low Quality\nMean sequence quality of the records smaller than threshold.\n\n\nFragments Filtered on Unknown Sample Barcodes\nSample barcodes not matched with any barcode in the candidate list.\n\n\nQ30 bases in Cell Barcode\nRatio of bases in cell barcode sequence with quality \\(&gt;=\\) 30.\n\n\nQ30 bases in Sample Barcode\nRatio of bases in sample barcode sequence with quality \\(&gt;=\\) 30.\n\n\nQ30 bases in UMI\nRatio of bases in UMI sequence with quality \\(&gt;=\\) 30.\n\n\nQ30 bases in Reads\nRatio of bases in read sequence with quality \\(&gt;=\\) 30.\n\n\n\n\nHere is an example to parse barcodes and reads with a predefined configure JSON file, the test files can be found at demo directory.\n$ PISA parse0 -config demo/demo.json -report demo/parse.csv demo/demo_1.fq.gz demo/demo_2.fq.gz &gt; demo/demo.fq"
  },
  {
    "objectID": "PISA.html#difference-in-alignment-annotation-between-pisa-and-cellranger",
    "href": "PISA.html#difference-in-alignment-annotation-between-pisa-and-cellranger",
    "title": "PISA User Guide",
    "section": "Difference in alignment annotation between PISA and CellRanger",
    "text": "Difference in alignment annotation between PISA and CellRanger\nIn most cases, PISA annotation produces results similar to CellRanger, but there are two key differences. In CellRanger, exonic reads are defined as those that overlap with an exon by at least 50% of the read length. In PISA, however, reads overlapping with an exon are classified into three distinct categories. Exonic reads are fully enclosed within an exon (E). If a read partially overlaps both an exon and an intron, it is classified as exonintron (C). Junction reads spanning more than one exon are classified as spliced reads (S). By default, only exonic (E) and spliced reads (S) are counted towards gene expression, but exonintronic (C) are skipped unless option -splice or -intron is set. Therefore, PISA anno is more stringent than CellRanger in gene annotation. However, for third-generation sequencing reads, small indels may be introduced during sequencing, causing imperfect alignment at splice sites or gene ends. In these cases, the -vague-edge option can be used to account for such mapping variances.\nThe second difference relates to UMI handling. In CellRanger, if a UMI maps to more than one gene, it is discarded. In contrast, PISA annotates all genes if the read is fully enclosed within the exons of these genes, and the UMI is counted for all of them. However, this type of reads can be skipped in PISA if the -one-hit option is set during the PISA count process.\nFor more information on CellRanger’s counting strategy, you can refer to the official documentation: Cell Ranger Algorithm Overview."
  },
  {
    "objectID": "PISA.html#changelog",
    "href": "PISA.html#changelog",
    "title": "PISA User Guide",
    "section": "Changelog",
    "text": "Changelog\n\n\nv1.3 2024/10/10\n\n\nRemove -vcf-ss option for PISA anno. Enable strand sensitive mode in default for genetic variant annotation.\n\n\n\n\nv1.2 2024/9/7\n\n\nFix a bug of PISA corr. This bug was caused by the recent update to dict.c. ThePISA corr function was not updated accordingly. This issue will not influence the result.\n\n\n\n\nv1.1 2024/6/11\n\n\n-psi and -flatten added for PISA anno;\nAdd new tools gtf2bed and flatten.\n\n\n\n\nv1.0 2023/12/2\n\n\nEPT calling method added.\nmergebed and annobed for BED file added.\nNew parameters added to anno.\n\n\n\n\nv1.0a 2023/10/20\n\n\nMajor update.\nNew callept method introduced. Check EPT paper for details.\nNew mergebed and annobed methods added.\nNew -vcf-ss and -alt-ref now added to PISA anno\nPISA count can count bin and chromosome expression.\n\n\n\n\nv0.12 2022/06/18\n\n\nFix the number of records in MEX file.\n\n\n\n\nv0.12b 2022/04/26\n\n\nBugs fixed.\nChange compress level of BGZF from 6 to 2, speed up few tools.\nNow accept unorder GTFs\nNew tool gtfmt introduced to format a GTF file.\nAdd manual and FASTQ+ specification.\n\n\n\n\nv0.12a 2022/03/31\n\n\nAdd parse2.\n\n\n\n\nv0.11a 2022/03/13\n\n\nAdd counts2, count peaks X cells matrix from the fragment file.\n\n\n\n\nv0.10 2022/01/06\n\n\nUpdate bam2frag, export a fragment file compatible with 10X cellranger-ATAC.\n\n\n\n\nv0.10b 2021/12/09\n\n\nPISA count now has -velo option to export unspliced and spliced matrix together. For velocity analysis, remember to use -intron to annotate reads.\nPISA parse support multi-threads.\n\n\n\n\nv0.10a 2021/11/06\n\n\nPISA count support count spliced and unspliced reads.\nPISA count support count from multiple bam files.\n\n\n\n\nv0.9 2021/10/14\n\n\nRewrite rmdup. Not support paired reads for now.\n\n\n\n\nv0.8 2021/07/20\n\n\nReduce memory usage of count\nFix region query bug of anno -bed\nAdd anno -vcf method\n\n\n\n\nv0.7 2020/11/20\n\n\nIntroduce the PCR deduplicate method rmdup.\nMask read and qual field as * instead of sequence for secondary alignments in the BAM file.\n\n\n\n\nv0.6 2020/10/29\n\n\nPISA attrcnt, Skip secondary alignments before counting reads\nPISA anno fix segments fault bugs when loading malformed GTF\n\n\n\n\nv0.5 2020/08/27\n\n\nAdd PISA bam2frag function (experimental).\nPISA anno Skip secondary alignments when counting total reads.\n\n\n\n\nv0.4 2020/07/14\n\n\nPISA sam2bam add mapping quality adjustment method;\nRewrite UMI correction index structure to reduce memory use;\nFix bugs.\n\n\n\n\nv0.4alpha 2020/05/2\n\n\nPISA anno use UCSC bin scheme instead of linear search for reads query gene regions. Fix the bug of misannotated antisense reads.\nPISA count use MEX output instead of plain cell vs gene table.\n\n\n\n\nv0.3 2020/03/26\n\nFix bugs and improve preformance.\n\n\n\n0.0.0.9999 2019/05/19\n\nInit version."
  },
  {
    "objectID": "PISA.html#todo-list",
    "href": "PISA.html#todo-list",
    "title": "PISA User Guide",
    "section": "TODO list",
    "text": "TODO list\n\nImprove multi-threads performance.\nSupport Stereo-seq and Visium \nSpeed up PISA count and PISA corr.\nImplement parse strategy for cell hash and CITEseq (frozen).\nAssemble reads original from one molecule;\nImplement new designed and more user-friendly parse;\nSupport loom output (frozen);\nExport unspliced matrix for velocity;\nUpgrade PISA parse for faster process fastqs."
  },
  {
    "objectID": "PISA.html#reporting-issues",
    "href": "PISA.html#reporting-issues",
    "title": "PISA User Guide",
    "section": "Reporting Issues",
    "text": "Reporting Issues\nIf you have any suggestion or report issues, please using Github issues page https://github.com/shiquan/PISA/issues."
  },
  {
    "objectID": "PISA.html#citation",
    "href": "PISA.html#citation",
    "title": "PISA User Guide",
    "section": "Citation",
    "text": "Citation\nShi Q, Liu S, Kristiansen K, Liu L. The FASTQ+ format and PISA. Bioinformatics. 2022 Sep 30;38(19):4639-4642. doi: 10.1093/bioinformatics/btac562. PMID: 35993907."
  },
  {
    "objectID": "Yano_AS.html",
    "href": "Yano_AS.html",
    "title": "Alternative splicing analysis for single cell RNA sequencing",
    "section": "",
    "text": "This vignette uses gene, exon, and junction expression files generated from the Annotate Various Features for Alignment. While current state-of-the-art scRNA-seq methods tend to be biased towards the 3’ or 5’ ends of transcripts, it is still possible to obtain coverage information for a subset of exons. Despite the sparsity of gene and exon expression in single cells, our spatial dissimilarity test leverages the spatial distribution properties of features. This means that even features with low overall expression but strong spatial expression patterns across cells can still be highlighted. By performing a spatial dissimilarity test between exon/junction and gene expression, we can predict potential alternative splicing events.",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Alternative splicing analysis"
    ]
  },
  {
    "objectID": "Yano_AS.html#prerequisite",
    "href": "Yano_AS.html#prerequisite",
    "title": "Alternative splicing analysis for single cell RNA sequencing",
    "section": "0. Prerequisite",
    "text": "0. Prerequisite\n\nMake sure you have installed the R environment and Yano package before proceeding with the testing.",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Alternative splicing analysis"
    ]
  },
  {
    "objectID": "Yano_AS.html#perform-cell-clustering-with-seurat",
    "href": "Yano_AS.html#perform-cell-clustering-with-seurat",
    "title": "Alternative splicing analysis for single cell RNA sequencing",
    "section": "1. Perform cell clustering with Seurat",
    "text": "1. Perform cell clustering with Seurat\nLoad Yano will automatically load Seurat.\n\nrequire(Yano)\n\nLoading required package: Yano\n\n\n── Attaching packages ────────────────────────────────────────────── Yano 1.0 ──\n✔ dplyr   1.1.4     ✔ Seurat  5.1.0\n✔ ggplot2 3.5.1     \n\n\n\n# Read raw gene expression matrix\nexp &lt;- ReadPISA(\"./exp/\")\ndim(exp)\n\n[1]  37178 967922\n\n\nIn this section, we will perform the standard Seurat analysis pipeline. Since the spatial dissimilarity test is not rely on cell clustering so changing the resolution or other parameters for FindClusters and RunUMAP will not impact the outcome of the spatial dissimilarity test.\n\n# Create Seurat object and filter droplets with fewer than 1000 genes\nobj &lt;- CreateSeuratObject(exp, min.features = 1000, min.cells = 10)\n\n# Filter low quality droplets\nobj[[\"percent.mt\"]] &lt;- PercentageFeatureSet(obj, pattern = \"^MT-\")\nobj &lt;- subset(obj, nFeature_RNA &lt; 9000 & percent.mt &lt; 20)\n\n# Downsampling to 2000 cells for fast testing\nobj &lt;- obj[, sample(colnames(obj),2000)]\n\n# We run the cell clustering analysis with Seurat pipeline\nobj &lt;- NormalizeData(obj) %&gt;% FindVariableFeatures() %&gt;% ScaleData() %&gt;%  RunPCA(verbose=FALSE) %&gt;% FindNeighbors(dims = 1:10, verbose=FALSE) %&gt;% FindClusters(resolution = 0.5, verbose=FALSE) %&gt;% RunUMAP(dims=1:10, verbose=FALSE)\n\nNormalizing layer: counts\n\n\nFinding variable features for layer counts\n\n\nCentering and scaling data matrix\n\nDimPlot(obj, label=TRUE, label.size = 5, label.box = TRUE)",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Alternative splicing analysis"
    ]
  },
  {
    "objectID": "Yano_AS.html#perform-alternative-splicing-with-exon-assay",
    "href": "Yano_AS.html#perform-alternative-splicing-with-exon-assay",
    "title": "Alternative splicing analysis for single cell RNA sequencing",
    "section": "2. Perform alternative splicing with exon assay",
    "text": "2. Perform alternative splicing with exon assay\nIn this section, we will compare exon expression patterns with the expression patterns of their corresponding genes in a spatial context. Here, the term “spatial” refers to the organization of cells in space. In this vignette, we will use the PCA space for the analysis, but the approach can also be applied to lineage trajectories, spatial coordinates or integration space such as harmony. The spatial dissimilarity test is divided into several steps. First, we will load exon data as a new assay in the Seurat object. In the second step, we will perform a spatial autocorrelation test for all exons and select the ones that show significant autocorrelation for further analysis. Next, we will define the binding relationship between exons and their corresponding genes and run the spatial dissimilarity test. After testing, p-values and adjusted p-values for each exon will be provided.\n\n# Read exon count matrix file\nexon &lt;- ReadPISA(\"./exon/\")\n\n# Load the exon expression to Seurat object as a new assay, make sure the exon matrix has the same cells.\nobj[['exon']] &lt;- CreateAssayObject(exon[, colnames(obj)], min.cells=20)\n\n# Switch work assay to exon\nDefaultAssay(obj) &lt;- \"exon\"\n# Empty info for exon features\nhead(obj[['exon']][[]]) %&gt;% knitr::kable()\n\n\n\n\nchr1:135141-135895/-/ENSG00000268903\n\n\nchr1:629640-630683/+/MTND2P28\n\n\nchr1:631074-632616/+/MTCO1P12\n\n\nchr1:632757-633438/+/MTCO2P12\n\n\nchr1:633696-634376/+/MTATP6P1\n\n\nchr1:634376-634922/+/MTCO3P12\n\n\n\n\nobj &lt;- ParseExonName(obj)\n\nWorking on assay exon\n\n# Gene name and location are parsed from exon name\nhead(obj[['exon']][[]]) %&gt;% knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nchr\nstart\nend\ngene_name\nstrand\n\n\n\n\nchr1:135141-135895/-/ENSG00000268903\nchr1\n135141\n135895\nENSG00000268903\n-\n\n\nchr1:629640-630683/+/MTND2P28\nchr1\n629640\n630683\nMTND2P28\n+\n\n\nchr1:631074-632616/+/MTCO1P12\nchr1\n631074\n632616\nMTCO1P12\n+\n\n\nchr1:632757-633438/+/MTCO2P12\nchr1\n632757\n633438\nMTCO2P12\n+\n\n\nchr1:633696-634376/+/MTATP6P1\nchr1\n633696\n634376\nMTATP6P1\n+\n\n\nchr1:634376-634922/+/MTCO3P12\nchr1\n634376\n634922\nMTCO3P12\n+\n\n\n\n\n# Normalize the data for spatial autocorrelation test\nobj &lt;- NormalizeData(obj)\nobj &lt;- RunAutoCorr(obj)\n\nWorking on assay : exon\n\n\nRun autocorrelation test for 117623 features.\n\n\nRuntime : 20.21321 secs\n\n# Select autocorrleated features for downstream test.\nobj &lt;- SetAutoCorrFeatures(obj)\n\n72307 autocorrelated features.\n\n# IMPORTANT\n# The permutation process can be computationally expensive. In the example below, I set perm=20 to perform only 20 permutations for quicker results. However, the default setting runs 100 permutations for more accurate evaluation. While it's possible to increase the number of permutations for even more precision, it may not always be necessary. If you're running Yano for the first time on your dataset, setting perm=20 can help you save time and provide an initial overview of the entire dataset.\nobj &lt;- RunBlockCorr(obj, bind.name = \"gene_name\", bind.assay = \"RNA\", perm=20)\n\nWorking on assay exon.\n\n\nWorking on binding assay RNA.\n\n\nProcessing 72307 features.\n\n\nProcessing 14981 blocks.\n\n\nRetrieve binding data from assay RNA.\n\n\nUse \"data\" layer for test features and binding features.\n\n\nUsing 15 threads.\n\n\nUsing method \"D\" with mode 1.\n\n\nUse predefined weight matrix \"pca_wm\".\n\n\nRuntime : 3.174361 mins.\n\n# Now p values and adjusted p values have been generated\nhead(obj[['exon']][[]]) %&gt;% knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nchr\nstart\nend\ngene_name\nstrand\nmoransi.pval\nmoransi\nautocorr.variable\ngene_name.D\ngene_name.r\ngene_name.pval\ngene_name.mean\ngene_name.var\ngene_name.padj\n\n\n\n\nchr1:135141-135895/-/ENSG00000268903\nchr1\n135141\n135895\nENSG00000268903\n-\n0.0000000\n0.0241978\nTRUE\n0.0002653\n0.9985711\n0.9999999\n0.1368905\n0.0171966\n1\n\n\nchr1:629640-630683/+/MTND2P28\nchr1\n629640\n630683\nMTND2P28\n+\n0.0000001\n0.0216259\nTRUE\n0.0016741\n0.9915316\n0.9999938\n0.1366886\n0.0230964\n1\n\n\nchr1:631074-632616/+/MTCO1P12\nchr1\n631074\n632616\nMTCO1P12\n+\n0.2142081\n0.0027760\nFALSE\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nchr1:632757-633438/+/MTCO2P12\nchr1\n632757\n633438\nMTCO2P12\n+\n0.8574323\n-0.0048571\nFALSE\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nchr1:633696-634376/+/MTATP6P1\nchr1\n633696\n634376\nMTATP6P1\n+\n0.0000000\n0.3322578\nTRUE\n0.0023412\n0.9958721\n0.9999999\n0.1326526\n0.0168196\n1\n\n\nchr1:634376-634922/+/MTCO3P12\nchr1\n634376\n634922\nMTCO3P12\n+\n0.3783291\n0.0007606\nFALSE\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n# Plot feature binding test plot\nFbtPlot(obj, val = \"gene_name.padj\")\n\n\n\n\n\n\n\n# The chromosome names are too long and tend to overlap in the visualization. To resolve this, you can either resize the labels or remove the 'chr' prefix from the chromosome names. Additionally, since the Y chromosome and mitochondrial are not of particular interest to us in this analysis, they can be excluded from the visualization.\nsel.chrs &lt;- c(1:21, \"X\")\nFbtPlot(obj, val = \"gene_name.padj\", remove.chr = TRUE, sel.chrs = sel.chrs)\n\n\n\n\n\n\n\n# Let's see how many exons are expressed in different spatial pattern with their genes\nobj[['exon']][[]] %&gt;% filter(gene_name.padj &lt; 0.001) %&gt;% knitr::kable() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nchr\nstart\nend\ngene_name\nstrand\nmoransi.pval\nmoransi\nautocorr.variable\ngene_name.D\ngene_name.r\ngene_name.pval\ngene_name.mean\ngene_name.var\ngene_name.padj\n\n\n\n\nchr1:154169305-154169383/-/TPM3\nchr1\n154169305\n154169383\nTPM3\n-\n0.0e+00\n0.0992885\nTRUE\n0.3260619\n0.0405078\n0e+00\n0.1346585\n0.0222119\n0.0000705\n\n\nchr10:71760482-71760924/-/VSIR\nchr10\n71760482\n71760924\nVSIR\n-\n0.0e+00\n0.0795537\nTRUE\n0.3203157\n-0.0168070\n1e-07\n0.1281502\n0.0232676\n0.0001298\n\n\nchr11:35197162-35197793/+/CD44\nchr11\n35197162\n35197793\nCD44\n+\n0.0e+00\n0.3244215\nTRUE\n0.3183515\n0.4315256\n0e+00\n0.1311498\n0.0196868\n0.0000177\n\n\nchr11:75421727-75422280/+/RPS3\nchr11\n75421727\n75422280\nRPS3\n+\n0.0e+00\n0.0394773\nTRUE\n0.2936739\n-0.2637110\n1e-07\n0.1333938\n0.0202595\n0.0002233\n\n\nchr11:113262846-113265197/+/NCAM1\nchr11\n113262846\n113265197\nNCAM1\n+\n0.0e+00\n0.3866834\nTRUE\n0.3133407\n0.4973826\n0e+00\n0.1292520\n0.0193277\n0.0000177\n\n\nchr11:123061588-123061833/-/HSPA8\nchr11\n123061588\n123061833\nHSPA8\n-\n0.0e+00\n0.1239915\nTRUE\n0.3401527\n0.0815612\n0e+00\n0.1346671\n0.0190431\n0.0000028\n\n\nchr12:6943817-6944173/+/C12orf57\nchr12\n6943817\n6944173\nC12orf57\n+\n0.0e+00\n0.0865576\nTRUE\n0.3272111\n-0.0727467\n0e+00\n0.1335005\n0.0220335\n0.0000538\n\n\nchr12:56161387-56161465/+/MYL6\nchr12\n56161387\n56161465\nMYL6\n+\n0.0e+00\n0.2510070\nTRUE\n0.6419953\n-0.2807777\n0e+00\n0.1323870\n0.0263422\n0.0000000\n\n\nchr15:60382342-60384827/-/ANXA2\nchr15\n60382342\n60384827\nANXA2\n-\n0.0e+00\n0.0457067\nTRUE\n0.2619770\n-0.0323625\n2e-07\n0.1158580\n0.0195116\n0.0004424\n\n\nchr15:60395645-60396427/-/ANXA2\nchr15\n60395645\n60396427\nANXA2\n-\n0.0e+00\n0.1919382\nTRUE\n0.3855346\n0.1038529\n0e+00\n0.1353537\n0.0230063\n0.0000026\n\n\nchr15:60395907-60396427/-/ANXA2\nchr15\n60395907\n60396427\nANXA2\n-\n0.0e+00\n0.1860518\nTRUE\n0.3841102\n0.1012316\n0e+00\n0.1324377\n0.0256335\n0.0000122\n\n\nchr15:43801711-43804427/+/SERF2\nchr15\n43801711\n43804427\nSERF2\n+\n0.0e+00\n0.0935016\nTRUE\n0.3621916\n-0.0814080\n0e+00\n0.1329672\n0.0190753\n0.0000006\n\n\nchr15:43801132-43801187/+/SERF2\nchr15\n43801132\n43801187\nSERF2\n+\n0.0e+00\n0.0930897\nTRUE\n0.3060626\n0.0604083\n1e-07\n0.1278487\n0.0222578\n0.0001930\n\n\nchr15:43801518-43801569/+/SERF2\nchr15\n43801518\n43801569\nSERF2\n+\n0.0e+00\n0.0838638\nTRUE\n0.2895815\n0.0637688\n1e-07\n0.1292471\n0.0207276\n0.0002843\n\n\nchr17:31305213-31305630/-/ENSG00000265118\nchr17\n31305213\n31305630\nENSG00000265118\n-\n0.0e+00\n0.0925344\nTRUE\n0.2821214\n0.1428053\n3e-07\n0.1283104\n0.0210790\n0.0005635\n\n\nchr18:49481681-49482410/-/RPL17-C18orf32\nchr18\n49481681\n49482410\nRPL17-C18orf32\n-\n0.0e+00\n0.2712334\nTRUE\n0.7924973\n-0.4939631\n0e+00\n0.1329229\n0.0186537\n0.0000000\n\n\nchr19:16095264-16095357/+/TPM4\nchr19\n16095264\n16095357\nTPM4\n+\n0.0e+00\n0.1454715\nTRUE\n0.5038171\n-0.2719218\n0e+00\n0.1296388\n0.0245474\n0.0000000\n\n\nchr19:16095264-16095893/+/TPM4\nchr19\n16095264\n16095893\nTPM4\n+\n0.0e+00\n0.2261454\nTRUE\n0.5960557\n-0.2304785\n0e+00\n0.1352424\n0.0224823\n0.0000000\n\n\nchr19:16095264-16095591/+/TPM4\nchr19\n16095264\n16095591\nTPM4\n+\n0.0e+00\n0.2273817\nTRUE\n0.5974028\n-0.2300212\n0e+00\n0.1353745\n0.0224666\n0.0000000\n\n\nchr19:16095264-16095454/+/TPM4\nchr19\n16095264\n16095454\nTPM4\n+\n0.0e+00\n0.2191048\nTRUE\n0.6006130\n-0.2530396\n0e+00\n0.1305774\n0.0200933\n0.0000000\n\n\nchr19:16095264-16096744/+/TPM4\nchr19\n16095264\n16096744\nTPM4\n+\n0.0e+00\n0.2242270\nTRUE\n0.5930139\n-0.2295855\n0e+00\n0.1345748\n0.0227680\n0.0000000\n\n\nchr19:16095264-16095496/+/TPM4\nchr19\n16095264\n16095496\nTPM4\n+\n0.0e+00\n0.2364517\nTRUE\n0.6178266\n-0.2495580\n0e+00\n0.1333373\n0.0231901\n0.0000000\n\n\nchr19:18169087-18170494/+/ENSG00000268173\nchr19\n18169087\n18170494\nENSG00000268173\n+\n0.0e+00\n0.0635275\nTRUE\n0.4596412\n-0.6701018\n0e+00\n0.1354289\n0.0202483\n0.0000000\n\n\nchr2:218344808-218346756/+/PNKD\nchr2\n218344808\n218346756\nPNKD\n+\n0.0e+00\n0.1002295\nTRUE\n0.5073703\n-0.4686376\n0e+00\n0.1374001\n0.0243586\n0.0000000\n\n\nchr2:218344808-218346784/+/PNKD\nchr2\n218344808\n218346784\nPNKD\n+\n0.0e+00\n0.1011522\nTRUE\n0.5074624\n-0.4655695\n0e+00\n0.1373506\n0.0241763\n0.0000000\n\n\nchr2:218344808-218346793/+/PNKD\nchr2\n218344808\n218346793\nPNKD\n+\n0.0e+00\n0.1032048\nTRUE\n0.5099606\n-0.4545319\n0e+00\n0.1352540\n0.0232760\n0.0000000\n\n\nchr2:218344808-218346791/+/PNKD\nchr2\n218344808\n218346791\nPNKD\n+\n0.0e+00\n0.1032048\nTRUE\n0.5099606\n-0.4545319\n0e+00\n0.1352540\n0.0232760\n0.0000000\n\n\nchr2:218344808-218346771/+/PNKD\nchr2\n218344808\n218346771\nPNKD\n+\n0.0e+00\n0.1000790\nTRUE\n0.5064751\n-0.4670372\n0e+00\n0.1375322\n0.0243973\n0.0000000\n\n\nchr20:37238402-37238449/+/RPN2\nchr20\n37238402\n37238449\nRPN2\n+\n0.0e+00\n0.0394885\nTRUE\n0.3253520\n-0.3513687\n0e+00\n0.1280255\n0.0205832\n0.0000170\n\n\nchr22:21769040-21769320/-/MAPK1\nchr22\n21769040\n21769320\nMAPK1\n-\n0.0e+00\n0.0332233\nTRUE\n0.2912601\n-0.2701486\n2e-07\n0.1340592\n0.0211403\n0.0004517\n\n\nchr3:181175514-181176513/+/SOX2-OT\nchr3\n181175514\n181176513\nSOX2-OT\n+\n0.0e+00\n0.2450655\nTRUE\n0.4067950\n0.1817835\n0e+00\n0.1304387\n0.0248656\n0.0000019\n\n\nchr3:181175514-181176523/+/SOX2-OT\nchr3\n181175514\n181176523\nSOX2-OT\n+\n0.0e+00\n0.2450655\nTRUE\n0.4067950\n0.1817835\n0e+00\n0.1304387\n0.0248656\n0.0000019\n\n\nchr3:181175514-181176524/+/SOX2-OT\nchr3\n181175514\n181176524\nSOX2-OT\n+\n0.0e+00\n0.2521290\nTRUE\n0.4122098\n0.1800887\n0e+00\n0.1303022\n0.0245138\n0.0000012\n\n\nchr5:179812407-179813024/+/SQSTM1\nchr5\n179812407\n179813024\nSQSTM1\n+\n1.5e-06\n0.0187629\nTRUE\n0.3142730\n-0.5117468\n1e-07\n0.1368326\n0.0216767\n0.0001434\n\n\nchr5:179812407-179813598/+/SQSTM1\nchr5\n179812407\n179813598\nSQSTM1\n+\n2.0e-07\n0.0204210\nTRUE\n0.3194093\n-0.5463860\n0e+00\n0.1351877\n0.0205372\n0.0000409\n\n\nchr5:179811988-179813641/+/SQSTM1\nchr5\n179811988\n179813641\nSQSTM1\n+\n2.0e-07\n0.0206105\nTRUE\n0.3199651\n-0.5482200\n0e+00\n0.1350916\n0.0203650\n0.0000353\n\n\nchr8:60620674-60620988/+/RAB2A\nchr8\n60620674\n60620988\nRAB2A\n+\n0.0e+00\n0.0340771\nTRUE\n0.3216773\n-0.4414469\n1e-07\n0.1445663\n0.0225204\n0.0002364\n\n\nchr8:60620674-60620948/+/RAB2A\nchr8\n60620674\n60620948\nRAB2A\n+\n0.0e+00\n0.0359988\nTRUE\n0.3212071\n-0.4228456\n1e-07\n0.1446953\n0.0227586\n0.0002815\n\n\nchr8:60620674-60620941/+/RAB2A\nchr8\n60620674\n60620941\nRAB2A\n+\n0.0e+00\n0.0349094\nTRUE\n0.3196463\n-0.4301341\n2e-07\n0.1442059\n0.0236332\n0.0004517\n\n\nchr8:60620674-60620938/+/RAB2A\nchr8\n60620674\n60620938\nRAB2A\n+\n0.0e+00\n0.0350087\nTRUE\n0.3206420\n-0.4318535\n2e-07\n0.1441320\n0.0236278\n0.0004460\n\n\nchrX:151404916-151405157/+/VMA21\nchrX\n151404916\n151405157\nVMA21\n+\n0.0e+00\n0.0577777\nTRUE\n0.3465528\n-0.2885426\n2e-07\n0.1309232\n0.0290270\n0.0004517\n\n\n\n\n# Random select a gene and its exons and visulize with FeaturePlot.\nFeaturePlot(obj, features = c(\"chr15:43801711-43804427/+/SERF2\", \"SERF2\"), ncol=2)\n\n\n\n\n\n\n\n# The default color and parameters perhaps not easily to tell the difference between exon and its binding gene expression. Let's change the scaled colors and enlarge point size and order by expression.\nrequire(RColorBrewer)\n\nLoading required package: RColorBrewer\n\nFeaturePlot(obj, features = c(\"chr15:43801711-43804427/+/SERF2\", \"SERF2\"), ncol=2, order = TRUE, pt.size=1) & scale_colour_gradientn(colours = rev(brewer.pal(n = 11, name = \"RdBu\")))\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\nWe can also map the ratio of exon expression to gene expression on the UMAP. The RatioPlot function is designed for this purpose. As observed, the gene SERF2 is relatively low expressed in groups 0, 5, and 9, while the ratio of the exon chr15:43801711-43804427/+/SERF2 is higher in these groups.\n\nRatioPlot(obj, features = c(\"chr15:43801711-43804427/+/SERF2\"), assay = 'exon', bind.assay = 'RNA', bind.name = \"gene_name\", order = TRUE, pt.size=1) \n\nRetrieve counts from assay exon, and counts from binding assay exon\n\n\n\n\n\n\n\n\n\nIn the feature plot and ratio plot above, the exon appears to lack a strong expression pattern across cell groups, whereas the gene SERF2 seems to be highly expressed in many groups, except for groups 0, 5 and 9. This inconsistent expression pattern between the exon and its corresponding gene may suggest differential exon usage. To explore the coverage details of both the exon and the gene body, we will generate a track plot next.\nIn our package, retrieving gene locations requires loading a GTF file instead of relying on current Bioconductor databases, such as org.Hs.eg.db. This is due to the varying versions of gene annotations provided by different institutes, which can introduce inconsistencies. To avoid potential bias during preprocessing and postprocessing, we strongly recommend using the same GTF file consistently throughout your project. The Yano package includes the gtf2db function, which enables you to load a GTF file into memory for further analysis.\n\ngtf &lt;- gtf2db(\"./gencode.v44.annotation.gtf.gz\")\n\n[2024-10-23 14:04:18] \u001b[32mGTF loading..\u001b[0m\n[2024-10-23 14:04:56] \u001b[32mLoad 62700 genes.\u001b[0m\n[2024-10-23 14:04:56] \u001b[32mLoad time : 38.578 sec\u001b[0m\n\n\nA track plot is used to study the read coverage per cell group. In the track plot shown below, the cell group is specified by the cell.group parameter. Unlike IGV, where read depth is used, we use UMI depth in this plot. The cell barcode tag and UMI tag are predefined as “CB” and “UB” with parameter cell.tag and umi.tag. For each cell group, the UMI depth has been normalized by the number of cells in that group. This means that the depth at each location can be interpreted as the mean UMI depth per cell for the group. As a result, the tracks are directly comparable across different cell groups. If cell.group is not set, the track plot will generate the raw UMI depth per location.\n\nTrackPlot(bamfile = \"Parent_SC3v3_Human_Glioblastoma_possorted_genome_bam.bam\", gtf = gtf, gene = \"SERF2\", cell.group = Idents(obj), highlights = c(43801711,43804427) )\n\n\n\n\n\n\n\n\nIn the track plot, we can easily observe that an exon around position 33,794,000 dominates the expression of the SERF2 gene and is highly expressed in many cell groups. However, the exon ‘chr15:43801711-43804427/+/SERF2’ (highlighted) shows low expression and is not visible in the track plot. To visualize low-expressed exons, we can set the max.depth parameter to 2, which caps the UMI depth at 2. And many genes in the region, we set display.genes to SERF2 only. This adjustment allows the low-expressed exons and their related transcipts to be more clearly represented in the plot. In this case, we can found the the highlighed exon shows different expressed pattern with the gene SERF2.\n\nTrackPlot(bamfile = \"Parent_SC3v3_Human_Glioblastoma_possorted_genome_bam.bam\", gtf = gtf, gene = \"SERF2\", cell.group = Idents(obj), highlights = c(43801711,43804427), max.depth = 2, display.genes = \"SERF2\")",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Alternative splicing analysis"
    ]
  },
  {
    "objectID": "Yano_AS.html#load-junction-assay",
    "href": "Yano_AS.html#load-junction-assay",
    "title": "Alternative splicing analysis for single cell RNA sequencing",
    "section": "3. Load junction assay",
    "text": "3. Load junction assay\nIn addition to exon expression, junction expression can provide insights into different expression patterns across transcripts, offering a complementary perspective. Junction expression refers to the UMI counts of reads that span more than one exon. It’s important to note that junctions are named similarly to exons, but the start and end positions are different. The start of the junction corresponds to the end of the previous exon, while the end of the junction represents the start of the next exon.\n\njunction &lt;- ReadPISA(\"./junction/\")\nobj[['junction']] &lt;- CreateAssayObject(junction[, colnames(obj)], min.cells=20)\n\nDefaultAssay(obj) &lt;- \"junction\"\nobj &lt;- NormalizeData(obj)\n\n# select spatial autocorrelated junctions\nobj &lt;- RunAutoCorr(obj)\n\nWorking on assay : junction\n\n\nRun autocorrelation test for 15069 features.\n\n\nRuntime : 3.183109 secs\n\nobj &lt;- SetAutoCorrFeatures(obj)\n\n7786 autocorrelated features.\n\n# Parse the gene name and coordinates from junction names\nobj &lt;- ParseExonName(obj)\n\nWorking on assay junction\n\n# perform dissimilarity test between junctions and their binding genes\nobj &lt;- RunBlockCorr(obj, bind.name = \"gene_name\", bind.assay = \"RNA\", perm=20)\n\nWorking on assay junction.\n\n\nWorking on binding assay RNA.\n\n\nProcessing 7786 features.\n\n\nProcessing 3858 blocks.\n\n\nRetrieve binding data from assay RNA.\n\n\nUse \"data\" layer for test features and binding features.\n\n\nUsing 15 threads.\n\n\nUsing method \"D\" with mode 1.\n\n\nUse predefined weight matrix \"pca_wm\".\n\n\nRuntime : 20.45918 secs.\n\nFbtPlot(obj, val=\"gene_name.padj\", remove.chr=TRUE, sel.chrs = sel.chrs)\n\n\n\n\n\n\n\n# Because both exon and junction are compared with gene, so it's reasonable to combine these two assays in one plot\nFbtPlot(obj, val=\"gene_name.padj\", assay = c(\"exon\", \"junction\"), col.by = \"assay\", shape.by = \"assay\", pt.size = 2, remove.chr = TRUE, sel.chrs = sel.chrs, cols = c(\"red\", \"blue\"))\n\n\n\n\n\n\n\n# We can find there is an exon and a junction at chromosome 12 with very low p value (&lt;1e-8), let's see which gene they are located\nobj[['exon']][[]] %&gt;% filter(chr == \"chr12\" & gene_name.pval &lt; 1e-8) %&gt;% knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nchr\nstart\nend\ngene_name\nstrand\nmoransi.pval\nmoransi\nautocorr.variable\ngene_name.D\ngene_name.r\ngene_name.pval\ngene_name.mean\ngene_name.var\ngene_name.padj\n\n\n\n\nchr12:56161387-56161465/+/MYL6\nchr12\n56161387\n56161465\nMYL6\n+\n0\n0.251007\nTRUE\n0.6419953\n-0.2807777\n0\n0.132387\n0.0263422\n0\n\n\n\n\nobj[['junction']][[]] %&gt;% filter(chr == \"chr12\" & gene_name.pval &lt; 1e-8) %&gt;% knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmoransi.pval\nmoransi\nautocorr.variable\nchr\nstart\nend\ngene_name\nstrand\ngene_name.D\ngene_name.r\ngene_name.pval\ngene_name.mean\ngene_name.var\ngene_name.padj\n\n\n\n\nchr12:56160320-56161387/+/MYL6\n0\n0.1882398\nTRUE\nchr12\n56160320\n56161387\nMYL6\n+\n0.5005828\n-0.1616761\n0\n0.1288616\n0.0267964\n1e-07\n\n\n\n\nFeaturePlot(obj, features = c(\"chr12:56161387-56161465/+/MYL6\",\"chr12:56160320-56161387/+/MYL6\", \"MYL6\"), order = TRUE, pt.size = 2, ncol=3) & scale_colour_gradientn(colours = rev(brewer.pal(n = 11, name = \"RdBu\")))\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n# We could also plot the expression ratio of these exons or junctions on umap\np1 &lt;- RatioPlot(obj, assay = \"exon\", bind.assay = \"RNA\", bind.name = \"gene_name\", features = \"chr12:56161387-56161465/+/MYL6\")\n\nRetrieve counts from assay exon, and counts from binding assay exon\n\np2 &lt;- RatioPlot(obj, assay = \"exon\", bind.assay = \"RNA\", bind.name = \"gene_name\", features = \"chr12:56160626-56160670/+/MYL6\")\n\nRetrieve counts from assay exon, and counts from binding assay exon\n\np3 &lt;- RatioPlot(obj, assay = \"junction\", bind.assay = \"RNA\", bind.name = \"gene_name\", features = \"chr12:56160320-56161387/+/MYL6\")\n\nRetrieve counts from assay junction, and counts from binding assay junction\n\ncowplot::plot_grid(p1,p2,p3, ncol=3)\n\n\n\n\n\n\n\n\nWe then visualize the track plot for this gene, including junction reads by setting junc=TRUE. The height of the splice paths in the plot represents the expression level of each junction within the specified cell group.\n\nTrackPlot(bamfile = \"Parent_SC3v3_Human_Glioblastoma_possorted_genome_bam.bam\", gtf = gtf, gene = \"MYL6\", cell.group = Idents(obj), junc = TRUE, highlights = list(c(56160320,56161387),c(56161387,56161465)))\n\n\n\n\n\n\n\n\nYou might be wondering why the exon chr12:56161387-56161465/+/MYL6 appears highly expressed in cell group 2 in the track plot, where the overlapping peak is clearly higher than in other groups, but its expression level in the feature plot is not as high as expected.\nThis discrepancy arises because the exon is overlapping with other exons from different transcripts. We only count reads that are fully contained within the exon as part of the exon’s expression. Therefore, reads that partially overlap with this exon are not included in the count.\nIn contrast, the overlapping exon chr12:56161387-56161575/+/MYL6 shows higher expression in group 2 compared to other groups. It’s important to note that if a read is fully contained within two or more overlapping exons, PISA will count it for all relevant exons. Check PISA’s manual for details.\n\np1 &lt;- DimPlot(obj, label=TRUE, label.size = 5, label.box = TRUE)\np2 &lt;- FeaturePlot(obj, features = c(\"chr12:56161387-56161575/+/MYL6\"), order = TRUE, pt.size = 1) & scale_colour_gradientn(colours = rev(brewer.pal(n = 11, name = \"RdBu\")))\n\nWarning: Could not find chr12:56161387-56161575/+/MYL6 in the default search\nlocations, found in 'exon' assay instead\n\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n\np1 + p2",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Alternative splicing analysis"
    ]
  },
  {
    "objectID": "Yano_AS.html#heatmap-analysis-for-highlight-group-specific-alternative-splicing",
    "href": "Yano_AS.html#heatmap-analysis-for-highlight-group-specific-alternative-splicing",
    "title": "Alternative splicing analysis for single cell RNA sequencing",
    "section": "4. Heatmap analysis for highlight group specific alternative splicing",
    "text": "4. Heatmap analysis for highlight group specific alternative splicing\nThe spatial dissimilarity test method prioritizes alternatively spliced exons and junctions across all cells but does not identify which specific cell groups exhibit these splicing events. To address this, let’s manually extract the scaled expression data for the selected alternatively spliced exons and their corresponding genes, then perform a co-clustering analysis. A comprehensive heatmap will be generated using the ComplexHeatmap package, providing a visual representation of the exon and gene distribution across cell groups.\n\nobj[['exon']][[]] %&gt;% filter(gene_name.padj&lt;0.001) %&gt;% rownames -&gt; exons\nobj[['exon']][[]] %&gt;% filter(gene_name.padj&lt;0.001) %&gt;% pull(gene_name) -&gt; bind.genes\nDefaultAssay(obj) &lt;- \"RNA\"\nobj &lt;- ScaleData(obj, features = unique(bind.genes))\nDefaultAssay(obj) &lt;- \"exon\"\nobj &lt;- ScaleData(obj, features = exons)\n\ndat1 &lt;- GetAssayData(obj, assay = 'exon', layer = 'scale.data')\ndat2 &lt;- GetAssayData(obj, assay = 'RNA', layer = 'scale.data')\nidents &lt;- sort(Idents(obj))\norder.cells &lt;- names(idents)\n\ndat2 &lt;- dat2[bind.genes,]\nrownames(dat2) &lt;- exons\n\ndat &lt;- cbind(dat1, dat2)\n\nrequire(ComplexHeatmap)\nd &lt;- dist(dat)\nhc &lt;- hclust(d)\nidx &lt;- hc$labels[hc$order]\n\nha &lt;- HeatmapAnnotation(group=idents, border = TRUE)\nht1 &lt;- Heatmap(dat1[idx, order.cells], cluster_rows = FALSE, cluster_columns = FALSE, show_column_names = FALSE, border = TRUE,  top_annotation = ha, name = \"exon\", column_title = \"exon\")\nht2 &lt;- Heatmap(dat2[idx, order.cells], cluster_rows = FALSE, cluster_columns = FALSE, show_column_names = FALSE, border = TRUE,  top_annotation = ha, name = \"gene\", column_title = \"gene\", row_names_max_width = max_text_width(rownames(dat2), gp = gpar(fontsize = 12)))\n\nht &lt;- ht1 + ht2\ndraw(ht, heatmap_legend_side = \"left\",  annotation_legend_side = \"left\")",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Alternative splicing analysis"
    ]
  },
  {
    "objectID": "Yano_AS.html#test-between-exon-and-exon-skipped-reads",
    "href": "Yano_AS.html#test-between-exon-and-exon-skipped-reads",
    "title": "Alternative splicing analysis for single cell RNA sequencing",
    "section": "5. Test between exon and exon skipped reads",
    "text": "5. Test between exon and exon skipped reads\nIn the previous sections, we conducted a spatial dissimilarity test between exon/junction expression and gene expression. However, binding features are not always limited to genes; they can also correspond to other types of features. In this section, we perform a test between exon expression and reads that skip this exon using mode 3. This approach is similar to the Percent Spliced In (PSI) method, which is widely used to analyze alternative splicing in both bulk and single-cell RNA-seq data. The PSI is calculated as:\nPSI = exon reads / (exon reads + reads skipping this exon)\n\n# The reads that skip exons are annotated using the `-psi` option in PISA anno, and these counts are stored in the `exclude` directory. We then load these excluded counts into a new assay.\nexclude &lt;- ReadPISA(\"./exclude/\")\nobj[['exclude']] &lt;- CreateAssayObject(exclude[,colnames(obj)], min.cells = 10)\n\n# Then we switch to exon assay\nDefaultAssay(obj) &lt;- \"exon\"\n\n# Because the feature names in the exclude assay are exactly the same as those in the exon assay, they represent the reads that skip each corresponding exon. Therefore, we set up the binding feature using the exon name itself.\nobj[['exon']][['exon_name']] &lt;- rownames(obj)\nobj[['exon']][['exon_name']] %&gt;% head\n\n                                                                exon_name\nchr1:135141-135895/-/ENSG00000268903 chr1:135141-135895/-/ENSG00000268903\nchr1:629640-630683/+/MTND2P28               chr1:629640-630683/+/MTND2P28\nchr1:631074-632616/+/MTCO1P12               chr1:631074-632616/+/MTCO1P12\nchr1:632757-633438/+/MTCO2P12               chr1:632757-633438/+/MTCO2P12\nchr1:633696-634376/+/MTATP6P1               chr1:633696-634376/+/MTATP6P1\nchr1:634376-634922/+/MTCO3P12               chr1:634376-634922/+/MTCO3P12\n\n# Then we perform spatial dissimilarity test between exon and (exon+exclude) using mode 3.\nobj &lt;- RunBlockCorr(obj, bind.name = \"exon_name\", bind.assay = \"exclude\", mode = 3)\n\nobj[['exon']][[]] %&gt;% filter(exon_name.padj&lt;1e-5)\n\n                                  chr     start       end gene_name strand\nchr1:153990914-153991034/+/RPS27 chr1 153990914 153991034     RPS27      +\n                                  moransi.pval   moransi autocorr.variable\nchr1:153990914-153991034/+/RPS27 5.679737e-155 0.1111682              TRUE\n                                 gene_name.D gene_name.r gene_name.pval\nchr1:153990914-153991034/+/RPS27   0.2635603   0.2377178   2.413568e-06\n                                 gene_name.mean gene_name.var gene_name.padj\nchr1:153990914-153991034/+/RPS27      0.1298835    0.02123542    0.003713147\n                                                        exon_name exon_name.D\nchr1:153990914-153991034/+/RPS27 chr1:153990914-153991034/+/RPS27   0.2983623\n                                 exon_name.r exon_name.pval exon_name.mean\nchr1:153990914-153991034/+/RPS27   0.1370618    2.34274e-12      0.1296453\n                                 exon_name.var exon_name.padj\nchr1:153990914-153991034/+/RPS27    0.02145398   1.318963e-09\n\nFbtPlot(obj, val = \"exon_name.padj\", remove.chr = TRUE, point.label = \"chr1:153990914-153991034/+/RPS27\")\n\n\n\n\n\n\n\n# We find that only a few events can be prioritized.\np1 &lt;- PSIPlot(obj, exon.assay = \"exon\", exclude.assay = \"exclude\", features = c(\"chr1:153990914-153991034/+/RPS27\"), order = TRUE)\np2 &lt;- FeaturePlot(obj,  features = c(\"chr1:153990914-153991034/+/RPS27\"), order = TRUE)\np3 &lt;- FeaturePlot(obj,  features = c(\"RPS27\"), order = TRUE)\ncowplot::plot_grid(p1, p2,p3, ncol=3)\n\n\n\n\n\n\n\n\n\nTrackPlot(bamfile = \"Parent_SC3v3_Human_Glioblastoma_possorted_genome_bam.bam\", gtf = gtf, gene = \"RPS27\", cell.group = Idents(obj), highlights = c(153990914,153991034), junc = TRUE)\n\n\n\n\n\n\n\n# It seems like the exon is in low coverage, we then zoom in by setting the max depth to 2.\nTrackPlot(bamfile = \"Parent_SC3v3_Human_Glioblastoma_possorted_genome_bam.bam\", gtf = gtf, gene = \"RPS27\", cell.group = Idents(obj), highlights = c(153990914,153991034), junc = TRUE, max.depth = 2)\n\n\n\n\n\n\n\n\nIn previous sections, we noted that exon or junction expression is part of gene expression, and inverse expression patterns can strongly indicate alternative splicing. However, exon-skipped reads are largely independent of exon expression, and our D test does not account for the spatial autocorrelation of the binding feature. As a result, many false positives may be generated with mode 1. Therefore, we use mode 3 in this section. You can always run mode 1 and compare it with mode 3 for this test.\nAs we observed here, many events cannot be properly defined by comparing them with exon-skipped events, likely due to the use of mode 3, which sums exon-included and exon-skipped reads as the test feature. While exon-skipped reads need to be sufficiently abundant to influence the expression pattern, the low coverage of gene bodies and the presence of dropouts hindered this analysis.\nAlthough we found few differences in expression patterns between exon included and exon included + exon-skipped reads, for large-scale datasets or full-length scRNA-seq technologies, this setup may reveal more significant events.\nIn this case study, we performed a spatial dissimilarity test between various feature pairs. This method provides an overview of the entire cell population and does not rely on prior cell clustering and annotation, making it a powerful tool for analyzing cell data without any prior knowledge. It is recommended to test junctions and exons with their corresponding genes in 3’ or 5’ biased scRNA-seq. Additionally, testing between exon-included and exon-skipped reads can be more informative for large-scale datasets and full-length scRNA-seq.\nTo obtain cell-cluster-specific expression patterns, applying heatmaps and clustering in subsequent analyses is recommended.",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Alternative splicing analysis"
    ]
  },
  {
    "objectID": "Yano_AS.html#questions",
    "href": "Yano_AS.html#questions",
    "title": "Alternative splicing analysis for single cell RNA sequencing",
    "section": "Questions?",
    "text": "Questions?\nIf you have any questions regarding this vignette, please feel free to report them through the discussion forum. When submitting your query, please ensure you attach the commands you used for better clarity and support.\n\nCommand(obj)\n\n [1] \"NormalizeData.RNA\"            \"FindVariableFeatures.RNA\"    \n [3] \"RunPCA.RNA\"                   \"FindNeighbors.RNA.pca\"       \n [5] \"FindClusters\"                 \"RunUMAP.RNA.pca\"             \n [7] \"ParseExonName.exon\"           \"NormalizeData.exon\"          \n [9] \"RunAutoCorr.exon.pca\"         \"SetAutoCorrFeatures.exon\"    \n[11] \"NormalizeData.junction\"       \"RunAutoCorr.junction.pca\"    \n[13] \"SetAutoCorrFeatures.junction\" \"ParseExonName.junction\"      \n[15] \"RunBlockCorr.junction.pca\"    \"ScaleData.RNA\"               \n[17] \"ScaleData.exon\"               \"RunBlockCorr.exon.pca\"",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Alternative splicing analysis"
    ]
  },
  {
    "objectID": "Yano_ASE.html",
    "href": "Yano_ASE.html",
    "title": "Alelle specific gene expression analysis for single cell RNA sequencing",
    "section": "",
    "text": "This vignette uses gene and single nucleotide variant (SNV) expression files generated from the Annotate Various Features for Alignment.",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Allele-specific gene expression analysis"
    ]
  },
  {
    "objectID": "Yano_ASE.html#perform-cell-clustering-with-seurat",
    "href": "Yano_ASE.html#perform-cell-clustering-with-seurat",
    "title": "Alelle specific gene expression analysis for single cell RNA sequencing",
    "section": "0. Perform cell clustering with Seurat",
    "text": "0. Perform cell clustering with Seurat\nWe begin by performing cell clustering based on gene expression, which is identical to the first step outlined in the Alternative splicing analysis for scRNA-seq. If you’re continuing from the previous vignette, you are free to skip this section.\n\nrequire(Yano)\n\nLoading required package: Yano\n\n\n── Attaching packages ────────────────────────────────────────────── Yano 1.0 ──\n✔ dplyr   1.1.4     ✔ Seurat  5.1.0\n✔ ggplot2 3.5.1     \n\nexp &lt;- ReadPISA(\"./exp/\")\n\nobj &lt;- CreateSeuratObject(exp, min.features = 1000, min.cells = 10)\nobj[[\"percent.mt\"]] &lt;- PercentageFeatureSet(obj, pattern = \"^MT-\")\nobj &lt;- subset(obj, nFeature_RNA &lt; 9000 & percent.mt &lt; 20)\n\n# Downsampling to 2000 cells for fast testing\nobj &lt;- obj[, sample(colnames(obj),2000)]\n\n# To improve visualization, we reduced the resolution when identifying cell clusters.\nobj &lt;- NormalizeData(obj) %&gt;% FindVariableFeatures() %&gt;% ScaleData() %&gt;%  RunPCA(verbose=FALSE) %&gt;% FindNeighbors(dims = 1:10, verbose=FALSE) %&gt;% FindClusters(resolution = 0.1, verbose=FALSE) %&gt;% RunUMAP(dims=1:10, verbose=FALSE)\n\nNormalizing layer: counts\nFinding variable features for layer counts\nCentering and scaling data matrix\n\nDimPlot(obj, label=TRUE, label.size = 5, label.box = TRUE)",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Allele-specific gene expression analysis"
    ]
  },
  {
    "objectID": "Yano_ASE.html#perform-allele-specific-gene-expression-analysis-by-using-snv-anchors",
    "href": "Yano_ASE.html#perform-allele-specific-gene-expression-analysis-by-using-snv-anchors",
    "title": "Alelle specific gene expression analysis for single cell RNA sequencing",
    "section": "1. Perform allele-specific gene expression analysis by using SNV anchors",
    "text": "1. Perform allele-specific gene expression analysis by using SNV anchors\nIn this vignette, when a genetic variant is detected, all possible alleles at that location, including both alternative alleles and the reference allele, are annotated and counted. Therefore, genetic variants refer to both alternative alleles and the reference allele in this context.\n\nvar &lt;- ReadPISA(\"./var\")\nobj[['var']] &lt;- CreateAssayObject(var[,colnames(obj)], min.cells = 10)\n# Switch working assay to 'var'\nDefaultAssay(obj) &lt;- \"var\"\n\nobj &lt;- NormalizeData(obj)\n\n# you can skip to read GTF again if you already load it\ngtf &lt;- gtf2db(\"./gencode.v44.annotation.gtf.gz\")\n\n[2024-10-21 14:03:36] \u001b[32mGTF loading..\u001b[0m\n[2024-10-21 14:04:04] \u001b[32mLoad 62700 genes.\u001b[0m\n[2024-10-21 14:04:04] \u001b[32mLoad time : 27.800 sec\u001b[0m\n\n# At this moment the meta infomation for genetic variant assay is still empty\nobj[['var']][[]] %&gt;% head\n\ndata frame with 0 columns and 6 rows\n\nobj &lt;- annoVAR(obj, gtf = gtf)\n\nParse names ..\n\n\n\u001b[33m[warnings] Chromosome KI270442.1 not found in GTF, use wrong database? \u001b[0m\n\u001b[33m[warnings] Chromosome KI270729.1 not found in GTF, use wrong database? \u001b[0m\n\u001b[33m[warnings] Chromosome GL000205.2 not found in GTF, use wrong database? \u001b[0m\n\u001b[33m[warnings] Chromosome GL000195.1 not found in GTF, use wrong database? \u001b[0m\n\u001b[33m[warnings] Chromosome GL000218.1 not found in GTF, use wrong database? \u001b[0m\n\u001b[33m[warnings] Chromosome KI270737.1 not found in GTF, use wrong database? \u001b[0m\n\u001b[33m[warnings] Chromosome KI270713.1 not found in GTF, use wrong database? \u001b[0m\n\u001b[33m[warnings] Chromosome KI270733.1 not found in GTF, use wrong database? \u001b[0m\n\u001b[33m[warnings] Chromosome GL000219.1 not found in GTF, use wrong database? \u001b[0m\n\u001b[33m[warnings] Chromosome GL000216.2 not found in GTF, use wrong database? \u001b[0m\n\n# After annotation, the locations are parsed from the feature name, and overlapped gene are also annotated.\nobj[['var']][[]] %&gt;% head %&gt;% knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nchr\nstart\nref\nalt\nstrand\nlocus\ngene_name\ntype\n\n\n\n\nchr1:633192G=/+\nchr1\n633192\nG\nG\n+\nchr1:633192/+\nMTCO2P12\nexon\n\n\nchr1:1000079A&gt;G/-\nchr1\n1000079\nA\nG\n-\nchr1:1000079/-\nHES4\nutr5\n\n\nchr1:1000731C=/+\nchr1\n1000731\nC\nC\n+\nchr1:1000731/+\nISG15\nupstream\n\n\nchr1:1000814A&gt;G/+\nchr1\n1000814\nA\nG\n+\nchr1:1000814/+\nISG15\nupstream\n\n\nchr1:1000830C&gt;A/+\nchr1\n1000830\nC\nA\n+\nchr1:1000830/+\nISG15\nupstream\n\n\nchr1:1014228G=/+\nchr1\n1014228\nG\nG\n+\nchr1:1014228/+\nISG15\nutr5\n\n\n\n\n# Select autocorrlated genetic variants \nobj &lt;- RunAutoCorr(obj)\n\nWorking on assay : var\n\n\nRun autocorrelation test for 41603 features.\n\n\nRuntime : 6.469093 secs\n\nobj &lt;- SetAutoCorrFeatures(obj)\n\n13908 autocorrelated features.\n\n\nIn the alternative splicing analysis, we use mode 1 (the default mode). However, for allele-specific gene expression, we switch to mode 2 to compare the expression of an SNV with other SNVs at the same location. Since no binding assay is specified, the records at the same locus are first aggregated, and then the test feature is subtracted from the aggregated data (mode 2).\n\nobj &lt;- RunBlockCorr(object = obj, bind.name = \"locus\", mode = 2)\n\nWorking on assay var.\n\n\nProcessing 13908 features.\n\n\nProcessing 11863 blocks.\n\n\nNo bind.assay specified, update min.features.per.block to 2.\n\n\nAggregate counts.\n\n\nUsing 15 threads.\n\n\nUsing method \"D\" with mode 2.\n\n\nUse predefined weight matrix \"pca_wm\".\n\n\nRuntime : 1.236972 mins.\n\nsel.chrs &lt;- c(1:21, \"X\")\nFbtPlot(obj, val = \"locus.padj\", remove.chr = TRUE, sel.chrs = sel.chrs)\n\n\n\n\n\n\n\n# We could also zoom in specific region\n# Interesting, we can found the peak at chromosome 6 is located at 3' of gene HLA-J\nFbtPlot(obj, val = \"locus.padj\", chr=\"chr6\", start = 30000000, end = 30020000, gtf = gtf)\n\nZoom in chr6 : 29999000-30021000\n\n\n\n\n\n\n\n\n# Let's random pick a pair of features at the same locus\nobj[['var']][[]] %&gt;% filter(locus.padj &lt; 1e-6) %&gt;% knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nchr\nstart\nref\nalt\nstrand\nlocus\ngene_name\ntype\nmoransi.pval\nmoransi\nautocorr.variable\nlocus.D\nlocus.r\nlocus.pval\nlocus.mean\nlocus.var\nlocus.padj\n\n\n\n\nchr1:87328836C&gt;G/+\nchr1\n87328836\nC\nG\n+\nchr1:87328836/+\nLMO4\nupstream\n0e+00\n0.2847268\nTRUE\n0.3741513\n0.2951529\n0\n0.1369521\n0.0193356\n0e+00\n\n\nchr10:3136689C&gt;T/+\nchr10\n3136689\nC\nT\n+\nchr10:3136689/+\nPFKP\nutr3\n0e+00\n0.0737779\nTRUE\n0.2726127\n0.0231785\n0\n0.1341919\n0.0194997\n0e+00\n\n\nchr10:12250345A&gt;G/+\nchr10\n12250345\nA\nG\n+\nchr10:12250345/+\nCDC123\nutr3\n0e+00\n0.0409800\nTRUE\n0.3206669\n-0.3938907\n0\n0.1337098\n0.0196854\n0e+00\n\n\nchr10:12250345A=/+\nchr10\n12250345\nA\nA\n+\nchr10:12250345/+\nCDC123\nutr3\n2e-07\n0.0209383\nTRUE\n0.2848129\n-0.3938907\n0\n0.1339931\n0.0217665\n1e-07\n\n\nchr10:17237326C&gt;T/+\nchr10\n17237326\nC\nT\n+\nchr10:17237326/+\nVIM\nutr3\n0e+00\n0.6973703\nTRUE\n0.8887915\n-0.0716207\n0\n0.1324497\n0.0262362\n0e+00\n\n\nchr10:17237326C=/+\nchr10\n17237326\nC\nC\n+\nchr10:17237326/+\nVIM\nutr3\n0e+00\n0.5901062\nTRUE\n0.8177534\n-0.0716207\n0\n0.1353377\n0.0231055\n0e+00\n\n\nchr10:62069780C=/+\nchr10\n62069780\nC\nC\n+\nchr10:62069780/+\nARID5B\nutr3\n0e+00\n0.1063609\nTRUE\n0.3842072\n-0.1395669\n0\n0.1365213\n0.0245408\n0e+00\n\n\nchr10:62069780C&gt;T/+\nchr10\n62069780\nC\nT\n+\nchr10:62069780/+\nARID5B\nutr3\n0e+00\n0.1150453\nTRUE\n0.3927766\n-0.1395669\n0\n0.1339618\n0.0221892\n0e+00\n\n\nchr10:71816550C=/-\nchr10\n71816550\nC\nC\n-\nchr10:71816550/-\nPSAP\nutr3\n0e+00\n0.3131290\nTRUE\n0.4566285\n0.1929786\n0\n0.1346446\n0.0208746\n0e+00\n\n\nchr14:70326287A&gt;G/-\nchr14\n70326287\nA\nG\n-\nchr14:70326287/-\nCOX16,SYNJ2BP-COX16\nmultigenes\n0e+00\n0.0937174\nTRUE\n0.2402538\n0.2599863\n0\n0.1333912\n0.0161020\n3e-07\n\n\nchr2:74969604A&gt;G/+\nchr2\n74969604\nA\nG\n+\nchr2:74969604/+\nPOLE4\nutr3\n0e+00\n0.0831258\nTRUE\n0.3735274\n-0.2156281\n0\n0.1367878\n0.0238660\n0e+00\n\n\nchr20:63521948T&gt;G/+\nchr20\n63521948\nT\nG\n+\nchr20:63521948/+\nPPDPF\nutr3\n0e+00\n0.1234781\nTRUE\n0.2714920\n0.2427846\n0\n0.1361309\n0.0210482\n7e-07\n\n\nchr20:63521953A&gt;C/+\nchr20\n63521953\nA\nC\n+\nchr20:63521953/+\nPPDPF\nutr3\n0e+00\n0.1057650\nTRUE\n0.3202730\n0.0492431\n0\n0.1350250\n0.0163272\n0e+00\n\n\nchr6:30009771C&gt;G/+\nchr6\n30009771\nC\nG\n+\nchr6:30009771/+\nENSG00000290574\nexon\n0e+00\n0.0512442\nTRUE\n0.2910770\n-0.1724933\n0\n0.1352401\n0.0239597\n6e-07\n\n\nchr6:30009772T&gt;C/+\nchr6\n30009772\nT\nC\n+\nchr6:30009772/+\nENSG00000290574\nexon\n0e+00\n0.0518072\nTRUE\n0.2889873\n-0.1577786\n0\n0.1349317\n0.0225212\n1e-07\n\n\nchr6:30009773G&gt;T/+\nchr6\n30009773\nG\nT\n+\nchr6:30009773/+\nENSG00000290574\nexon\n0e+00\n0.0518087\nTRUE\n0.3019921\n-0.2096809\n0\n0.1344433\n0.0238232\n1e-07\n\n\nchr6:30009808A&gt;G/+\nchr6\n30009808\nA\nG\n+\nchr6:30009808/+\nENSG00000290574\nexon\n0e+00\n0.0506208\nTRUE\n0.2975530\n-0.2043567\n0\n0.1351984\n0.0222195\n0e+00\n\n\nchr6:31268945C&gt;T/-\nchr6\n31268945\nC\nT\n-\nchr6:31268945/-\nHLA-C\nutr3\n0e+00\n0.2910691\nTRUE\n0.3702501\n0.3125711\n0\n0.1365832\n0.0219892\n0e+00\n\n\nchrM:8860A&gt;G/+\nchrM\n8860\nA\nG\n+\nchrM:8860/+\nMT-ATP6\nexon\n0e+00\n0.1550720\nTRUE\n0.3065418\n0.2258546\n0\n0.1356581\n0.0162168\n0e+00\n\n\n\n\nFeaturePlot(obj, features = c(\"chr10:17237326C&gt;T/+\", \"chr10:17237326C=/+\", \"VIM\" ), order=TRUE, pt.size = 1, ncol=3)\n\nWarning: Could not find VIM in the default search locations, found in 'RNA'\nassay instead\n\n\n\n\n\n\n\n\n\nIt appears that the T allele of the gene VIM is expressed in most cell groups, while the C allele seems to be primarily expressed in groups 1 and 4.\nUsing our spatial dissimilarity analysis method, we have identified many cases of allele-specific gene expression. This phenomenon can be influenced by several known and unknown mechanisms, including gene imprinting, genetic recombination, and somatic variants during cell or disease development. While we won’t explore these mechanisms in detail here, you can refer to our manuscript, which includes several case studies dedicated to this topic.\n\n# Save the Seurat object for further use\nsaveRDS(obj, file = \"glioblastoma5k.rds\")\n\n\nCommand(obj)\n\n [1] \"NormalizeData.RNA\"        \"FindVariableFeatures.RNA\"\n [3] \"ScaleData.RNA\"            \"RunPCA.RNA\"              \n [5] \"FindNeighbors.RNA.pca\"    \"FindClusters\"            \n [7] \"RunUMAP.RNA.pca\"          \"NormalizeData.var\"       \n [9] \"ParseVarName.var\"         \"annoVAR.var\"             \n[11] \"RunAutoCorr.var.pca\"      \"SetAutoCorrFeatures.var\" \n[13] \"RunBlockCorr.var.pca\"",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Allele-specific gene expression analysis"
    ]
  },
  {
    "objectID": "fastq.html",
    "href": "fastq.html",
    "title": "The FASTQ+ Format Specification",
    "section": "",
    "text": "The FASTQ+ format is a variant of the FASTQ. It is designed to store more features or annotations for FASTQ records but not change the own property of the FASTQ structure. Each FASTQ+ record consists of four lines.\nThe optional fields of FASTQ+ is consist of numbers of tags in TAG:TYPE:VALUE format. The tag format is inherited from the SAM tag format (https://samtools.github.io/hts-specs/SAMv1.pdf). The TAG is a two-character string that matches /[A-Za-z][A-Za-z0-9]/. TYPE is a single case-sensitive letter, which defines the format of VALUE. Tags in optional fields are separated by three ’’ characters. No space allowed in the sequence identifier and optional fields. The total length of the first line should not exceed 254 characters."
  },
  {
    "objectID": "fastq.html#an-example",
    "href": "fastq.html#an-example",
    "title": "The FASTQ+ Format Specification",
    "section": "An example",
    "text": "An example\nIn the example below, SEQ_ID is the sequence identifier that users can set or generate by software. CB is the recommended tag name for the corrected cell barcode, GN is the recommended tag for gene name, and UB is the recommended tag for UMI.\n\n@SEQ_ID|||CB:Z:ACGT|||GN:Z:BRCA1|||UB:Z:AACG\nGATTTGGGGTTCAAAGCAGTATCGA\n+\n1***-+*''))**5&gt;&gt;CCCCCCC65"
  },
  {
    "objectID": "fastq.html#optional-tag-fields",
    "href": "fastq.html#optional-tag-fields",
    "title": "The FASTQ+ Format Specification",
    "section": "Optional tag fields",
    "text": "Optional tag fields\nAll optional tags for FASTQ+ follow the SAM tag format but add two more restrictions.\n\nSAM tags allow space in type Z, but not allowed in FASTQ+ tags.\nThe length of SAM tags is not limited, but FASTQ+ read identifier and tags are specified to be no longer than 254 characters.\n\n\n\n\n\n\n\n\n\n\nType\nRegexp matching VALUE\nDescription\n\n\n\n\nA\n[!-]\nPrintable character\n\n\ni\n[-+]?[0-9]+\nSigned integer\n\n\nf\n[-+]?[0-9]*.?[0-9]+([eE][-+]?[0-9]+)?\nSigned single-precision floating number\n\n\nZ\n[!-]*\nPrintable string.\n\n\nH\n([0-9A-F][0-9A-F])*\nByte array in the Hex format\n\n\nB\n[cCsSiIf](,[-+]?[0-9]*.?[0-9]+([eE][-+]?[0-9]+)?)*\nInteger or numberic array"
  },
  {
    "objectID": "fastq.html#recommended-tag-names-and-types-for-single-cell-experiments",
    "href": "fastq.html#recommended-tag-names-and-types-for-single-cell-experiments",
    "title": "The FASTQ+ Format Specification",
    "section": "Recommended tag names and types for single cell experiments",
    "text": "Recommended tag names and types for single cell experiments\nThe following tag names and types have been widely used in single-cell experiments. Although it is not required but highly recommended following the exact definition.\n\n\n\n\n\n\n\n\n\nTag name\nType\nDescription\n\n\n\n\nCR\nZ\nRaw cell barcode.\n\n\nCB\nZ\nCell barcode that is confirmed against a list of known-good barcode sequences.\n\n\nUR\nZ\nRaw molecular barcode. Usually be unique molecule indentifer (UMI).\n\n\nUB\nZ\nMolecular barcode that is corrected among other molecule barcodes.\n\n\nGN\nZ\nGene name.\n\n\nTX\nZ\nTranscript id.\n\n\nGX\nZ\nGene id."
  },
  {
    "objectID": "fastq.html#read-block",
    "href": "fastq.html#read-block",
    "title": "The FASTQ+ Format Specification",
    "section": "Read block",
    "text": "Read block\nA combination of tags can define the FASTQ+ block. Reads with the same tags can be selected and manipulated in a group. For example, SEQ1, SEQ2, and SEQ3 share the same cell barcode, and SEQ2 and SEQ3 share the same gene name but not for SEQ1. Using CB to define the block, all these three reads are from the same block. But if using CB and GN to determine the block, SEQ2 and SEQ3 are from the same block, different from SEQ1. Sorting the FASTQ+ file by tags can facilitate downstream analysis, i.e., assembly, for each block to be processed sequentially.\n\n@SEQ1|||CB:Z:ACGT|||GN:Z:BRCA1\nGATTTGGGGTTCAAAGCAGTATCGA\n+\n1***-+*''))**5&gt;&gt;CCCCCCC65\n@SEQ2|||CB:Z:ACGT|||GN:Z:SAA1\nACACTCGAAGATACAGAAATGAGTA\n+\nEEEEEE6/E/EEEAEEEE/E/EEE&lt;\n@SEQ3|||CB:Z:ACGT|||GN:Z:SAA1\nTATCGACAGGAAGAAGGAGGGAGGG\n+\nAE/EE&lt;/AEEEAEEEEE//AA/EEE"
  },
  {
    "objectID": "fastq.html#v1.0-apr-2022",
    "href": "fastq.html#v1.0-apr-2022",
    "title": "The FASTQ+ Format Specification",
    "section": "v1.0 : Apr 2022",
    "text": "v1.0 : Apr 2022\nInitial edition."
  },
  {
    "objectID": "anno.html",
    "href": "anno.html",
    "title": "Count gene, exon, junction and SNV expression from a BAM file",
    "section": "",
    "text": "The following vignette demonstrates how to generate various feature counts from an alignment BAM file. Here we use a 10X demo data of human glioblastoma cells. The description of data can be found at https://www.10xgenomics.com/datasets/human-glioblastoma-multiforme-3-v-3-whole-transcriptome-analysis-3-standard-4-0-0.",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Annotate various features"
    ]
  },
  {
    "objectID": "anno.html#prepare-the-raw-data-and-reference",
    "href": "anno.html#prepare-the-raw-data-and-reference",
    "title": "Count gene, exon, junction and SNV expression from a BAM file",
    "section": "Prepare the raw data and reference",
    "text": "Prepare the raw data and reference\n\nDownload alignment data (BAM). (~14G).\n\n\nThe following file is used for variant calling and allele specific gene expression. It can be skipped for alternative splicing analysis.\n\nBAM Index File (for variant calling): Download BAM index\nHuman Reference Databases and Gene Annotation Files:\n\nGRCh38.p13 genome\nGencode v44 annotation",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Annotate various features"
    ]
  },
  {
    "objectID": "anno.html#programs-we-will-use",
    "href": "anno.html#programs-we-will-use",
    "title": "Count gene, exon, junction and SNV expression from a BAM file",
    "section": "Programs we will use",
    "text": "Programs we will use\n\nPISA (&gt;=v1.3) (https://github.com/shiquan/PISA)\nbcftools (https://github.com/samtools/bcftools)\nsamtools (https://github.com/samtools/samtools)",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Annotate various features"
    ]
  },
  {
    "objectID": "anno.html#step-by-step-tutorial",
    "href": "anno.html#step-by-step-tutorial",
    "title": "Count gene, exon, junction and SNV expression from a BAM file",
    "section": "Step by step tutorial",
    "text": "Step by step tutorial\n\n1. Genetic variants calling\n# Unpack the FASTA file\ngzip -d GRCh38.p13.genome.fa.gz\n\n# Build the FASTA index\nsamtools faidx GRCh38.p13.genome.fa\n\n# Perform variant calling\nbcftools mpileup -Ou -f GRCh38.p13.genome.fa ./Parent_SC3v3_Human_Glioblastoma_possorted_genome_bam.bam  | bcftools call -vmO z -o var.vcf.gz\nNotes:\n\nWhile several new methods for genetic variant calling have been developed, the basic principle remains the same: identifying differences between sequence reads and the reference genome. For simplicity, we are using the ‘traditional’ bcftools approach.\nThere is no need to filter raw genetic variants by sequencing depth or strand bias tests. Since this is strand-specific RNA sequencing data, strand bias is expected in many cases. Instead, the feature expression matrix can be filtered by cells during downstream analysis.\n\n\n\n2. Annotate various features\nThe following command generates gene, transcript, exon, exon skipped reads, junction and genetic variant for each alignment:\nPISA anno -gtf gencode.v44.annotation.gtf.gz -exon -psi -vcf var.vcf.gz -ref-alt -o anno.bam Parent_SC3v3_Human_Glioblastoma_possorted_genome_bam.bam \nThe above command will annotate genes, exons, junctions, and genetic variants all at once. However, it is also possible to annotate different features sequentially. For example, the command below produces the same results as the previous one, but allows for stepwise annotation.\nPISA anno -gtf gencode.v44.annotation.gtf.gz -exon -psi -o anno1.bam Parent_SC3v3_Human_Glioblastoma_possorted_genome_bam.bam \nPISA anno -vcf var.vcf.gz -ref-alt -o anno2.bam anno1.bam\nNotes:\n\n-exon: Generates exon and junction names.\n-psi: Generate labels for exon skipped reads, named after the skipped exons.\n-ref-alt: For genetic variants, both reference allele and alternative allele will be annotated. If not set, reference allele will be ignored. This option is important for alelle-specific gene expression.\n\nComparing raw and annotated records.\n\n# A original record\nsamtools view Parent_SC3v3_Human_Glioblastoma_possorted_genome_bam.bam  |head -n 3000|grep 'A00836:286:HMTMVDMXX:2:2354:8422:1391'\n\nA00836:286:HMTMVDMXX:2:2354:8422:1391   16  chr1    89995   255 56M236N35M  *   0   0   TTGGTCTCTCTTGCTGCCCTGGAGACCAGCTGCCCCACGAAGGAACCAGAGCCAACCTGCTGCTTCCTGGAGGAAGACAGTCCCTCTGTCC FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFF NH:i:6  HI:i:3  AS:i:89 nM:i:1  RG:Z:Parent_SC3v3_Human_Glioblastoma:0:1:HMTMVDMXX:2    TX:Z:ENST00000495576,+784,91M   GX:Z:ENSG00000239945    GN:Z:AL627309.3 fx:Z:ENSG00000239945    RE:A:E  MM:i:1  xf:i:25 CR:Z:AGATGAATCTACGCGG   CY:Z:FFFFFFFFFF,FFFFF   CB:Z:AGATGAATCTACGCGG-1 UR:Z:TTTCATGCCTCA   UY:Z:FFFFFFFFFFFF   UB:Z:TTTCATGCCTCA\n\n\n\n# the same record after annotation\nsamtools view anno.bam | head -n 3000|grep 'A00836:286:HMTMVDMXX:2:2354:8422:1391'\n\nA00836:286:HMTMVDMXX:2:2354:8422:1391   16  chr1    89995   255 56M236N35M  *   0   0   TTGGTCTCTCTTGCTGCCCTGGAGACCAGCTGCCCCACGAAGGAACCAGAGCCAACCTGCTGCTTCCTGGAGGAAGACAGTCCCTCTGTCC FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFF NH:i:6  HI:i:3  AS:i:89 nM:i:1  RG:Z:Parent_SC3v3_Human_Glioblastoma:0:1:HMTMVDMXX:2    fx:Z:ENSG00000239945    MM:i:1  xf:i:25 CR:Z:AGATGAATCTACGCGG   CY:Z:FFFFFFFFFF,FFFFF   CB:Z:AGATGAATCTACGCGG-1 UR:Z:TTTCATGCCTCA   UY:Z:FFFFFFFFFFFF   UB:Z:TTTCATGCCTCA   RE:A:S  GX:Z:ENSG00000239945.1  GN:Z:ENSG00000239945    TX:Z:ENST00000495576.1  EX:Z:chr1:89551-90050/-/ENSG00000239945,chr1:90287-91105/-/ENSG00000239945  JC:Z:chr1:90050-90287/-/ENSG00000239945 VR:Z:chr1:90040A&gt;C/-\n\n\nNotes:\n\nPISA anno generates GN, TX, RE, and GX tags when the -gtf option is set. Original tag values are replaced, and PISA uses a slightly different annotation strategy than CellRanger, see details here. In the example above, the RE tag has been changed from E (exon) to S (spliced).\nWhen the -exon option is used, EX and JC tags are annotated only if the read has a GN tag.\nWhen the -psi option is used, ER tag is annotated, the label for ER is the exon name which indicate the read skip this exon.\n\n\n\n3. Generate Cell X feature expression matrix\nmkdir gene\nmkdir exon\nmkdir exclude\nmkdir junction\nmkdir var\n\nPISA count -tags CB -anno-tag GN -umi UB -outdir gene anno.bam\nPISA count -tags CB -anno-tag EX -umi UB -outdir exon anno.bam\nPISA count -tags CB -anno-tag ER -umi UB -outdir exclude anno.bam\nPISA count -tags CB -anno-tag JC -umi UB -outdir junction anno.bam\nPISA count -tags CB -anno-tag VF -umi UB -outdir var anno.bam\nNotes: These commands will generate raw counts for all droplets. Although the -list parameter can be used to export only selected cells with PISA anno, cell selection may sometimes lack robustness. Therefore, it is safer to store the raw matrix file for long-term storage.\n\nls gene/\n\nbarcodes.tsv.gz\nfeatures.tsv.gz\nmatrix.mtx.gz\n\n\n\nzcat gene/barcodes.tsv.gz|head\n\nTTCCACGGTTCGGCTG-1\nGTGCTTCGTAATGTGA-1\nCACAGGCAGCTGGTGA-1\nTGGCGTGGTGCAACGA-1\nATCTCTAGTCCATAGT-1\nAGCGCCACAAGCGATG-1\nCGAGTTAGTGTCGATT-1\nGTCAAGTCAGGCTCTG-1\nGGGTAGATCCCGTTGT-1\nGGGACAAAGAGGTATT-1\n\n\n\nzcat gene/features.tsv.gz|head\n\nMIR1302-2HG\nENSG00000238009\nENSG00000239945\nENSG00000268903\nENSG00000241860\nWASH9P\nENSG00000228463\nENSG00000286448\nENSG00000236601\nENSG00000230021\n\n\n\nzcat gene/matrix.mtx.gz|head\n\n%%MatrixMarket matrix coordinate integer general\n% Generated by PISA v1.3\n37178   967922  23596723\n1   1   1\n1   2   1\n2   3   1\n2   4   1\n2   5   1\n2   6   1\n2   7   1\n\n\n\nzcat exon/features.tsv.gz|head\n\nchr1:29554-30039/+/MIR1302-2HG\nchr1:30564-30667/+/MIR1302-2HG\nchr1:89295-91629/-/ENSG00000238009\nchr1:89551-90050/-/ENSG00000239945\nchr1:90287-91105/-/ENSG00000239945\nchr1:135141-135895/-/ENSG00000268903\nchr1:141474-143011/-/ENSG00000241860\nchr1:146386-149707/-/ENSG00000241860\nchr1:142808-143011/-/ENSG00000241860\nchr1:146386-146509/-/ENSG00000241860\n\n\n\nzcat junction/features.tsv.gz|head\n\nchr1:30039-30564/+/MIR1302-2HG\nchr1:90050-90287/-/ENSG00000239945\nchr1:143011-146386/-/ENSG00000241860\nchr1:165942-168100/-/ENSG00000241860\nchr1:168165-168610/-/ENSG00000241860\nchr1:805891-808574/-/ENSG00000290784\nchr1:805891-808574/-/ENSG00000230092\nchr1:827775-829003/+/LINC01128\nchr1:829104-847654/+/LINC01128\nchr1:852110-852671/+/LINC01128\n\n\nThe format for exon and junction names is “chr:pos reference_allele&gt;alternative_allele/strand” for alternative alleles, or “chr:pos=/strand” for reference allele.\n\n# the format of expressed genetic variant is \nzcat var/features.tsv.gz|head\n\nchr1:51716G&gt;A/+\nchr1:90040A&gt;C/-\nchr1:136048C&gt;T/+\nchr1:187485G&gt;A/-\nchr1:511685T&gt;C/-\nchr1:511685T=/-\nchr1:629072A&gt;G/+\nchr1:629081A&gt;G/+\nchr1:629087A&gt;G/+\nchr1:629087A=/+\n\n\nNotes: By default, the parameters for PISA anno are strand-sensitive. For non-strand-sensitive libraries, such as Smartseq2, the strand should be ignored by using the -is option.\n\n\nQuestions?\nIf you have any questions regarding this workflows, please feel free to report them through the github issues.\nIf you have any ideas or suggestions regarding PISA annotation, please refer to the Yano discussion forum. Since PISA is commonly used alongside Yano, it may not be necessary to host separate forums for each.",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Annotate various features"
    ]
  },
  {
    "objectID": "Yano_anno.html",
    "href": "Yano_anno.html",
    "title": "Annotating and prioritizing genetic variants for single cell RNA sequencing",
    "section": "",
    "text": "This vignette demonstrates how Yano can annotate genetic variants using public databases and assist users in interpreting the functional impact of these variants.",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Annotating genetic variants"
    ]
  },
  {
    "objectID": "Yano_anno.html#annotate-genetic-variants",
    "href": "Yano_anno.html#annotate-genetic-variants",
    "title": "Annotating and prioritizing genetic variants for single cell RNA sequencing",
    "section": "Annotate genetic variants",
    "text": "Annotate genetic variants\nOne key advancement in genetic variant studies is the ability to perform functional interpretation and annotation using genotype-phenotype and allele frequency databases. For demonstration purposes, we use the ClinVar database for annotation in this vignette.\n# download the database in VCF format\nwget -c  https://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/clinvar.vcf.gz\n\n# remeber to index this database, otherwise annoVAR will report error.\nbcftools index clinvar.vcf.gz\nLet’s take a look at the format of the ClinVar database. As noted, the chromosome names are in the NCBI style, meaning they do not include the “chr” prefix. Therefore, we need to generate a new column with chromosome names formatted for annotation.\n\nbcftools view clinvar.vcf.gz| grep -v \"^#\"| head\n\n1   69134   2205837 A   G   .   .   ALLELEID=2193183;CLNDISDB=MedGen:CN169374;CLNDN=not_specified;CLNHGVS=NC_000001.11:g.69134A&gt;G;CLNREVSTAT=criteria_provided,_single_submitter;CLNSIG=Likely_benign;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;GENEINFO=OR4F5:79501;MC=SO:0001583|missense_variant;ORIGIN=1\n1   69314   3205580 T   G   .   .   ALLELEID=3374047;CLNDISDB=MedGen:CN169374;CLNDN=not_specified;CLNHGVS=NC_000001.11:g.69314T&gt;G;CLNREVSTAT=criteria_provided,_single_submitter;CLNSIG=Uncertain_significance;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;GENEINFO=OR4F5:79501;MC=SO:0001583|missense_variant;ORIGIN=1\n1   69423   3205581 G   A   .   .   ALLELEID=3374048;CLNDISDB=MedGen:CN169374;CLNDN=not_specified;CLNHGVS=NC_000001.11:g.69423G&gt;A;CLNREVSTAT=criteria_provided,_single_submitter;CLNSIG=Uncertain_significance;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;GENEINFO=OR4F5:79501;MC=SO:0001583|missense_variant;ORIGIN=1\n1   69581   2252161 C   G   .   .   ALLELEID=2238986;CLNDISDB=MedGen:CN169374;CLNDN=not_specified;CLNHGVS=NC_000001.11:g.69581C&gt;G;CLNREVSTAT=criteria_provided,_single_submitter;CLNSIG=Uncertain_significance;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;GENEINFO=OR4F5:79501;MC=SO:0001583|missense_variant;ORIGIN=1\n1   69682   2396347 G   A   .   .   ALLELEID=2386655;CLNDISDB=MedGen:CN169374;CLNDN=not_specified;CLNHGVS=NC_000001.11:g.69682G&gt;A;CLNREVSTAT=criteria_provided,_single_submitter;CLNSIG=Uncertain_significance;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;GENEINFO=OR4F5:79501;MC=SO:0001583|missense_variant;ORIGIN=1\n1   69731   3205582 T   C   .   .   ALLELEID=3374049;CLNDISDB=MedGen:CN169374;CLNDN=not_specified;CLNHGVS=NC_000001.11:g.69731T&gt;C;CLNREVSTAT=criteria_provided,_single_submitter;CLNSIG=Uncertain_significance;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;GENEINFO=OR4F5:79501;MC=SO:0001583|missense_variant;ORIGIN=1\n1   69769   2288999 T   C   .   .   ALLELEID=2278803;CLNDISDB=MedGen:CN169374;CLNDN=not_specified;CLNHGVS=NC_000001.11:g.69769T&gt;C;CLNREVSTAT=criteria_provided,_single_submitter;CLNSIG=Uncertain_significance;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;GENEINFO=OR4F5:79501;MC=SO:0001583|missense_variant;ORIGIN=1\n1   69995   2351346 G   C   .   .   ALLELEID=2333177;CLNDISDB=MedGen:CN169374;CLNDN=not_specified;CLNHGVS=NC_000001.11:g.69995G&gt;C;CLNREVSTAT=criteria_provided,_single_submitter;CLNSIG=Uncertain_significance;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;GENEINFO=OR4F5:79501;MC=SO:0001583|missense_variant;ORIGIN=1\n1   925946  1924157 C   G   .   .   ALLELEID=1983057;CLNDISDB=MedGen:C3661900;CLNDN=not_provided;CLNHGVS=NC_000001.11:g.925946C&gt;G;CLNREVSTAT=criteria_provided,_single_submitter;CLNSIG=Uncertain_significance;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;GENEINFO=SAMD11:148398;MC=SO:0001583|missense_variant;ORIGIN=1\n1   925952  1019397 G   A   .   .   ALLELEID=1003021;CLNDISDB=MedGen:C3661900;CLNDN=not_provided;CLNHGVS=NC_000001.11:g.925952G&gt;A;CLNREVSTAT=criteria_provided,_single_submitter;CLNSIG=Uncertain_significance;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;GENEINFO=SAMD11:148398;MC=SO:0001583|missense_variant;ORIGIN=1;RS=1640863258\n\n\nLoad the object which generated from allele specific gene expression from scRNA-seq.\n\nrequire(Yano)\n\nLoading required package: Yano\n\n\n── Attaching packages ────────────────────────────────────────────── Yano 1.0 ──\n✔ dplyr   1.1.4     ✔ Seurat  5.1.0\n✔ ggplot2 3.5.1     \n\nobj &lt;- readRDS(\"glioblastoma5k.rds\")\nDefaultAssay(obj) &lt;- \"var\"\n\nWe need to create new chromosome names that are compatible with the NCBI database format.\n\nobj[['var']][['chr0']] &lt;- gsub(\"chr(.*)\",\"\\\\1\", obj[['var']][[]]$chr)\nobj[['var']][[]] %&gt;% head\n\n                   chr   start ref alt strand          locus gene_name     type\nchr1:633192G=/+   chr1  633192   G   G      +  chr1:633192/+  MTCO2P12     exon\nchr1:1000079A&gt;G/- chr1 1000079   A   G      - chr1:1000079/-      HES4     utr5\nchr1:1000731C=/+  chr1 1000731   C   C      + chr1:1000731/+     ISG15 upstream\nchr1:1000814A&gt;G/+ chr1 1000814   A   G      + chr1:1000814/+     ISG15 upstream\nchr1:1000830C&gt;A/+ chr1 1000830   C   A      + chr1:1000830/+     ISG15 upstream\nchr1:1014228G=/+  chr1 1014228   G   G      + chr1:1014228/+     ISG15     utr5\n                  moransi.pval     moransi autocorr.variable    locus.D\nchr1:633192G=/+   3.235392e-01 0.001330283             FALSE         NA\nchr1:1000079A&gt;G/- 1.270509e-01 0.004159267             FALSE         NA\nchr1:1000731C=/+  5.063894e-03 0.010004135              TRUE         NA\nchr1:1000814A&gt;G/+ 6.632273e-06 0.017655831              TRUE         NA\nchr1:1000830C&gt;A/+ 3.142598e-06 0.018340286              TRUE         NA\nchr1:1014228G=/+  3.650720e-80 0.079578829              TRUE 0.04032407\n                    locus.r locus.pval locus.mean  locus.var locus.padj chr0\nchr1:633192G=/+          NA         NA         NA         NA         NA    1\nchr1:1000079A&gt;G/-        NA         NA         NA         NA         NA    1\nchr1:1000731C=/+         NA         NA         NA         NA         NA    1\nchr1:1000814A&gt;G/+        NA         NA         NA         NA         NA    1\nchr1:1000830C&gt;A/+        NA         NA         NA         NA         NA    1\nchr1:1014228G=/+  0.8618829  0.9999916  0.1330176 0.02047667          1    1\n\n# here we annotate RS id and clinical signification for variants, to check the VCF header for all possible tags\nobj &lt;- annoVAR(obj, vcf = \"clinvar.vcf.gz\", chr = \"chr0\", tags = c(\"RS\", \"CLNSIG\"))\n\nParse names ..\n\n# The RS id and CLNSIG tag now created\nobj[['var']][[]] -&gt; df\nhead(df)\n\n                   chr   start ref alt strand          locus gene_name     type\nchr1:633192G=/+   chr1  633192   G   G      +  chr1:633192/+  MTCO2P12     exon\nchr1:1000079A&gt;G/- chr1 1000079   A   G      - chr1:1000079/-      HES4     utr5\nchr1:1000731C=/+  chr1 1000731   C   C      + chr1:1000731/+     ISG15 upstream\nchr1:1000814A&gt;G/+ chr1 1000814   A   G      + chr1:1000814/+     ISG15 upstream\nchr1:1000830C&gt;A/+ chr1 1000830   C   A      + chr1:1000830/+     ISG15 upstream\nchr1:1014228G=/+  chr1 1014228   G   G      + chr1:1014228/+     ISG15     utr5\n                  moransi.pval     moransi autocorr.variable    locus.D\nchr1:633192G=/+   3.235392e-01 0.001330283             FALSE         NA\nchr1:1000079A&gt;G/- 1.270509e-01 0.004159267             FALSE         NA\nchr1:1000731C=/+  5.063894e-03 0.010004135              TRUE         NA\nchr1:1000814A&gt;G/+ 6.632273e-06 0.017655831              TRUE         NA\nchr1:1000830C&gt;A/+ 3.142598e-06 0.018340286              TRUE         NA\nchr1:1014228G=/+  3.650720e-80 0.079578829              TRUE 0.04032407\n                    locus.r locus.pval locus.mean  locus.var locus.padj chr0\nchr1:633192G=/+          NA         NA         NA         NA         NA    1\nchr1:1000079A&gt;G/-        NA         NA         NA         NA         NA    1\nchr1:1000731C=/+         NA         NA         NA         NA         NA    1\nchr1:1000814A&gt;G/+        NA         NA         NA         NA         NA    1\nchr1:1000830C&gt;A/+        NA         NA         NA         NA         NA    1\nchr1:1014228G=/+  0.8618829  0.9999916  0.1330176 0.02047667          1    1\n                    RS CLNSIG\nchr1:633192G=/+   &lt;NA&gt;   &lt;NA&gt;\nchr1:1000079A&gt;G/- &lt;NA&gt;   &lt;NA&gt;\nchr1:1000731C=/+  &lt;NA&gt;   &lt;NA&gt;\nchr1:1000814A&gt;G/+ &lt;NA&gt;   &lt;NA&gt;\nchr1:1000830C&gt;A/+ &lt;NA&gt;   &lt;NA&gt;\nchr1:1014228G=/+  1921 Benign\n\n# We note that there are several pathogenic variants detected\ntable(df[['CLNSIG']])\n\n\n                                             association \n                                                       8 \n                                                  Benign \n                                                    1702 \n                                    Benign/Likely_benign \n                                                      47 \n            Conflicting_classifications_of_pathogenicity \n                                                       8 \nConflicting_classifications_of_pathogenicity|risk_factor \n                                                       2 \n                                           Likely_benign \n                                                      56 \n                no_classification_for_the_single_variant \n                                                       8 \n                                            not_provided \n                                                       1 \n                                                   other \n                                                      11 \n                            Pathogenic/Likely_pathogenic \n                                                       3 \n                                  Pathogenic|risk_factor \n                                                       1 \n                                             risk_factor \n                                                       5 \n                                  Uncertain_significance \n                                                      26 \n\ndf %&gt;% filter(CLNSIG %in% c('Pathogenic', 'Pathogenic/Likely_pathogenic', 'Pathogenic|risk_factor'))\n\n                      chr     start ref alt strand            locus\nchr1:97450058C=/-    chr1  97450058   C   C      -  chr1:97450058/-\nchr1:196690107C=/+   chr1 196690107   C   C      + chr1:196690107/+\nchr13:50945445G=/+  chr13  50945445   G   G      + chr13:50945445/+\nchr13:50945445G&gt;A/+ chr13  50945445   G   A      + chr13:50945445/+\n                              gene_name       type moransi.pval      moransi\nchr1:97450058C=/-                  DPYD     intron 4.368919e-01 0.0001360072\nchr1:196690107C=/+  CFH,ENSG00000289697 multigenes 3.903101e-61 0.0647296819\nchr13:50945445G=/+             RNASEH2B       utr3 1.374427e-06 0.0191248673\nchr13:50945445G&gt;A/+            RNASEH2B       utr3 7.057338e-07 0.0197286674\n                    autocorr.variable    locus.D   locus.r locus.pval\nchr1:97450058C=/-               FALSE         NA        NA         NA\nchr1:196690107C=/+               TRUE 0.07481304 0.7473314  0.9902322\nchr13:50945445G=/+               TRUE 0.11670969 0.3809105  0.8034837\nchr13:50945445G&gt;A/+              TRUE 0.12248441 0.3809105  0.7251275\n                    locus.mean  locus.var locus.padj chr0       RS\nchr1:97450058C=/-           NA         NA         NA    1  3918290\nchr1:196690107C=/+   0.1350459 0.02537402          1    1  1061170\nchr13:50945445G=/+   0.1316099 0.01736865          1   13 75184679\nchr13:50945445G&gt;A/+  0.1352893 0.02133448          1   13 75184679\n                                          CLNSIG\nchr1:97450058C=/-   Pathogenic/Likely_pathogenic\nchr1:196690107C=/+        Pathogenic|risk_factor\nchr13:50945445G=/+  Pathogenic/Likely_pathogenic\nchr13:50945445G&gt;A/+ Pathogenic/Likely_pathogenic\n\n\nIn the selected SNVs, we found some reference alleles are highlighted, such as chr15:92992967C=/+. These reference alelles are more like to be benign allele. Let’s query the orignal record in the clinvar database to check what exactly stituation it should be.\n\nbcftools view clinvar.vcf.gz 15:92992967-92992967\n\n##fileformat=VCFv4.1\n##FILTER=&lt;ID=PASS,Description=\"All filters passed\"&gt;\n##fileDate=2024-10-01\n##source=ClinVar\n##reference=GRCh38\n##ID=&lt;Description=\"ClinVar Variation ID\"&gt;\n##INFO=&lt;ID=AF_ESP,Number=1,Type=Float,Description=\"allele frequencies from GO-ESP\"&gt;\n##INFO=&lt;ID=AF_EXAC,Number=1,Type=Float,Description=\"allele frequencies from ExAC\"&gt;\n##INFO=&lt;ID=AF_TGP,Number=1,Type=Float,Description=\"allele frequencies from TGP\"&gt;\n##INFO=&lt;ID=ALLELEID,Number=1,Type=Integer,Description=\"the ClinVar Allele ID\"&gt;\n##INFO=&lt;ID=CLNDN,Number=.,Type=String,Description=\"ClinVar's preferred disease name for the concept specified by disease identifiers in CLNDISDB\"&gt;\n##INFO=&lt;ID=CLNDNINCL,Number=.,Type=String,Description=\"For included Variant : ClinVar's preferred disease name for the concept specified by disease identifiers in CLNDISDB\"&gt;\n##INFO=&lt;ID=CLNDISDB,Number=.,Type=String,Description=\"Tag-value pairs of disease database name and identifier submitted for germline classifications, e.g. OMIM:NNNNNN\"&gt;\n##INFO=&lt;ID=CLNDISDBINCL,Number=.,Type=String,Description=\"For included Variant: Tag-value pairs of disease database name and identifier for germline classifications, e.g. OMIM:NNNNNN\"&gt;\n##INFO=&lt;ID=CLNHGVS,Number=.,Type=String,Description=\"Top-level (primary assembly, alt, or patch) HGVS expression.\"&gt;\n##INFO=&lt;ID=CLNREVSTAT,Number=.,Type=String,Description=\"ClinVar review status of germline classification for the Variation ID\"&gt;\n##INFO=&lt;ID=CLNSIG,Number=.,Type=String,Description=\"Aggregate germline classification for this single variant; multiple values are separated by a vertical bar\"&gt;\n##INFO=&lt;ID=CLNSIGCONF,Number=.,Type=String,Description=\"Conflicting germline classification for this single variant; multiple values are separated by a vertical bar\"&gt;\n##INFO=&lt;ID=CLNSIGINCL,Number=.,Type=String,Description=\"Germline classification for a haplotype or genotype that includes this variant. Reported as pairs of VariationID:classification; multiple values are separated by a vertical bar\"&gt;\n##INFO=&lt;ID=CLNVC,Number=1,Type=String,Description=\"Variant type\"&gt;\n##INFO=&lt;ID=CLNVCSO,Number=1,Type=String,Description=\"Sequence Ontology id for variant type\"&gt;\n##INFO=&lt;ID=CLNVI,Number=.,Type=String,Description=\"the variant's clinical sources reported as tag-value pairs of database and variant identifier\"&gt;\n##INFO=&lt;ID=DBVARID,Number=.,Type=String,Description=\"nsv accessions from dbVar for the variant\"&gt;\n##INFO=&lt;ID=GENEINFO,Number=1,Type=String,Description=\"Gene(s) for the variant reported as gene symbol:gene id. The gene symbol and id are delimited by a colon (:) and each pair is delimited by a vertical bar (|)\"&gt;\n##INFO=&lt;ID=MC,Number=.,Type=String,Description=\"comma separated list of molecular consequence in the form of Sequence Ontology ID|molecular_consequence\"&gt;\n##INFO=&lt;ID=ONCDN,Number=.,Type=String,Description=\"ClinVar's preferred disease name for the concept specified by disease identifiers in ONCDISDB\"&gt;\n##INFO=&lt;ID=ONCDNINCL,Number=.,Type=String,Description=\"For included variant: ClinVar's preferred disease name for the concept specified by disease identifiers in ONCDISDBINCL\"&gt;\n##INFO=&lt;ID=ONCDISDB,Number=.,Type=String,Description=\"Tag-value pairs of disease database name and identifier submitted for oncogenicity classifications, e.g. MedGen:NNNNNN\"&gt;\n##INFO=&lt;ID=ONCDISDBINCL,Number=.,Type=String,Description=\"For included variant: Tag-value pairs of disease database name and identifier for oncogenicity classifications, e.g. OMIM:NNNNNN\"&gt;\n##INFO=&lt;ID=ONC,Number=.,Type=String,Description=\"Aggregate oncogenicity classification for this single variant; multiple values are separated by a vertical bar\"&gt;\n##INFO=&lt;ID=ONCINCL,Number=.,Type=String,Description=\"Oncogenicity classification for a haplotype or genotype that includes this variant. Reported as pairs of VariationID:classification; multiple values are separated by a vertical bar\"&gt;\n##INFO=&lt;ID=ONCREVSTAT,Number=.,Type=String,Description=\"ClinVar review status of oncogenicity classification for the Variation ID\"&gt;\n##INFO=&lt;ID=ONCCONF,Number=.,Type=String,Description=\"Conflicting oncogenicity classification for this single variant; multiple values are separated by a vertical bar\"&gt;\n##INFO=&lt;ID=ORIGIN,Number=.,Type=String,Description=\"Allele origin. One or more of the following values may be added: 0 - unknown; 1 - germline; 2 - somatic; 4 - inherited; 8 - paternal; 16 - maternal; 32 - de-novo; 64 - biparental; 128 - uniparental; 256 - not-tested; 512 - tested-inconclusive; 1073741824 - other\"&gt;\n##INFO=&lt;ID=RS,Number=.,Type=String,Description=\"dbSNP ID (i.e. rs number)\"&gt;\n##INFO=&lt;ID=SCIDN,Number=.,Type=String,Description=\"ClinVar's preferred disease name for the concept specified by disease identifiers in SCIDISDB\"&gt;\n##INFO=&lt;ID=SCIDNINCL,Number=.,Type=String,Description=\"For included variant: ClinVar's preferred disease name for the concept specified by disease identifiers in SCIDISDBINCL\"&gt;\n##INFO=&lt;ID=SCIDISDB,Number=.,Type=String,Description=\"Tag-value pairs of disease database name and identifier submitted for somatic clinial impact classifications, e.g. MedGen:NNNNNN\"&gt;\n##INFO=&lt;ID=SCIDISDBINCL,Number=.,Type=String,Description=\"For included variant: Tag-value pairs of disease database name and identifier for somatic clinical impact classifications, e.g. OMIM:NNNNNN\"&gt;\n##INFO=&lt;ID=SCIREVSTAT,Number=.,Type=String,Description=\"ClinVar review status of somatic clinical impact for the Variation ID\"&gt;\n##INFO=&lt;ID=SCI,Number=.,Type=String,Description=\"Aggregate somatic clinical impact for this single variant; multiple values are separated by a vertical bar\"&gt;\n##INFO=&lt;ID=SCIINCL,Number=.,Type=String,Description=\"Somatic clinical impact classification for a haplotype or genotype that includes this variant. Reported as pairs of VariationID:classification; multiple values are separated by a vertical bar\"&gt;\n##contig=&lt;ID=1&gt;\n##contig=&lt;ID=2&gt;\n##contig=&lt;ID=3&gt;\n##contig=&lt;ID=4&gt;\n##contig=&lt;ID=5&gt;\n##contig=&lt;ID=6&gt;\n##contig=&lt;ID=7&gt;\n##contig=&lt;ID=8&gt;\n##contig=&lt;ID=9&gt;\n##contig=&lt;ID=10&gt;\n##contig=&lt;ID=11&gt;\n##contig=&lt;ID=12&gt;\n##contig=&lt;ID=13&gt;\n##contig=&lt;ID=14&gt;\n##contig=&lt;ID=15&gt;\n##contig=&lt;ID=16&gt;\n##contig=&lt;ID=17&gt;\n##contig=&lt;ID=18&gt;\n##contig=&lt;ID=19&gt;\n##contig=&lt;ID=20&gt;\n##contig=&lt;ID=21&gt;\n##contig=&lt;ID=22&gt;\n##contig=&lt;ID=X&gt;\n##contig=&lt;ID=Y&gt;\n##contig=&lt;ID=MT&gt;\n##contig=&lt;ID=NT_113889.1&gt;\n##contig=&lt;ID=NT_187633.1&gt;\n##contig=&lt;ID=NT_187661.1&gt;\n##contig=&lt;ID=NT_187693.1&gt;\n##contig=&lt;ID=NW_009646201.1&gt;\n##bcftools_viewVersion=1.13+htslib-1.13\n##bcftools_viewCommand=view clinvar.vcf.gz 15:92992967-92992967; Date=Mon Oct 21 14:13:56 2024\n#CHROM  POS ID  REF ALT QUAL    FILTER  INFO\n15  92992967    633515  C   G   .   .   ALLELEID=621980;CLNDISDB=MedGen:CN517202;CLNDN=not_provided;CLNHGVS=NC_000015.10:g.92992967C&gt;G;CLNREVSTAT=criteria_provided,_single_submitter;CLNSIG=Pathogenic;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;GENEINFO=CHD2:1106;MC=SO:0001587|nonsense;ORIGIN=1;RS=2272457\n15  92992967    257709  C   T   .   .   AF_ESP=0.2485;AF_EXAC=0.22658;AF_TGP=0.19349;ALLELEID=255446;CLNDISDB=MeSH:D030342,MedGen:C0950123|MONDO:MONDO:0014150,MedGen:C3809278,OMIM:615369,Orphanet:1942,Orphanet:2382|MedGen:CN169374|MedGen:C3661900;CLNDN=Inborn_genetic_diseases|Developmental_and_epileptic_encephalopathy_94|not_specified|not_provided;CLNHGVS=NC_000015.10:g.92992967C&gt;T;CLNREVSTAT=criteria_provided,_multiple_submitters,_no_conflicts;CLNSIG=Benign;CLNVC=single_nucleotide_variant;CLNVCSO=SO:0001483;CLNVI=ClinGen:CA7748248;GENEINFO=CHD2:1106;MC=SO:0001819|synonymous_variant;ORIGIN=1;RS=2272457\n\n\nYou can easily observe that the pathogenic allele is G, where the change from C to G leads to a nonsense mutation. However, if we examine the header, we see that the ‘Number’ field of CLNSIG is labeled as ‘.’, which indicates that this term is not allele-specific—an inappropriate type for this record. In fact, this issue extends beyond just CLNSIG; all terms in the ClinVar database are labeled as ‘.’.\nTo correct this, we need to manually change the type from ‘.’ to ‘A’ (allele-specific) for allele-specific tags in the VCF file. For more information, please refer to the VCF specification.\nUnfortunately, many databases distributed in VCF format may contain non-uniformly formatted tags. Apart from manually updating these databases or filter reference allele afterward, there is no straightforward solution to this issue.\nIn addition, the RS tag is annotated, and we can refer to the NCBI SNP database for more information. For example, the mutation chr13:50945445G&gt;A/+ at RS 75184679 can be found at the following link: https://www.ncbi.nlm.nih.gov/snp/rs75184679. This mutation is associated with conditions such as “Abnormality of the nervous system” and other diseases.\n\nFeaturePlot(obj, features = c(\"chr13:50945445G&gt;A/+\", \"chr13:50945445G=/+\", \"RNASEH2B\"), order = TRUE, ncol=3)\n\nWarning: Could not find RNASEH2B in the default search locations, found in\n'RNA' assay instead\n\n\n\n\n\n\n\n\n\nNote that not all reads from this gene cover the SNV, which results in the SNV expression being sparser compared to the overall gene expression. Moreover, it also possible to map the clinical significant labels or other tags to the Manhatten plot.\n\nsel.chrs &lt;- c(1:21, \"X\")\nFbtPlot(obj, val = \"locus.padj\", remove.chr = TRUE, sel.chrs = sel.chrs, col.by = \"CLNSIG\", pt.size = 2, cols = c(\"#131313\",\"blue\",\"#A6CEE3\",\"#1F78B4\",\"#B2DF8A\",\"#33A02C\",\"#FB9A99\",\"#E31A1C\",\"#FDBF6F\",\"#FF7F00\",\"#CAB2D6\",\"#6A3D9A\",\"#FFFF99\",\"#B15928\"))\n\n\n\n\n\n\n\n\n\nCommand(obj)\n\n [1] \"NormalizeData.RNA\"        \"FindVariableFeatures.RNA\"\n [3] \"ScaleData.RNA\"            \"RunPCA.RNA\"              \n [5] \"FindNeighbors.RNA.pca\"    \"FindClusters\"            \n [7] \"RunUMAP.RNA.pca\"          \"NormalizeData.var\"       \n [9] \"RunAutoCorr.var.pca\"      \"SetAutoCorrFeatures.var\" \n[11] \"RunBlockCorr.var.pca\"     \"ParseVarName.var\"        \n[13] \"annoVAR.var\"",
    "crumbs": [
      "Overview",
      "Workflows & Short cases",
      "Annotating genetic variants"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "This website outlines the key tools and software packages developed from my research:\n\n\nFASTQ+: This format enhances the standard FASTQ file by integrating barcode information directly into the read name. This modification facilitates the harmonization of single-cell sequencing data across various platforms. FASTQ+ can be generated with PISA.\nPISA: A suite of programs specifically designed for preprocessing data from single-cell sequencing and spatial transcriptomics. It efficiently processes FASTQ+, BAM, and BED files, streamlining the handling and generates various feature counts, facilitating the downstream analyses necessary for in-depth biological insights.\nYano: An R package that employs the spatial dissimilarity test method as its core algorithm. Yano is tailored for exploring various biological events in single-cell data, including alternative splicing, allele-specific gene expression, and more, providing comprehensive insights into cellular dynamics.\n\nWorkflows and Short Cases for scRNA-seq and Spatial Transcriptome\n\nFrom raw reads to gene counts (PISA)\nAnnotate various features for alignment (PISA)\nAlternative splicing analysis for scRNA-seq (Yano)\nAllele-specific gene expression analysis for scRNA-seq (Yano)\nAnnotating and prioritizing genetic variants for scRNA-seq (Yano) \n\n\n\n\n Back to top"
  },
  {
    "objectID": "Yano/mergeMatrix-SMatrix-method.html",
    "href": "Yano/mergeMatrix-SMatrix-method.html",
    "title": "mergeMatrix",
    "section": "",
    "text": "Merge multiple matrix files into one. At least two matrix files should be specified. Records with the same row name and column name will be summed up.\n\n\n\n## S4 method for signature 'SMatrix'\nmergeMatrix(x = NULL, y = NULL, ...)\n\n\n\n\n\n\n\nx\n\n\nMatrix 1\n\n\n\n\ny\n\n\nMatrix 2\n\n\n\n\n…\n\n\nMore matrix files."
  },
  {
    "objectID": "Yano/mergeMatrix-SMatrix-method.html#description",
    "href": "Yano/mergeMatrix-SMatrix-method.html#description",
    "title": "mergeMatrix",
    "section": "",
    "text": "Merge multiple matrix files into one. At least two matrix files should be specified. Records with the same row name and column name will be summed up."
  },
  {
    "objectID": "Yano/mergeMatrix-SMatrix-method.html#usage",
    "href": "Yano/mergeMatrix-SMatrix-method.html#usage",
    "title": "mergeMatrix",
    "section": "",
    "text": "## S4 method for signature 'SMatrix'\nmergeMatrix(x = NULL, y = NULL, ...)"
  },
  {
    "objectID": "Yano/mergeMatrix-SMatrix-method.html#arguments",
    "href": "Yano/mergeMatrix-SMatrix-method.html#arguments",
    "title": "mergeMatrix",
    "section": "",
    "text": "x\n\n\nMatrix 1\n\n\n\n\ny\n\n\nMatrix 2\n\n\n\n\n…\n\n\nMore matrix files."
  },
  {
    "objectID": "Yano/RatioPlot.html",
    "href": "Yano/RatioPlot.html",
    "title": "RatioPlot",
    "section": "",
    "text": "Source code\n\n\nPlot ratio score of test feature and its binding feature on reduction map.\n\n\n\nRatioPlot(\n  object = NULL,\n  assay = NULL,\n  bind.assay = NULL,\n  bind.name = NULL,\n  features = NULL,\n  cells = NULL,\n  dims = c(1, 2),\n  cols = c(\"lightgrey\", \"red\"),\n  pt.size = NULL,\n  alpha = 1,\n  order = TRUE,\n  min.cutoff = NA,\n  max.cutoff = NA,\n  mode = c(1, 2, 3),\n  reduction = NULL,\n  shape.by = NULL,\n  ncol = NULL,\n  split.by = NULL,\n  by.col = TRUE,\n  coord.fixed = FALSE,\n  combine = TRUE,\n  raster = NULL,\n  raster.dpi = c(512, 512),\n  legend.title = \"Ratio\"\n)\n\n\n\n\n\n\n\nobject\n\n\nSeurat object.\n\n\n\n\nassay\n\n\nTest assay name.\n\n\n\n\nbind.assay\n\n\nBinding assay name.\n\n\n\n\nfeatures\n\n\nFeatures to plot.\n\n\n\n\ncells\n\n\nVector of cells to plot (default is all cells)\n\n\n\n\ndims\n\n\nDimensions to plot, must be a two-length numeric vector specifying x- and y-dimensions\n\n\n\n\ncols\n\n\nVector of colors, each color corresponds to an identity class. This may also be a single character or numeric value corresponding to a palette as specified by RColorBrewer::brewer.pal.info. The default cols is c(‘lightgrey’, ‘red’). Set cols = c(‘lightgrey’, ‘blue’) to get the Seurat ‘classical’ colors.\n\n\n\n\npt.size\n\n\nAdjust point size for plotting\n\n\n\n\nalpha\n\n\nAlpha value for points\n\n\n\n\norder\n\n\nBoolean determing whether to plot cells in order of PSI score.\n\n\n\n\nmin.cutoff, max.cutoff\n\n\nVector of minimum and maximum cutoff values for each feature\n\n\n\n\nmode\n\n\nTest mode. For mode 1, X (test feature) vs Y (binding feature). For mode 2, X vs (Y-X). For mode 3, X vs (Y+X). Please note, when set to mode 2 or 3, will use raw counts to update expression value of binding features. Then normalise the counts before testing. For mode 1, will use Layer ‘data’. Default is mode 1.\n\n\n\n\nreduction\n\n\nWhich dimensionality reduction to use. If not specified, first searches for umap, then tsne, then pca\n\n\n\n\nshape.by\n\n\nIf NULL, all points are circles (default). You can specify any cell attribute (that can be pulled with FetchData) allowing for both different colors and different shapes on cells. Only applicable if raster = FALSE.\n\n\n\n\nncol\n\n\nNumber of columns to combine multiple features plots to\n\n\n\n\nsplit.by\n\n\nA factor in object metadata to split the plot by, pass ‘ident’ to split by cell identity\n\n\n\n\nby.col\n\n\nIf splitting by a factor, plot the splits per column with the features as rows\n\n\n\n\ncoord.fixed\n\n\nPlot cartesian coordinates with fixed aspect ratio\n\n\n\n\ncombine\n\n\nCombine plots into a single patchwork ggplot object. If FALSE, return a list of ggplot objects.\n\n\n\n\nraster.dpi\n\n\nPixel resolution for rasterized plots, passed to geom_scattermore(). Default is c(512, 512).\n\n\n\n\ngroup.by\n\n\nName of one or more metadata columns to group (color) cells by (for example, orig.ident); pass ‘ident’ to group by identity class\n\n\n\n\n\n\nThis function is edited from Seurat::FeaturePlot, used to visulize the PSI score on cells.\n\n\n\nA patchwork ggplot object of combine = TRUE; otherwise, a list of ggplot objects"
  },
  {
    "objectID": "Yano/RatioPlot.html#description",
    "href": "Yano/RatioPlot.html#description",
    "title": "RatioPlot",
    "section": "",
    "text": "Plot ratio score of test feature and its binding feature on reduction map."
  },
  {
    "objectID": "Yano/RatioPlot.html#usage",
    "href": "Yano/RatioPlot.html#usage",
    "title": "RatioPlot",
    "section": "",
    "text": "RatioPlot(\n  object = NULL,\n  assay = NULL,\n  bind.assay = NULL,\n  bind.name = NULL,\n  features = NULL,\n  cells = NULL,\n  dims = c(1, 2),\n  cols = c(\"lightgrey\", \"red\"),\n  pt.size = NULL,\n  alpha = 1,\n  order = TRUE,\n  min.cutoff = NA,\n  max.cutoff = NA,\n  mode = c(1, 2, 3),\n  reduction = NULL,\n  shape.by = NULL,\n  ncol = NULL,\n  split.by = NULL,\n  by.col = TRUE,\n  coord.fixed = FALSE,\n  combine = TRUE,\n  raster = NULL,\n  raster.dpi = c(512, 512),\n  legend.title = \"Ratio\"\n)"
  },
  {
    "objectID": "Yano/RatioPlot.html#arguments",
    "href": "Yano/RatioPlot.html#arguments",
    "title": "RatioPlot",
    "section": "",
    "text": "object\n\n\nSeurat object.\n\n\n\n\nassay\n\n\nTest assay name.\n\n\n\n\nbind.assay\n\n\nBinding assay name.\n\n\n\n\nfeatures\n\n\nFeatures to plot.\n\n\n\n\ncells\n\n\nVector of cells to plot (default is all cells)\n\n\n\n\ndims\n\n\nDimensions to plot, must be a two-length numeric vector specifying x- and y-dimensions\n\n\n\n\ncols\n\n\nVector of colors, each color corresponds to an identity class. This may also be a single character or numeric value corresponding to a palette as specified by RColorBrewer::brewer.pal.info. The default cols is c(‘lightgrey’, ‘red’). Set cols = c(‘lightgrey’, ‘blue’) to get the Seurat ‘classical’ colors.\n\n\n\n\npt.size\n\n\nAdjust point size for plotting\n\n\n\n\nalpha\n\n\nAlpha value for points\n\n\n\n\norder\n\n\nBoolean determing whether to plot cells in order of PSI score.\n\n\n\n\nmin.cutoff, max.cutoff\n\n\nVector of minimum and maximum cutoff values for each feature\n\n\n\n\nmode\n\n\nTest mode. For mode 1, X (test feature) vs Y (binding feature). For mode 2, X vs (Y-X). For mode 3, X vs (Y+X). Please note, when set to mode 2 or 3, will use raw counts to update expression value of binding features. Then normalise the counts before testing. For mode 1, will use Layer ‘data’. Default is mode 1.\n\n\n\n\nreduction\n\n\nWhich dimensionality reduction to use. If not specified, first searches for umap, then tsne, then pca\n\n\n\n\nshape.by\n\n\nIf NULL, all points are circles (default). You can specify any cell attribute (that can be pulled with FetchData) allowing for both different colors and different shapes on cells. Only applicable if raster = FALSE.\n\n\n\n\nncol\n\n\nNumber of columns to combine multiple features plots to\n\n\n\n\nsplit.by\n\n\nA factor in object metadata to split the plot by, pass ‘ident’ to split by cell identity\n\n\n\n\nby.col\n\n\nIf splitting by a factor, plot the splits per column with the features as rows\n\n\n\n\ncoord.fixed\n\n\nPlot cartesian coordinates with fixed aspect ratio\n\n\n\n\ncombine\n\n\nCombine plots into a single patchwork ggplot object. If FALSE, return a list of ggplot objects.\n\n\n\n\nraster.dpi\n\n\nPixel resolution for rasterized plots, passed to geom_scattermore(). Default is c(512, 512).\n\n\n\n\ngroup.by\n\n\nName of one or more metadata columns to group (color) cells by (for example, orig.ident); pass ‘ident’ to group by identity class"
  },
  {
    "objectID": "Yano/RatioPlot.html#details",
    "href": "Yano/RatioPlot.html#details",
    "title": "RatioPlot",
    "section": "",
    "text": "This function is edited from Seurat::FeaturePlot, used to visulize the PSI score on cells."
  },
  {
    "objectID": "Yano/RatioPlot.html#value",
    "href": "Yano/RatioPlot.html#value",
    "title": "RatioPlot",
    "section": "",
    "text": "A patchwork ggplot object of combine = TRUE; otherwise, a list of ggplot objects"
  },
  {
    "objectID": "Yano/ParseBED.html",
    "href": "Yano/ParseBED.html",
    "title": "ParseBED",
    "section": "",
    "text": "Source code\n\n\nParse chromosome, start, end, strand from the BED/EPT name. The BED name is generated by ‘PISA annotate’.\n\n\n\nParseBED(object = NULL, assay = NULL)\n\n\n\n\n\n\n\nobject\n\n\nSeurat object\n\n\n\n\nassay\n\n\nEPT assay. Default is current actived assay."
  },
  {
    "objectID": "Yano/ParseBED.html#description",
    "href": "Yano/ParseBED.html#description",
    "title": "ParseBED",
    "section": "",
    "text": "Parse chromosome, start, end, strand from the BED/EPT name. The BED name is generated by ‘PISA annotate’."
  },
  {
    "objectID": "Yano/ParseBED.html#usage",
    "href": "Yano/ParseBED.html#usage",
    "title": "ParseBED",
    "section": "",
    "text": "ParseBED(object = NULL, assay = NULL)"
  },
  {
    "objectID": "Yano/ParseBED.html#arguments",
    "href": "Yano/ParseBED.html#arguments",
    "title": "ParseBED",
    "section": "",
    "text": "object\n\n\nSeurat object\n\n\n\n\nassay\n\n\nEPT assay. Default is current actived assay."
  },
  {
    "objectID": "Yano/FindAltExp.html",
    "href": "Yano/FindAltExp.html",
    "title": "Find Alternative expression",
    "section": "",
    "text": "Source code\n\n\nUsing linear regression model (implemented by DEXSeq) or PermTest method to calculate delta ratio and simulate p value for each event.\n\n\n\nFindAltExp(\n  object = NULL,\n  cells.1 = NULL,\n  cells.2 = NULL,\n  ident.1 = NULL,\n  ident.2 = NULL,\n  assay = NULL,\n  bind.name = \"gene_name\",\n  test.use = c(\"DEXSeq\", \"PermTest\"),\n  bind.assay = NULL,\n  features = NULL,\n  bind.features = NULL,\n  min.cells = 10,\n  return.thresh = NULL,\n  mode = c(1, 2, 3),\n  threads = 0,\n  perm = 100,\n  seed = 999,\n  pseudo.group = 3,\n  debug = FALSE\n)\n\n\n\n\n\n\n\nobject\n\n\nA Seurat object.\n\n\n\n\ncells.1\n\n\nVector of cell names belong to group 1. Conflict with ident.1\n\n\n\n\ncells.2\n\n\nVector of cell names for comparsion. Conflict with ident.2\n\n\n\n\nident.1\n\n\nIdentify class to test, if not set will compare all groups one by one\n\n\n\n\nident.2\n\n\nA second class for comparsion. If NULL (default), use all other cells for comparison.\n\n\n\n\nassay\n\n\nTest assay (X). Default assay will be used if not set.\n\n\n\n\nbind.name\n\n\nTitle name for binding features in the meta table. Consider most users start Yano to perform alternative splicing analysis, the default bind.name set to “gene_name”.\n\n\n\n\nbind.assay\n\n\nBind assay (Y). If not set, will aggregate all X values of the same block.\n\n\n\n\nfeatures\n\n\nCandidate list to test. If not set, will use AutoCorrFeatures(object, assay = assay).\n\n\n\n\nbind.features\n\n\nCandidate list for bind features to test. If not set, will test all covered.\n\n\n\n\nmin.cells\n\n\nUsed to filter candiate features or binding features. Require them at least expressed in min.cells. Default is 10.\n\n\n\n\nreturn.thresh\n\n\nOnly return markers that have a p-value &lt; return.thresh. Default is NULL.\n\n\n\n\nmode\n\n\nTest mode. For mode 1, X (test feature) vs Y (binding feature). For mode 2, X vs (Y-X). For mode 3, X vs (Y+X).\n\n\n\n\nthreads\n\n\nThreads. For DEXSeq, threads will set to 1. For other methods, threads set to 0, which will auto check the CPU cores and set threads = number of CPU cores -1.\n\n\n\n\nperm\n\n\nPermutation steps for calculate statistical of delta-ratio. Default is 100.\n\n\n\n\nseed\n\n\nSeed for generate random number. Default is 999.\n\n\n\n\ndebug\n\n\nPrint debug logs. Will auto set thread to 1. Default is FALSE.\n\n\n\n\npesudo.group\n\n\nAggregate counts into groups for each clusters. Used only for DEXSeq.\n\n\n\n\n\n\nThis function first aggregates all raw counts per feature for each group and then perform alternative expression analysis with DEXSeq or PermTest method. For DEXSeq, counts per group will divide into pesudo-groups first. For PermTest method, *deltarati**o = Xa/Ya − Xb/Yb*. It then employs a permutation method to randomize the cells in the two groups 100 times (by default) to evaluate the mean and standard deviation of delta-ratio. A p-value is calculated using a t-test. The PermTest method is not well tested. Therefore, we use DEXSeq method in default, but it’s very slow if input a lot of features."
  },
  {
    "objectID": "Yano/FindAltExp.html#description",
    "href": "Yano/FindAltExp.html#description",
    "title": "Find Alternative expression",
    "section": "",
    "text": "Using linear regression model (implemented by DEXSeq) or PermTest method to calculate delta ratio and simulate p value for each event."
  },
  {
    "objectID": "Yano/FindAltExp.html#usage",
    "href": "Yano/FindAltExp.html#usage",
    "title": "Find Alternative expression",
    "section": "",
    "text": "FindAltExp(\n  object = NULL,\n  cells.1 = NULL,\n  cells.2 = NULL,\n  ident.1 = NULL,\n  ident.2 = NULL,\n  assay = NULL,\n  bind.name = \"gene_name\",\n  test.use = c(\"DEXSeq\", \"PermTest\"),\n  bind.assay = NULL,\n  features = NULL,\n  bind.features = NULL,\n  min.cells = 10,\n  return.thresh = NULL,\n  mode = c(1, 2, 3),\n  threads = 0,\n  perm = 100,\n  seed = 999,\n  pseudo.group = 3,\n  debug = FALSE\n)"
  },
  {
    "objectID": "Yano/FindAltExp.html#arguments",
    "href": "Yano/FindAltExp.html#arguments",
    "title": "Find Alternative expression",
    "section": "",
    "text": "object\n\n\nA Seurat object.\n\n\n\n\ncells.1\n\n\nVector of cell names belong to group 1. Conflict with ident.1\n\n\n\n\ncells.2\n\n\nVector of cell names for comparsion. Conflict with ident.2\n\n\n\n\nident.1\n\n\nIdentify class to test, if not set will compare all groups one by one\n\n\n\n\nident.2\n\n\nA second class for comparsion. If NULL (default), use all other cells for comparison.\n\n\n\n\nassay\n\n\nTest assay (X). Default assay will be used if not set.\n\n\n\n\nbind.name\n\n\nTitle name for binding features in the meta table. Consider most users start Yano to perform alternative splicing analysis, the default bind.name set to “gene_name”.\n\n\n\n\nbind.assay\n\n\nBind assay (Y). If not set, will aggregate all X values of the same block.\n\n\n\n\nfeatures\n\n\nCandidate list to test. If not set, will use AutoCorrFeatures(object, assay = assay).\n\n\n\n\nbind.features\n\n\nCandidate list for bind features to test. If not set, will test all covered.\n\n\n\n\nmin.cells\n\n\nUsed to filter candiate features or binding features. Require them at least expressed in min.cells. Default is 10.\n\n\n\n\nreturn.thresh\n\n\nOnly return markers that have a p-value &lt; return.thresh. Default is NULL.\n\n\n\n\nmode\n\n\nTest mode. For mode 1, X (test feature) vs Y (binding feature). For mode 2, X vs (Y-X). For mode 3, X vs (Y+X).\n\n\n\n\nthreads\n\n\nThreads. For DEXSeq, threads will set to 1. For other methods, threads set to 0, which will auto check the CPU cores and set threads = number of CPU cores -1.\n\n\n\n\nperm\n\n\nPermutation steps for calculate statistical of delta-ratio. Default is 100.\n\n\n\n\nseed\n\n\nSeed for generate random number. Default is 999.\n\n\n\n\ndebug\n\n\nPrint debug logs. Will auto set thread to 1. Default is FALSE.\n\n\n\n\npesudo.group\n\n\nAggregate counts into groups for each clusters. Used only for DEXSeq."
  },
  {
    "objectID": "Yano/FindAltExp.html#details",
    "href": "Yano/FindAltExp.html#details",
    "title": "Find Alternative expression",
    "section": "",
    "text": "This function first aggregates all raw counts per feature for each group and then perform alternative expression analysis with DEXSeq or PermTest method. For DEXSeq, counts per group will divide into pesudo-groups first. For PermTest method, *deltarati**o = Xa/Ya − Xb/Yb*. It then employs a permutation method to randomize the cells in the two groups 100 times (by default) to evaluate the mean and standard deviation of delta-ratio. A p-value is calculated using a t-test. The PermTest method is not well tested. Therefore, we use DEXSeq method in default, but it’s very slow if input a lot of features."
  },
  {
    "objectID": "Yano/GetWeights.html",
    "href": "Yano/GetWeights.html",
    "title": "GetWeights",
    "section": "",
    "text": "Source code\n\n\nCalcualte cell-cell weight matrix by one of shared nearest neighbour matrix, spatial locations, cell embedding and linear trajectory.\n\n\n\nGetWeights(\n  snn = NULL,\n  pos = NULL,\n  order.cells = NULL,\n  emb = NULL,\n  k.nn = 20,\n  prune.distance = -1,\n  prune.SNN = 1/50,\n  diag.value = 0,\n  cells = NULL,\n  weight.method = c(\"dist\", \"average\")\n)\n\n\n\n\n\n\n\nsnn\n\n\nShared nearest neighbour graph, usually can found at object[[“RNA_snn”]]. This graph can be calculate by Seurat::FindNeighbors().\n\n\n\n\npos\n\n\nTissue coordinates matrix.\n\n\n\n\norder.cells\n\n\nPredefined cell ranks, used for cell lineage analysis.\n\n\n\n\nemb\n\n\nCell dimesional space (PCA/ICA/harmony).\n\n\n\n\nk.nn\n\n\nK-nearest neighbors, for calculating weight matrix with emb.\n\n\n\n\nprune.distance\n\n\nSets the cutoff for cell distance on lineage trajectory (ranked cells) or spatial cooridates (bin/spot distance) when computing the neighborhood overlap for the weight matrix construction. Any edges with values greater than this will be set to 0 and removed from the weight matrix graph. Default is 50 for lineage cells, means only calculate weight edges for nearby 50 cells for each cell, while 8 for spatial coordinates.\n\n\n\n\nprune.SNN\n\n\nSets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the SNN construction. Any edges with values less than or equal to this will be set to 0 and removed from the SNN graph. Essentially sets the stringency of pruning (0 — no pruning, 1 — prune everything). Default is 1/50.\n\n\n\n\ndiag.value\n\n\nDiagnoal value in the weight matrix.\n\n\n\n\ncells\n\n\nCell list. Default use all cells.\n\n\n\n\n\n\nA sparse weight matrix."
  },
  {
    "objectID": "Yano/GetWeights.html#description",
    "href": "Yano/GetWeights.html#description",
    "title": "GetWeights",
    "section": "",
    "text": "Calcualte cell-cell weight matrix by one of shared nearest neighbour matrix, spatial locations, cell embedding and linear trajectory."
  },
  {
    "objectID": "Yano/GetWeights.html#usage",
    "href": "Yano/GetWeights.html#usage",
    "title": "GetWeights",
    "section": "",
    "text": "GetWeights(\n  snn = NULL,\n  pos = NULL,\n  order.cells = NULL,\n  emb = NULL,\n  k.nn = 20,\n  prune.distance = -1,\n  prune.SNN = 1/50,\n  diag.value = 0,\n  cells = NULL,\n  weight.method = c(\"dist\", \"average\")\n)"
  },
  {
    "objectID": "Yano/GetWeights.html#arguments",
    "href": "Yano/GetWeights.html#arguments",
    "title": "GetWeights",
    "section": "",
    "text": "snn\n\n\nShared nearest neighbour graph, usually can found at object[[“RNA_snn”]]. This graph can be calculate by Seurat::FindNeighbors().\n\n\n\n\npos\n\n\nTissue coordinates matrix.\n\n\n\n\norder.cells\n\n\nPredefined cell ranks, used for cell lineage analysis.\n\n\n\n\nemb\n\n\nCell dimesional space (PCA/ICA/harmony).\n\n\n\n\nk.nn\n\n\nK-nearest neighbors, for calculating weight matrix with emb.\n\n\n\n\nprune.distance\n\n\nSets the cutoff for cell distance on lineage trajectory (ranked cells) or spatial cooridates (bin/spot distance) when computing the neighborhood overlap for the weight matrix construction. Any edges with values greater than this will be set to 0 and removed from the weight matrix graph. Default is 50 for lineage cells, means only calculate weight edges for nearby 50 cells for each cell, while 8 for spatial coordinates.\n\n\n\n\nprune.SNN\n\n\nSets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the SNN construction. Any edges with values less than or equal to this will be set to 0 and removed from the SNN graph. Essentially sets the stringency of pruning (0 — no pruning, 1 — prune everything). Default is 1/50.\n\n\n\n\ndiag.value\n\n\nDiagnoal value in the weight matrix.\n\n\n\n\ncells\n\n\nCell list. Default use all cells."
  },
  {
    "objectID": "Yano/GetWeights.html#value",
    "href": "Yano/GetWeights.html#value",
    "title": "GetWeights",
    "section": "",
    "text": "A sparse weight matrix."
  },
  {
    "objectID": "Yano/annoBED.html",
    "href": "Yano/annoBED.html",
    "title": "annoBED",
    "section": "",
    "text": "Source code\n\n\nAnnotate gene name for bed region. Before annotation you should run ParseBED to parse chr, start and end position from feature name.\n\n\n\nannoBED(object = NULL, gtf = NULL, assay = NULL)\n\n\n\n\n\n\n\nobject\n\n\nSeurat object.\n\n\n\n\ngtf\n\n\nGTF database object, generated by gtf2db.\n\n\n\n\nassay\n\n\nworking assay\n\n\n\n\n\n\nAnnotated Seurat object"
  },
  {
    "objectID": "Yano/annoBED.html#description",
    "href": "Yano/annoBED.html#description",
    "title": "annoBED",
    "section": "",
    "text": "Annotate gene name for bed region. Before annotation you should run ParseBED to parse chr, start and end position from feature name."
  },
  {
    "objectID": "Yano/annoBED.html#usage",
    "href": "Yano/annoBED.html#usage",
    "title": "annoBED",
    "section": "",
    "text": "annoBED(object = NULL, gtf = NULL, assay = NULL)"
  },
  {
    "objectID": "Yano/annoBED.html#arguments",
    "href": "Yano/annoBED.html#arguments",
    "title": "annoBED",
    "section": "",
    "text": "object\n\n\nSeurat object.\n\n\n\n\ngtf\n\n\nGTF database object, generated by gtf2db.\n\n\n\n\nassay\n\n\nworking assay"
  },
  {
    "objectID": "Yano/annoBED.html#value",
    "href": "Yano/annoBED.html#value",
    "title": "annoBED",
    "section": "",
    "text": "Annotated Seurat object"
  },
  {
    "objectID": "Yano/RunDLScore.html",
    "href": "Yano/RunDLScore.html",
    "title": "Perform dissimilarity test (D score) and Lee score test for features and test features in parallel. This function used to select co-expressed features on single cell space.",
    "section": "",
    "text": "Source code\n\n\nPerform dissimilarity test (D score) and Lee score test for features and test features in parallel. This function used to select co-expressed features on single cell space.\n\n\n\nRunDLScore(\n  object = NULL,\n  features = NULL,\n  assay = NULL,\n  test.features = NULL,\n  test.assay = NULL,\n  layer = \"data\",\n  weight.matrix.name = \"WeightMatrix\",\n  perm = 100,\n  threads = 0,\n  seed.use = 999\n)\n\n\n\n\n\n\n\nobject\n\n\nSeurat object.\n\n\n\n\nfeatures\n\n\nVector of features to calculate.\n\n\n\n\nassay\n\n\nName of assay for features. If features not found in default assay, will automatically check other assays.\n\n\n\n\ntest.features\n\n\nVector of features to compare. Default is AutoCorrFeatures(object, assay = test.assay).\n\n\n\n\ntest.assay\n\n\nName of assay for test.features. Default is current actived assay.\n\n\n\n\nlayer\n\n\nWhich layer to extract data. Default is ‘data’ layer. So will check if the assay and test.assay are normlised first.\n\n\n\n\nweight.matrix.name\n\n\nWeight matrix name, this matrix (graph) generated by RunAutoCorr.\n\n\n\n\nperm\n\n\nPermutations for evaluating mean and sd of L score. Default is 100.\n\n\n\n\nthreads\n\n\nThreads. Default is 0, will auto check the CPU cores and set threads = number of CPU cores -1."
  },
  {
    "objectID": "Yano/RunDLScore.html#description",
    "href": "Yano/RunDLScore.html#description",
    "title": "Perform dissimilarity test (D score) and Lee score test for features and test features in parallel. This function used to select co-expressed features on single cell space.",
    "section": "",
    "text": "Perform dissimilarity test (D score) and Lee score test for features and test features in parallel. This function used to select co-expressed features on single cell space."
  },
  {
    "objectID": "Yano/RunDLScore.html#usage",
    "href": "Yano/RunDLScore.html#usage",
    "title": "Perform dissimilarity test (D score) and Lee score test for features and test features in parallel. This function used to select co-expressed features on single cell space.",
    "section": "",
    "text": "RunDLScore(\n  object = NULL,\n  features = NULL,\n  assay = NULL,\n  test.features = NULL,\n  test.assay = NULL,\n  layer = \"data\",\n  weight.matrix.name = \"WeightMatrix\",\n  perm = 100,\n  threads = 0,\n  seed.use = 999\n)"
  },
  {
    "objectID": "Yano/RunDLScore.html#arguments",
    "href": "Yano/RunDLScore.html#arguments",
    "title": "Perform dissimilarity test (D score) and Lee score test for features and test features in parallel. This function used to select co-expressed features on single cell space.",
    "section": "",
    "text": "object\n\n\nSeurat object.\n\n\n\n\nfeatures\n\n\nVector of features to calculate.\n\n\n\n\nassay\n\n\nName of assay for features. If features not found in default assay, will automatically check other assays.\n\n\n\n\ntest.features\n\n\nVector of features to compare. Default is AutoCorrFeatures(object, assay = test.assay).\n\n\n\n\ntest.assay\n\n\nName of assay for test.features. Default is current actived assay.\n\n\n\n\nlayer\n\n\nWhich layer to extract data. Default is ‘data’ layer. So will check if the assay and test.assay are normlised first.\n\n\n\n\nweight.matrix.name\n\n\nWeight matrix name, this matrix (graph) generated by RunAutoCorr.\n\n\n\n\nperm\n\n\nPermutations for evaluating mean and sd of L score. Default is 100.\n\n\n\n\nthreads\n\n\nThreads. Default is 0, will auto check the CPU cores and set threads = number of CPU cores -1."
  },
  {
    "objectID": "Yano/annoVAR.html",
    "href": "Yano/annoVAR.html",
    "title": "annoVAR",
    "section": "",
    "text": "Source code\n\n\nAnnotate genetic variants with preload GTF and/or VCF databases. Will generate gene region and other tags.\n\n\n\nannoVAR(\n  object = NULL,\n  assay = NULL,\n  gtf = NULL,\n  vcf = NULL,\n  tags = NULL,\n  check.alt.only = FALSE,\n  chr = \"chr\"\n)\n\n\n\n\n\n\n\nobject\n\n\nSeurat object.\n\n\n\n\nassay\n\n\nWork assay.\n\n\n\n\ngtf\n\n\nGTF object, load by gtf2db.\n\n\n\n\nvcf\n\n\nVCF database. Should be indexed with ‘bcftools index’ at first.\n\n\n\n\ntags\n\n\nVector of tags to annotate. Require VCF database specified, and tags should be well formated in the VCF header. See VCF specification (https://samtools.github.io/hts-specs/VCFv4.2.pdf) for details.\n\n\n\n\ncheck.alt.only\n\n\nOnly annotate records for alternative allele (non-ref allele). Default is FASLE.\n\n\n\n\nchr\n\n\nColname name for chromsome, default is “chr”.\n\n\n\n\n\n\nAnnotated Seurat object."
  },
  {
    "objectID": "Yano/annoVAR.html#description",
    "href": "Yano/annoVAR.html#description",
    "title": "annoVAR",
    "section": "",
    "text": "Annotate genetic variants with preload GTF and/or VCF databases. Will generate gene region and other tags."
  },
  {
    "objectID": "Yano/annoVAR.html#usage",
    "href": "Yano/annoVAR.html#usage",
    "title": "annoVAR",
    "section": "",
    "text": "annoVAR(\n  object = NULL,\n  assay = NULL,\n  gtf = NULL,\n  vcf = NULL,\n  tags = NULL,\n  check.alt.only = FALSE,\n  chr = \"chr\"\n)"
  },
  {
    "objectID": "Yano/annoVAR.html#arguments",
    "href": "Yano/annoVAR.html#arguments",
    "title": "annoVAR",
    "section": "",
    "text": "object\n\n\nSeurat object.\n\n\n\n\nassay\n\n\nWork assay.\n\n\n\n\ngtf\n\n\nGTF object, load by gtf2db.\n\n\n\n\nvcf\n\n\nVCF database. Should be indexed with ‘bcftools index’ at first.\n\n\n\n\ntags\n\n\nVector of tags to annotate. Require VCF database specified, and tags should be well formated in the VCF header. See VCF specification (https://samtools.github.io/hts-specs/VCFv4.2.pdf) for details.\n\n\n\n\ncheck.alt.only\n\n\nOnly annotate records for alternative allele (non-ref allele). Default is FASLE.\n\n\n\n\nchr\n\n\nColname name for chromsome, default is “chr”."
  },
  {
    "objectID": "Yano/annoVAR.html#value",
    "href": "Yano/annoVAR.html#value",
    "title": "annoVAR",
    "section": "",
    "text": "Annotated Seurat object."
  },
  {
    "objectID": "Yano/QuickRecipe-Seurat-method.html",
    "href": "Yano/QuickRecipe-Seurat-method.html",
    "title": "QuickRecipe",
    "section": "",
    "text": "Quick clust single cell gene expression matrix with Seurat pipeline\n\n\n\n## S4 method for signature 'Seurat'\nQuickRecipe(\n  counts = NULL,\n  min.cells = 20,\n  min.features = 200,\n  nvar = 3000,\n  resolution = 0.5,\n  assay = NULL,\n  ndim = 20,\n  verbose = TRUE\n)\n\n\n\n\n\n\n\ncounts\n\n\nraw counts matrix or Seurat object.\n\n\n\n\nmin.cells\n\n\nOnly compute for features in at least this many cells\n\n\n\n\nmin.features\n\n\nOnly computer for cells contained at least this many features\n\n\n\n\nnvar\n\n\nNumber of high variable features selected for PCA analysis\n\n\n\n\nresolution\n\n\nValue of the resolution parameter pass to FindClusters, use a value above (below) 1.0 if you want to obtain a larger (smaller) number of communities\n\n\n\n\nassay\n\n\nAssay name. Default is ‘RNA’.\n\n\n\n\nndim\n\n\nUse top N PCs for clustering and UMAP. Default is 20.\n\n\n\n\n\n\nSeurat object"
  },
  {
    "objectID": "Yano/QuickRecipe-Seurat-method.html#description",
    "href": "Yano/QuickRecipe-Seurat-method.html#description",
    "title": "QuickRecipe",
    "section": "",
    "text": "Quick clust single cell gene expression matrix with Seurat pipeline"
  },
  {
    "objectID": "Yano/QuickRecipe-Seurat-method.html#usage",
    "href": "Yano/QuickRecipe-Seurat-method.html#usage",
    "title": "QuickRecipe",
    "section": "",
    "text": "## S4 method for signature 'Seurat'\nQuickRecipe(\n  counts = NULL,\n  min.cells = 20,\n  min.features = 200,\n  nvar = 3000,\n  resolution = 0.5,\n  assay = NULL,\n  ndim = 20,\n  verbose = TRUE\n)"
  },
  {
    "objectID": "Yano/QuickRecipe-Seurat-method.html#arguments",
    "href": "Yano/QuickRecipe-Seurat-method.html#arguments",
    "title": "QuickRecipe",
    "section": "",
    "text": "counts\n\n\nraw counts matrix or Seurat object.\n\n\n\n\nmin.cells\n\n\nOnly compute for features in at least this many cells\n\n\n\n\nmin.features\n\n\nOnly computer for cells contained at least this many features\n\n\n\n\nnvar\n\n\nNumber of high variable features selected for PCA analysis\n\n\n\n\nresolution\n\n\nValue of the resolution parameter pass to FindClusters, use a value above (below) 1.0 if you want to obtain a larger (smaller) number of communities\n\n\n\n\nassay\n\n\nAssay name. Default is ‘RNA’.\n\n\n\n\nndim\n\n\nUse top N PCs for clustering and UMAP. Default is 20."
  },
  {
    "objectID": "Yano/QuickRecipe-Seurat-method.html#value",
    "href": "Yano/QuickRecipe-Seurat-method.html#value",
    "title": "QuickRecipe",
    "section": "",
    "text": "Seurat object"
  },
  {
    "objectID": "Yano/ParseExonName.html",
    "href": "Yano/ParseExonName.html",
    "title": "ParseExonName",
    "section": "",
    "text": "Source code\n\n\nParse chromosome, start, end, strand, and gene name from the exon name. The exon name generated by ‘PISA anno’ is formated like chr:start-end/[+-]/gene_name.\n\n\n\nParseExonName(object = NULL, assay = NULL)\n\n\n\n\n\n\n\nobject\n\n\nSeurat object.\n\n\n\n\nassay\n\n\nExon assay name. Default use current actived assay.\n\n\n\n\n\n\nlibrary(\"Yano\")\n\ndata(\"glbt_small\")\nDefaultAssay(glbt_small) &lt;- \"exon\"\n# Check the meta table before parsing\nhead(glbt_small[['exon']][[]])\ndata frame with 0 columns and 6 rows\nglbt_small &lt;- ParseExonName(glbt_small)\n\n# Now see the meta table after parsing\nhead(glbt_small[['exon']][[]])\n                                    chr     start       end gene_name strand\nchr1:154169305-154169383/-/TPM3    chr1 154169305 154169383      TPM3      -\nchr11:35197162-35197793/+/CD44    chr11  35197162  35197793      CD44      +\nchr11:75421727-75422280/+/RPS3    chr11  75421727  75422280      RPS3      +\nchr11:123060825-123061329/-/HSPA8 chr11 123060825 123061329     HSPA8      -\nchr11:123061588-123061833/-/HSPA8 chr11 123061588 123061833     HSPA8      -\nchr11:123061869-123062022/-/HSPA8 chr11 123061869 123062022     HSPA8      -"
  },
  {
    "objectID": "Yano/ParseExonName.html#description",
    "href": "Yano/ParseExonName.html#description",
    "title": "ParseExonName",
    "section": "",
    "text": "Parse chromosome, start, end, strand, and gene name from the exon name. The exon name generated by ‘PISA anno’ is formated like chr:start-end/[+-]/gene_name."
  },
  {
    "objectID": "Yano/ParseExonName.html#usage",
    "href": "Yano/ParseExonName.html#usage",
    "title": "ParseExonName",
    "section": "",
    "text": "ParseExonName(object = NULL, assay = NULL)"
  },
  {
    "objectID": "Yano/ParseExonName.html#arguments",
    "href": "Yano/ParseExonName.html#arguments",
    "title": "ParseExonName",
    "section": "",
    "text": "object\n\n\nSeurat object.\n\n\n\n\nassay\n\n\nExon assay name. Default use current actived assay."
  },
  {
    "objectID": "Yano/ParseExonName.html#examples",
    "href": "Yano/ParseExonName.html#examples",
    "title": "ParseExonName",
    "section": "",
    "text": "library(\"Yano\")\n\ndata(\"glbt_small\")\nDefaultAssay(glbt_small) &lt;- \"exon\"\n# Check the meta table before parsing\nhead(glbt_small[['exon']][[]])\ndata frame with 0 columns and 6 rows\nglbt_small &lt;- ParseExonName(glbt_small)\n\n# Now see the meta table after parsing\nhead(glbt_small[['exon']][[]])\n                                    chr     start       end gene_name strand\nchr1:154169305-154169383/-/TPM3    chr1 154169305 154169383      TPM3      -\nchr11:35197162-35197793/+/CD44    chr11  35197162  35197793      CD44      +\nchr11:75421727-75422280/+/RPS3    chr11  75421727  75422280      RPS3      +\nchr11:123060825-123061329/-/HSPA8 chr11 123060825 123061329     HSPA8      -\nchr11:123061588-123061833/-/HSPA8 chr11 123061588 123061833     HSPA8      -\nchr11:123061869-123062022/-/HSPA8 chr11 123061869 123062022     HSPA8      -"
  },
  {
    "objectID": "Yano/FbtPlot.html",
    "href": "Yano/FbtPlot.html",
    "title": "FbtPlot",
    "section": "",
    "text": "Source code\n\n\nGenerate Manhatten plot for log10 scaled p value for spatial dissimilarity test. X axis is the location of features. The function use ggplot2 as backend.\n\n\n\nFbtPlot(\n  object = NULL,\n  val = NULL,\n  assay = NULL,\n  chr.name = \"chr\",\n  start.name = \"start\",\n  end.name = \"end\",\n  col.by = NULL,\n  cols = NULL,\n  sel.chrs = NULL,\n  pt.size = NULL,\n  xlab = \"Chromosome\",\n  ylab = expression(-log[10](p)),\n  subset = NULL,\n  point.label = NULL,\n  label.size = 3,\n  shape.by = NULL,\n  chr = NULL,\n  start = NULL,\n  end = NULL,\n  gtf = NULL,\n  gene = NULL,\n  upstream = 1000,\n  downstream = 1000,\n  print.genes = NULL,\n  remove.chr = FALSE,\n  layout.heights = c(3, 2)\n)\n\n\n\n\n\n\n\nobject\n\n\nSeurat object.\n\n\n\n\nval\n\n\nSpecify the name of p value. The name usually be format like bind-name.pval and bind-name.padj (BH adjusted p value). For example, if you use gene as binding feature, the name should be gene_name.pval or gene_name.padj.\n\n\n\n\nassay\n\n\nWork assay.\n\n\n\n\nchr.name\n\n\nThe title of chromosome name in the meta table. Default is “chr”.\n\n\n\n\nstart.name\n\n\nThe title of start position name in the meta table. Default is “start”.\n\n\n\n\nend.name\n\n\nThe title of end position name in the meta table. Default is “end”.\n\n\n\n\ncol.by\n\n\nColor points by specify the title of values in meta table. Can be discrete or continous.\n\n\n\n\ncols\n\n\nManually specify the colors. Used with col.by.\n\n\n\n\nsel.chrs\n\n\nVector of selected chromosome names to plot. Change the order by set the level of chr names.\n\n\n\n\npt.size\n\n\nPoint size.\n\n\n\n\nxlab\n\n\nLabel for x axis. Default is “Chromosome”.\n\n\n\n\nylab\n\n\nLabel for y axis. Default is “-log10p”.\n\n\n\n\nsubset\n\n\nRule for subsetting the meta table before plot.\n\n\n\n\npoint.label\n\n\nVector of points to plot their labels.\n\n\n\n\nlabel.size\n\n\nSize of label. Default is 3.\n\n\n\n\nshape.by\n\n\nShape points by specify the title of values in meta table. Can only be discrete.\n\n\n\n\nchr\n\n\nChoromsome to zoom in. Default is NULL, no zoom in. The zoom in mode can be enabled by setting chr or gene/gtf.\n\n\n\n\nstart\n\n\nStart position to zoom in.\n\n\n\n\nend\n\n\nEnd position to zoom in.\n\n\n\n\ngtf\n\n\nGTF database. Load by gtf2db. Default is NULL. If specified transcirpt tracks will be plotted.\n\n\n\n\ngene\n\n\nGene name to zoom in. Should used with gtf database specified.\n\n\n\n\nupstream\n\n\nFlank zoom in region with upstream. Default is 1000. Only works when zoom in mode enabled.\n\n\n\n\ndownstream\n\n\nFlank zoom in region with downstream. Default is 1000. Only works when zoom in mode enabled.\n\n\n\n\nprint.genes\n\n\nPrint the gene names in the transcript tracks. Default will print all or randomly 20 genes if more than 20 genes in this region.\n\n\n\n\nremove.chr\n\n\nRemove ‘chr’ in the chromosome names.\n\n\n\n\nlayout.heights\n\n\nSpecify the layouts for Manhatten plot and gene tracks. Default is c(3,2)."
  },
  {
    "objectID": "Yano/FbtPlot.html#description",
    "href": "Yano/FbtPlot.html#description",
    "title": "FbtPlot",
    "section": "",
    "text": "Generate Manhatten plot for log10 scaled p value for spatial dissimilarity test. X axis is the location of features. The function use ggplot2 as backend."
  },
  {
    "objectID": "Yano/FbtPlot.html#usage",
    "href": "Yano/FbtPlot.html#usage",
    "title": "FbtPlot",
    "section": "",
    "text": "FbtPlot(\n  object = NULL,\n  val = NULL,\n  assay = NULL,\n  chr.name = \"chr\",\n  start.name = \"start\",\n  end.name = \"end\",\n  col.by = NULL,\n  cols = NULL,\n  sel.chrs = NULL,\n  pt.size = NULL,\n  xlab = \"Chromosome\",\n  ylab = expression(-log[10](p)),\n  subset = NULL,\n  point.label = NULL,\n  label.size = 3,\n  shape.by = NULL,\n  chr = NULL,\n  start = NULL,\n  end = NULL,\n  gtf = NULL,\n  gene = NULL,\n  upstream = 1000,\n  downstream = 1000,\n  print.genes = NULL,\n  remove.chr = FALSE,\n  layout.heights = c(3, 2)\n)"
  },
  {
    "objectID": "Yano/FbtPlot.html#arguments",
    "href": "Yano/FbtPlot.html#arguments",
    "title": "FbtPlot",
    "section": "",
    "text": "object\n\n\nSeurat object.\n\n\n\n\nval\n\n\nSpecify the name of p value. The name usually be format like bind-name.pval and bind-name.padj (BH adjusted p value). For example, if you use gene as binding feature, the name should be gene_name.pval or gene_name.padj.\n\n\n\n\nassay\n\n\nWork assay.\n\n\n\n\nchr.name\n\n\nThe title of chromosome name in the meta table. Default is “chr”.\n\n\n\n\nstart.name\n\n\nThe title of start position name in the meta table. Default is “start”.\n\n\n\n\nend.name\n\n\nThe title of end position name in the meta table. Default is “end”.\n\n\n\n\ncol.by\n\n\nColor points by specify the title of values in meta table. Can be discrete or continous.\n\n\n\n\ncols\n\n\nManually specify the colors. Used with col.by.\n\n\n\n\nsel.chrs\n\n\nVector of selected chromosome names to plot. Change the order by set the level of chr names.\n\n\n\n\npt.size\n\n\nPoint size.\n\n\n\n\nxlab\n\n\nLabel for x axis. Default is “Chromosome”.\n\n\n\n\nylab\n\n\nLabel for y axis. Default is “-log10p”.\n\n\n\n\nsubset\n\n\nRule for subsetting the meta table before plot.\n\n\n\n\npoint.label\n\n\nVector of points to plot their labels.\n\n\n\n\nlabel.size\n\n\nSize of label. Default is 3.\n\n\n\n\nshape.by\n\n\nShape points by specify the title of values in meta table. Can only be discrete.\n\n\n\n\nchr\n\n\nChoromsome to zoom in. Default is NULL, no zoom in. The zoom in mode can be enabled by setting chr or gene/gtf.\n\n\n\n\nstart\n\n\nStart position to zoom in.\n\n\n\n\nend\n\n\nEnd position to zoom in.\n\n\n\n\ngtf\n\n\nGTF database. Load by gtf2db. Default is NULL. If specified transcirpt tracks will be plotted.\n\n\n\n\ngene\n\n\nGene name to zoom in. Should used with gtf database specified.\n\n\n\n\nupstream\n\n\nFlank zoom in region with upstream. Default is 1000. Only works when zoom in mode enabled.\n\n\n\n\ndownstream\n\n\nFlank zoom in region with downstream. Default is 1000. Only works when zoom in mode enabled.\n\n\n\n\nprint.genes\n\n\nPrint the gene names in the transcript tracks. Default will print all or randomly 20 genes if more than 20 genes in this region.\n\n\n\n\nremove.chr\n\n\nRemove ‘chr’ in the chromosome names.\n\n\n\n\nlayout.heights\n\n\nSpecify the layouts for Manhatten plot and gene tracks. Default is c(3,2)."
  }
]